/**
* Copyright 2016 PT Inovação e Sistemas SA
* Copyright 2016 INESC-ID
* Copyright 2016 QUOBIS NETWORKS SL
* Copyright 2016 FRAUNHOFER-GESELLSCHAFT ZUR FOERDERUNG DER ANGEWANDTEN FORSCHUNG E.V
* Copyright 2016 ORANGE SA
* Copyright 2016 Deutsche Telekom AG
* Copyright 2016 Apizee
* Copyright 2016 TECHNISCHE UNIVERSITAT BERLIN
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
**/

import {divideURL, convertToUserURL} from '../utils/utils';

/**
* Notification Manager interface
*/
class NotificationManager {

  /**
  * To initialise the NotificationManager, which will provide the support for hyperties to
  * request notifications about the state of other hyperties.
  * @param  {MessageBus}          msgbus                msgbus
  * @param  {RuntimeURL}          runtimeURL            runtimeURL
  */
  constructor(runtimeURL, msgBus) {
    this._messageBus = msgBus;
    this._runtimeURL = runtimeURL;
    this._notificationManagerURL = runtimeURL + '/nm/';
    this._subscribers = {};

    _this.messageBus.addListener(this._notificationManagerURL, (msg) => {
      //Decide which function to call...
      //We only need the url that we want to subscribe or not?
      _subscribe(msg.body.subscribe);
      //Update map?
      //Send a response?
    });
  }

  //We need the callback and the subscriber here?
  _subscribe(url, subscriber, callback) {

    const msg = {
      type: 'subscribe',
      from: this._notificationManagerURL,
      to: this._runtimeURL + '/nm/', //should be the subscription manager present in msg-node
      body: {
        subscribe: url + '/registration',
      }
    };

    return new Promise(function(resolve, reject) {

      this._messageBus.postMessage(msg, (reply) => {
        console.log("[NotificationManager.subscribe] rcved reply ", reply);

        if(reply.body.code === 200)
          resolve();
        else
          reject();
      });
    });
  }

}
