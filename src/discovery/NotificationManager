/**
* Copyright 2016 PT Inovação e Sistemas SA
* Copyright 2016 INESC-ID
* Copyright 2016 QUOBIS NETWORKS SL
* Copyright 2016 FRAUNHOFER-GESELLSCHAFT ZUR FOERDERUNG DER ANGEWANDTEN FORSCHUNG E.V
* Copyright 2016 ORANGE SA
* Copyright 2016 Deutsche Telekom AG
* Copyright 2016 Apizee
* Copyright 2016 TECHNISCHE UNIVERSITAT BERLIN
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
**/

import {divideURL, convertToUserURL} from '../utils/utils';

/**
* Notification Manager interface
*/
class NotificationManager {

  /**
  * To initialise the NotificationManager, which will provide the support for hyperties to
  * request notifications about the state of other hyperties.
  * @param  {MessageBus}          msgbus                msgbus
  * @param  {RuntimeURL}          runtimeURL            runtimeURL
  */
  constructor(runtimeURL, msgBus) {
    this._messageBus = msgBus;
    this._runtimeURL = runtimeURL;
    this._domain = divideURL(runtimeURL).domain;
    this._notificationManagerURL = runtimeURL + '/nm/';
    this._subscriptions = {};

    this._messageBus.addListener(this._notificationManagerURL, (msg) => {
      //Decide which function to call...
      if(msg.type === 'subscribe')
        _subscribe(msg.body.subscribe, msg.body.subscriber);
      else if (msg.type === 'notification') {
        _notify(msg.body);
      }
    });
  }

  _subscribe(url, subscriber) {

    if(url in this._subscriptions) {
      this._subscriptions[url].push(subscriber);
      return;
    }

    const msg = {
      type: 'subscribe',
      from: this._notificationManagerURL,
      to: 'domain://msg.node.' + this._domain + '/sm',
      body: {
        subscribe: url + '/registration',
      }
    };

    this._messageBus.postMessage(msg, (reply) => {
      console.log("[NotificationManager.subscribe] rcved reply ", reply);

      if(reply.body.code === 200) {
        this._subscriptions[url] = [];
        this._subscriptions[url].push(subscriber);
      }
      else
        console.error("Error subscribing ", url);
    });
  }

  _notify(body) {

    this._subscriptions[body.url].forEach((subscriber) => {

      const msg = {
        type: 'notification',
        from: this._notificationManagerURL,
        to: subscriber,
        body: {
          status: body.status,
        }
      };

      this._messageBus.postMessage(msg, (reply) => {});

    });
  }

}

export default NotificationManager;
