{"version":3,"sources":["runtime/Loader.js"],"names":["_utils","require","Loader","hypertyDescriptorURL","_this","this","_readyToUse","Error","_promise2","default","resolve","reject","_hypertyURL","_hypertySandbox","_hypertyDescriptor","_hypertySourcePackage","haveError","errorReason","reason","console","error","handleError","info","runtimeCatalogue","getHypertyDescriptor","then","hypertyDescriptor","sourcePackageURL","sourcePackage","getSourcePackageFromURL","policy","policyResult","inSameSandbox","sandbox","registry","getAppSandbox","domain","divideURL","getSandbox","_runtimeFactory","createSandbox","addListener","msg","messageBus","postMessage","registerHyperty","hypertyURL","configuration","emptyObject","_assign2","JSON","parse","e","runtimeURL","_runtimeURL","deployComponent","sourceCode","deployComponentStatus","hyperty","runtimeHypertyURL","status","catch","protostubURL","_this2","_stubSandbox","_stubDescriptor","_runtimeProtoStubURL","_stubSourcePackage","discoverProtostub","runtimeProtoStubURL","stub","getStubDescriptor","stubDescriptor","stubSourcePackage","stubSandbox","registerStub","idpProxyURL","_this3","_proxySandbox","_proxyDescriptor","_runtimeIdpProxyURL","_proxySourcePackage","discoverIdpProxy","runtimeIdpProxyURL","idpProxy","getIdpProxyDescriptor","proxyDescriptor","proxySandbox","registerIdpProxy","_messagesBus","_runtimeCatalogue","_registry","value"],"mappings":"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","file":"runtime/Loader.js","sourcesContent":["import {divideURL, emptyObject} from '../utils/utils';\n\nclass Loader {\n\n  /**\n   * Set runtime url\n   * @param  {string} value runtimeURL\n   */\n  set runtimeURL(value) {\n    this._runtimeURL = value;\n  }\n\n  /**\n   * Get runtime url\n   * @return {string} value runtimeURL\n   */\n  get runtimeURL() {\n    return this._runtimeURL;\n  }\n\n  /**\n   * Set Registry component\n   * @param  {Registry} value Registry Component\n   */\n  set registry(value) {\n    this._registry = value;\n  }\n\n  /**\n   * Get Registry component\n   * @return {Registry} Registry component\n   */\n  get registry() {\n    return this._registry;\n  }\n\n  /**\n   * Set Runtime Catalogue Component\n   * @param  {RuntimeCatalogue} value runtime catalogue component\n   */\n  set runtimeCatalogue(value) {\n    this._runtimeCatalogue = value;\n  }\n\n  /**\n   * Get Runtime Catalogue component\n   * @return {RuntimeCatalogue} Runtime Catalogue component\n   */\n  get runtimeCatalogue() {\n    return this._runtimeCatalogue;\n  }\n\n  /**\n   * Set Message Bus component\n   * @param  {MessageBus} value Message bus component\n   */\n  set messageBus(value) {\n    this._messagesBus = value;\n  }\n\n  /**\n   * Get Message Bus component\n   * @return {MessageBus} Message Bus component\n   */\n  get messageBus() {\n    return this._messagesBus;\n  }\n\n  /**\n   * Set Runtime Factory component\n   * @param  {runtimeFactory} value Factory includes the specific implementations for each environment\n   */\n  set runtimeFactory(value) {\n    this._runtimeFactory = value;\n  }\n\n  /**\n   * Get Runtime Factory component\n   * @return {runtimeFactory} Runtime Factory component\n   */\n  get runtimeFactory() {\n    return this._runtimeFactory;\n  }\n\n  /**\n  * Deploy Hyperty from Catalogue URL\n  * @param  {URL.HypertyCatalogueURL}    hyperty hypertyDescriptor url;\n  */\n  loadHyperty(hypertyDescriptorURL) {\n\n    if (!this._readyToUse()) return false;\n    if (!hypertyDescriptorURL) throw new Error('Hyperty descriptor url parameter is needed');\n\n    return new Promise((resolve, reject) => {\n\n      let _hypertyURL;\n      let _hypertySandbox;\n      let _hypertyDescriptor;\n      let _hypertySourcePackage;\n      let haveError = false;\n\n      let errorReason = (reason) => {\n        console.error('Something failed on the deploy hyperty: ', reason);\n        reject(reason);\n      };\n\n      let handleError = (reason) => {\n        haveError = true;\n        reject(reason);\n      };\n\n      // Get Hyperty descriptor\n      // TODO: the request Module should be changed,\n      // because at this moment it is incompatible with nodejs;\n      // Probably we need to pass a factory like we do for sandboxes;\n      console.info('------------------ Hyperty ------------------------');\n      console.info('Get hyperty descriptor for :', hypertyDescriptorURL);\n      return this.runtimeCatalogue.getHypertyDescriptor(hypertyDescriptorURL)\n      .then((hypertyDescriptor) => {\n        // at this point, we have completed \"step 2 and 3\" as shown in https://github.com/reTHINK-project/core-framework/blob/master/docs/specs/runtime/dynamic-view/basics/deploy-hyperty.md\n        console.info('1: return hyperty descriptor');\n\n        // hyperty contains the full path of the catalogue URL, e.g.\n        // catalogue.rethink.eu/.well-known/..........\n        _hypertyDescriptor = hypertyDescriptor;\n\n        let sourcePackageURL = hypertyDescriptor.sourcePackageURL;\n\n        if (sourcePackageURL === '/sourcePackage') {\n          return hypertyDescriptor.sourcePackage;\n        }\n\n        // Get the hyperty source code\n        return this.runtimeCatalogue.getSourcePackageFromURL(sourcePackageURL);\n      }, handleError)\n      .then((sourcePackage) => {\n        if (haveError) return false;\n\n        console.info('2: return hyperty source code');\n\n        // at this point, we have completed \"step 4 and 5\" as shown in https://github.com/reTHINK-project/core-framework/blob/master/docs/specs/runtime/dynamic-view/basics/deploy-hyperty.md\n\n        _hypertySourcePackage = sourcePackage;\n\n        //\n        // steps 6 -- 9 are skipped.\n        // TODO: on release of core 0.2;\n        // TODO: Promise to check the policy engine\n\n        // mock-up code;\n        // temporary code, only\n        let policy = true;\n\n        return policy;\n      }, handleError)\n      .then((policyResult) => {\n        if (haveError) return false;\n        console.info('3: return policy engine result' + policyResult);\n\n        // we have completed step 6 to 9 of https://github.com/reTHINK-project/core-framework/blob/master/docs/specs/runtime/dynamic-view/basics/deploy-hyperty.md right now.\n        //\n        // Steps 6 -- 9\n        // As a result of the sipped steps, we know at this point if we execute\n        // inSameSandbox or not.\n        //\n\n        // For testing, just assume we execute in same Sandbox.\n        let inSameSandbox = true;\n        let sandbox;\n\n        if (inSameSandbox) {\n\n          // this don't need be a Promise;\n          sandbox = this.registry.getAppSandbox();\n\n          // we have completed step 11 here.\n        } else {\n\n          let domain = divideURL(hypertyDescriptorURL).domain;\n\n          // getSandbox, this will return a promise;\n          sandbox = this.registry.getSandbox(domain);\n        }\n\n        // this will return the sandbox or one promise to getSandbox;\n        return sandbox;\n      }, handleError)\n      .then((sandbox) => {\n        if (haveError) return false;\n        console.info('4: return the sandbox', sandbox);\n\n        // Return the sandbox indepentely if it running in the same sandbox or not\n        // we have completed step 14 here.\n        return sandbox;\n      }, (reason) => {\n        if (haveError) return false;\n        console.error('4.1: Try to register a new sandbox');\n\n        // check if the sandbox is registed for this hyperty descriptor url;\n        // Make Steps xxx --- xxx\n        // Instantiate the Sandbox\n        let sandbox = this._runtimeFactory.createSandbox();\n\n        sandbox.addListener('*', (msg) => {\n          this.messageBus.postMessage(msg);\n        });\n\n        return sandbox;\n      }, handleError)\n      .then((sandbox) => {\n        if (haveError) return false;\n        console.info('5: return sandbox and register');\n\n        _hypertySandbox = sandbox;\n\n        // Register hyperty\n        return this.registry.registerHyperty(sandbox, hypertyDescriptorURL, _hypertyDescriptor);\n      }, handleError)\n      .then((hypertyURL) => {\n        if (haveError) return false;\n        console.info('6: Hyperty url, after register hyperty', hypertyURL);\n\n        // we have completed step 16 of https://github.com/reTHINK-project/core-framework/blob/master/docs/specs/runtime/dynamic-view/basics/deploy-hyperty.md right now.\n        _hypertyURL = hypertyURL;\n\n        // Extend original hyperty configuration;\n        let configuration = {};\n        if (!emptyObject(_hypertyDescriptor.configuration)) {\n          try {\n            configuration = Object.assign({}, JSON.parse(_hypertyDescriptor.configuration));\n          } catch (e) {\n            configuration = _hypertyDescriptor.configuration;\n          }\n        }\n        configuration.runtimeURL = this._runtimeURL;\n\n        // We will deploy the component - step 17 of https://github.com/reTHINK-project/core-framework/blob/master/docs/specs/runtime/dynamic-view/basics/deploy-hyperty.md right now.\n        return _hypertySandbox.deployComponent(_hypertySourcePackage.sourceCode, _hypertyURL, configuration);\n      }, handleError)\n      .then((deployComponentStatus) => {\n        if (haveError) return false;\n        console.info('7: Deploy component status for hyperty: ', deployComponentStatus);\n\n        // we have completed step 19 https://github.com/reTHINK-project/core-framework/blob/master/docs/specs/runtime/dynamic-view/basics/deploy-hyperty.md right now.\n\n        // Add the message bus listener to the appSandbox or hypertSandbox;\n        this.messageBus.addListener(_hypertyURL, (msg) => {\n          _hypertySandbox.postMessage(msg);\n        });\n\n        // we have completed step 20 of https://github.com/reTHINK-project/core-framework/blob/master/docs/specs/runtime/dynamic-view/basics/deploy-hyperty.md right now.\n        let hyperty = {\n          runtimeHypertyURL: _hypertyURL,\n          status: deployComponentStatus\n        };\n\n        resolve(hyperty);\n\n        // we have completed step 21 https://github.com/reTHINK-project/core-framework/blob/master/docs/specs/runtime/dynamic-view/basics/deploy-hyperty.md right now.\n        console.info('------------------ END ------------------------');\n      }, handleError)\n      .catch(errorReason);\n    });\n  }\n\n  /**\n  * Deploy Stub from Catalogue URL or domain url\n  * @param  {URL.URL}     domain          domain\n  */\n  loadStub(protostubURL) {\n\n    if (!this._readyToUse()) return false;\n    if (!protostubURL) throw new Error('ProtoStub descriptor url parameter is needed');\n\n    return new Promise((resolve, reject) => {\n\n      let domain = divideURL(protostubURL).domain;\n\n      if (!domain) {\n        domain = protostubURL;\n      }\n\n      let _stubSandbox;\n      let _stubDescriptor;\n      let _runtimeProtoStubURL;\n      let _stubSourcePackage;\n      let haveError = false;\n\n      let errorReason = (reason) => {\n        console.error('Something failed on the deploy of protocolstub: ', reason);\n        reject(reason);\n      };\n\n      let handleError = (reason) => {\n        haveError = true;\n        reject(reason);\n      };\n\n      // Discover Protocol Stub\n      console.info('------------------- ProtoStub ---------------------------\\n');\n      console.info('Discover or Create a new ProtoStub for domain: ', domain);\n      this.registry.discoverProtostub(domain).then((runtimeProtoStubURL) => {\n        // Is registed?\n        console.info('1. Proto Stub Discovered: ', runtimeProtoStubURL);\n\n        // we have completed step 2 https://github.com/reTHINK-project/core-framework/blob/master/docs/specs/runtime/dynamic-view/basics/deploy-protostub.md\n\n        // TODO: Check if the status is saved in the status of sandbox;\n        let stub = {\n          runtimeProtoStubURL: runtimeProtoStubURL,\n          status: 'deployed'\n        };\n\n        resolve(stub);\n        console.info('------------------- END ---------------------------\\n');\n      })\n      .catch((reason) => {\n\n        // is not registed?\n        console.info('1. Proto Stub not found ' + reason);\n\n        // we have completed step 3 https://github.com/reTHINK-project/core-framework/blob/master/docs/specs/runtime/dynamic-view/basics/deploy-protostub.md\n\n        // we need to get ProtoStub descriptor step 4 https://github.com/reTHINK-project/core-framework/blob/master/docs/specs/runtime/dynamic-view/basics/deploy-protostub.md\n        this.runtimeCatalogue.getStubDescriptor(protostubURL)\n        .then((stubDescriptor) => {\n          if (haveError) return false;\n          console.info('2. return the ProtoStub descriptor');\n\n          // we have completed step 5 https://github.com/reTHINK-project/core-framework/blob/master/docs/specs/runtime/dynamic-view/basics/deploy-protostub.md\n          _stubDescriptor = stubDescriptor;\n\n          let sourcePackageURL = stubDescriptor.sourcePackageURL;\n\n          if (sourcePackageURL === '/sourcePackage') {\n            return stubDescriptor.sourcePackage;\n          }\n\n          // we need to get ProtoStub Source code from descriptor - step 6 https://github.com/reTHINK-project/core-framework/blob/master/docs/specs/runtime/dynamic-view/basics/deploy-protostub.md\n          return this.runtimeCatalogue.getSourcePackageFromURL(sourcePackageURL);\n        }, handleError)\n        .catch(errorReason)\n        .then((stubSourcePackage) => {\n          if (haveError) return false;\n          console.info('3. return the ProtoStub Source Code');\n\n          // we have completed step 7 https://github.com/reTHINK-project/core-framework/blob/master/docs/specs/runtime/dynamic-view/basics/deploy-protostub.md\n\n          _stubSourcePackage = stubSourcePackage;\n\n          // TODO: Check on PEP (policy Engine) if we need the sandbox and check if the Sandbox Factory have the context sandbox;\n          let policy = true;\n          return policy;\n        }, handleError)\n        .then((policy) => {\n          if (haveError) return false;\n\n          // this will return the sandbox or one promise to getSandbox;\n          return this.registry.getSandbox(domain);\n        })\n        .then((stubSandbox) => {\n          if (haveError) return false;\n          console.info('4. if the sandbox is registered then return the sandbox ', stubSandbox);\n\n          // we have completed step xxx https://github.com/reTHINK-project/core-framework/blob/master/docs/specs/runtime/dynamic-view/basics/deploy-protostub.md\n\n          _stubSandbox = stubSandbox;\n          return stubSandbox;\n        })\n        .catch((reason) => {\n          if (haveError) return false;\n          console.info('5. Sandbox was not found, creating a new one ', reason);\n\n          // check if the sandbox is registed for this stub descriptor url;\n          // Make Steps xxx --- xxx\n          // Instantiate the Sandbox\n          let sandbox = this._runtimeFactory.createSandbox();\n          sandbox.addListener('*', (msg) => {\n            this.messageBus.postMessage(msg);\n          });\n\n          return sandbox;\n        })\n        .then((sandbox) => {\n          if (haveError) return false;\n          console.info('6. return the sandbox instance and register', sandbox, 'to domain ', domain);\n\n          _stubSandbox = sandbox;\n\n          // we need register stub on registry - step xxx https://github.com/reTHINK-project/core-framework/blob/master/docs/specs/runtime/dynamic-view/basics/deploy-protostub.md\n          return this.registry.registerStub(_stubSandbox, domain);\n        }, handleError)\n        .then((runtimeProtoStubURL) => {\n          if (haveError) return false;\n          console.info('7. return the runtime protostub url: ', runtimeProtoStubURL);\n\n          // we have completed step xxx https://github.com/reTHINK-project/core-framework/blob/master/docs/specs/runtime/dynamic-view/basics/deploy-protostub.md\n\n          _runtimeProtoStubURL = runtimeProtoStubURL;\n\n          // Extend original hyperty configuration;\n          let configuration = {};\n          if (!emptyObject(_stubDescriptor.configuration)) {\n            try {\n              configuration = Object.assign({}, JSON.parse(_stubDescriptor.configuration));\n            } catch (e) {\n              configuration = _stubDescriptor.configuration;\n            }\n          }\n\n          configuration.runtimeURL = this._runtimeURL;\n\n          // Deploy Component step xxx\n          return _stubSandbox.deployComponent(_stubSourcePackage.sourceCode, runtimeProtoStubURL, configuration);\n        }, handleError)\n        .then((deployComponentStatus) => {\n          if (haveError) return false;\n          console.info('8: return deploy component for sandbox status: ', deployComponentStatus);\n\n          // we have completed step xxx https://github.com/reTHINK-project/core-framework/blob/master/docs/specs/runtime/dynamic-view/basics/deploy-protostub.md\n\n          // Add the message bus listener\n          this.messageBus.addListener(_runtimeProtoStubURL, (msg) => {\n            _stubSandbox.postMessage(msg);\n          });\n\n          // we have completed step xxx https://github.com/reTHINK-project/core-framework/blob/master/docs/specs/runtime/dynamic-view/basics/deploy-protostub.md\n\n          // Load Stub function resolved with success;\n          let stub = {\n            runtimeProtoStubURL: _runtimeProtoStubURL,\n            status: deployComponentStatus\n          };\n\n          resolve(stub);\n          console.info('------------------- END ---------------------------\\n');\n\n        }, handleError)\n        .catch(errorReason);\n\n      });\n\n    });\n\n  }\n\n  /**\n  * Deploy idpProxy from Catalogue URL or domain url\n  * @param  {URL.URL}     domain          domain\n  */\n  loadIdpProxy(idpProxyURL) {\n\n    if (!this._readyToUse()) return false;\n    if (!idpProxyURL) throw new Error('IdpProxy descriptor url parameter is needed');\n\n    return new Promise((resolve, reject) => {\n\n      let domain = divideURL(idpProxyURL).domain;\n\n      if (!domain) {\n        domain = idpProxyURL;\n      }\n\n      let _proxySandbox;\n      let _proxyDescriptor;\n      let _runtimeIdpProxyURL;\n      let _proxySourcePackage;\n      let haveError = false;\n\n      let errorReason = (reason) => {\n        console.error('Something failed on the deploy of IdpProxy: ', reason);\n        reject(reason);\n      };\n\n      let handleError = (reason) => {\n        haveError = true;\n        reject(reason);\n      };\n\n      // Discover IDPProxy\n      console.info('------------------- IDP Proxy Deploy ---------------------------\\n');\n      console.info('Discover or Create a new IdpProxy for domain/URL: ', domain);\n      return this.registry.discoverIdpProxy(domain)\n      .then((runtimeIdpProxyURL) => {\n        // Is registed?\n        console.info('1. IDPProxy Discovered: ', runtimeIdpProxyURL);\n\n        // we have completed step 2 https://github.com/reTHINK-project/core-framework/blob/master/docs/specs/runtime/dynamic-view/basics/deploy-protostub.md\n\n        // TODO: Check if the status is saved in the status of sandbox;\n        let idpProxy = {\n          runtimeIdpProxyURL: runtimeIdpProxyURL,\n          status: 'deployed'\n        };\n\n        resolve(idpProxy);\n        console.info('------------------- END ---------------------------\\n');\n      })\n      .catch((reason) => {\n\n        // is not registed?\n        console.info('1. IdpProxy not found:', reason);\n\n        // we have completed step 3 https://github.com/reTHINK-project/core-framework/blob/master/docs/specs/runtime/dynamic-view/basics/deploy-protostub.md\n\n        // we need to get ProtoStub descriptor step 4 https://github.com/reTHINK-project/core-framework/blob/master/docs/specs/runtime/dynamic-view/basics/deploy-protostub.md\n        this.runtimeCatalogue.getIdpProxyDescriptor(idpProxyURL)\n        .then((proxyDescriptor) => {\n\n          console.info('2. Return the IDPProxy descriptor');\n\n          // we have completed step 5 https://github.com/reTHINK-project/core-framework/blob/master/docs/specs/runtime/dynamic-view/basics/deploy-protostub.md\n          _proxyDescriptor = proxyDescriptor;\n\n          let sourcePackageURL = proxyDescriptor.sourcePackageURL;\n\n          if (sourcePackageURL === '/sourcePackage') {\n            return proxyDescriptor.sourcePackage;\n          }\n\n          // we need to get ProtoStub Source code from descriptor - step 6 https://github.com/reTHINK-project/core-framework/blob/master/docs/specs/runtime/dynamic-view/basics/deploy-protostub.md\n          return this.runtimeCatalogue.getSourcePackageFromURL(sourcePackageURL);\n        }, handleError)\n        .then((sourcePackage) => {\n          if (haveError) return false;\n          console.info('3. return the IDPProxy source package');\n\n          // we have completed step 7 https://github.com/reTHINK-project/core-framework/blob/master/docs/specs/runtime/dynamic-view/basics/deploy-protostub.md\n\n          _proxySourcePackage = sourcePackage;\n\n          // TODO: Check on PEP (policy Engine) if we need the sandbox and check if the Sandbox Factory have the context sandbox;\n          let policy = true;\n          return policy;\n        }, handleError)\n        .then((policy) => {\n          if (haveError) return false;\n\n          // this will return the sandbox or one promise to getSandbox;\n          return this.registry.getSandbox(domain);\n        })\n        .then((proxySandbox) => {\n          if (haveError) return false;\n          console.info('4. if the sandbox is registered then return the sandbox', proxySandbox);\n\n          _proxySandbox = proxySandbox;\n          return proxySandbox;\n        })\n        .catch((reason) => {\n          if (haveError) return false;\n          console.info('5. Sandbox was not found, creating a new one', reason);\n\n          // check if the sandbox is registed for this proxy descriptor url;\n          // Make Steps xxx --- xxx\n          // Instantiate the Sandbox\n          let sandbox = this._runtimeFactory.createSandbox();\n          sandbox.addListener('*', (msg) => {\n            this.messageBus.postMessage(msg);\n          });\n\n          return sandbox;\n        })\n        .then((sandbox) => {\n          if (haveError) return false;\n          console.info('6. return the sandbox instance and register', sandbox, 'to domain ', domain);\n\n          _proxySandbox = sandbox;\n\n          // we need register stub on registry - step xxx https://github.com/reTHINK-project/core-framework/blob/master/docs/specs/runtime/dynamic-view/basics/deploy-protostub.md\n          return this.registry.registerIdpProxy(sandbox, domain);\n        }, handleError)\n        .then((runtimeIdpProxyURL) => {\n          if (haveError) return false;\n          console.info('7. Return the runtime Idp Proxy URL: ', runtimeIdpProxyURL);\n\n          // we have completed step xxx https://github.com/reTHINK-project/core-framework/blob/master/docs/specs/runtime/dynamic-view/basics/deploy-protostub.md\n\n          _runtimeIdpProxyURL = runtimeIdpProxyURL;\n\n          // Extend original hyperty configuration;\n          let configuration = {};\n          if (!emptyObject(_proxyDescriptor.configuration)) {\n            try {\n              configuration = Object.assign({}, JSON.parse(_proxyDescriptor.configuration));\n            } catch (e) {\n              configuration = _proxyDescriptor.configuration;\n            }\n          }\n          configuration.runtimeURL = this._runtimeURL;\n\n          // Deploy Component step xxx\n          return _proxySandbox.deployComponent(_proxySourcePackage.sourceCode, runtimeIdpProxyURL, configuration);\n        }, handleError)\n        .then((deployComponentStatus) => {\n          if (haveError) return false;\n          console.info('8: return deploy component for sandbox status: ', deployComponentStatus);\n\n          // we have completed step xxx https://github.com/reTHINK-project/core-framework/blob/master/docs/specs/runtime/dynamic-view/basics/deploy-protostub.md\n\n          // Add the message bus listener\n          this.messageBus.addListener(_runtimeIdpProxyURL, (msg) => {\n            _proxySandbox.postMessage(msg);\n          });\n\n          // we have completed step xxx https://github.com/reTHINK-project/core-framework/blob/master/docs/specs/runtime/dynamic-view/basics/deploy-protostub.md\n\n          // Load Stub function resolved with success;\n          let idpProxy = {\n            runtimeIdpProxyURL: _runtimeIdpProxyURL,\n            status: deployComponentStatus\n          };\n\n          resolve(idpProxy);\n          console.info('------------------- END ---------------------------\\n');\n\n        }, handleError)\n        .catch(errorReason);\n      });\n\n    });\n  }\n\n  // Check if the loader is ready to load all components\n  _readyToUse() {\n\n    let status = false;\n\n    if (!this._runtimeURL) throw new Error('The loader need the runtime url address');\n    if (!this._messagesBus) throw new Error('The loader need the messageBus component');\n    if (!this._runtimeCatalogue) throw new Error('The loader need the runtimeCatalogue component');\n    if (!this._registry) throw new Error('The loader need the registry component');\n    if (!this._runtimeFactory) throw new Error('The loader need the runtime factory component');\n\n    status = true;\n    return status;\n  }\n\n}\n\nexport default Loader;\n"],"sourceRoot":"/source/"}