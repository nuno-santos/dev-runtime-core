{"version":3,"sources":["syncher/SyncherManager.js"],"names":["_utils","require","_ObjectAllocation","_ReporterObject","_ObserverObject","_tv","_MessageFactory","SyncherManager","runtimeURL","bus","registry","catalog","allocator","_classCallCheck3","default","this","_this","_bus","_registry","_catalog","_url","_objectURL","_reporters","_observers","_domain","divideURL","domain","_mf","MessageFactory","_allocator","_ObjectAllocation2","addListener","msg","console","log","type","_onCreate","_onDelete","_onLocalSubscribe","_onLocalUnSubscribe","owner","from","body","resource","_authorise","getDataSchemaDescriptor","schema","then","descriptor","properties","sourcePackage","sourceCode","scheme","constant","childrens","children","obj","value","_tv2","addSchema","id","result","validateMultiple","errors","forEach","error","stack","valid","missing","length","warn","_stringify2","debug","e","create","allocated","objURL","subscriptionURL","info","name","reporter","resources","registerDataObject","authorise","resolve","_ReporterObject2","forwardSubscribe","addChildrens","postMessage","to","code","childrenResources","setTimeout","catch","reason","responseMsg","desc","objSubscriptorURL","hypertyURL","identity","source","object","delete","_this2","objURLSubscription","childBaseURL","subscriptions","push","child","nodeSubscribeMsg","subscribe","reply","objSubscribeMsg","subscriber","observer","_ObserverObject2","addSubscription","removeSubscription"],"mappings":"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","file":"syncher/SyncherManager.js","sourcesContent":["/**\n* Copyright 2016 PT Inovação e Sistemas SA\n* Copyright 2016 INESC-ID\n* Copyright 2016 QUOBIS NETWORKS SL\n* Copyright 2016 FRAUNHOFER-GESELLSCHAFT ZUR FOERDERUNG DER ANGEWANDTEN FORSCHUNG E.V\n* Copyright 2016 ORANGE SA\n* Copyright 2016 Deutsche Telekom AG\n* Copyright 2016 Apizee\n* Copyright 2016 TECHNISCHE UNIVERSITAT BERLIN\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n**/\nimport { divideURL } from '../utils/utils';\nimport ObjectAllocation from './ObjectAllocation';\nimport ReporterObject from './ReporterObject';\nimport ObserverObject from './ObserverObject';\nimport tv4 from '../utils/tv4';\n\nimport {MessageFactory} from 'service-framework/dist/MessageFactory';\n\n/**\n * @author micaelpedrosa@gmail.com\n * Core Syncronization system.\n */\nclass SyncherManager {\n  /* private\n  _url: URL\n  _bus: MiniBus\n  _registry: Registry\n  _allocator: ObjectAllocation\n\n  _reporters: { ObjectURL: ReporterObject }\n  _observers: { ObjectURL: ObserverObject }\n  */\n\n  constructor(runtimeURL, bus, registry, catalog, allocator) {\n    let _this = this;\n\n    _this._bus = bus;\n    _this._registry = registry;\n    _this._catalog = catalog;\n\n    //TODO: these should be saved in persistence engine?\n    _this._url = runtimeURL + '/sm';\n    _this._objectURL = runtimeURL + '/object-allocation';\n\n    _this._reporters = {};\n    _this._observers = {};\n\n    //TODO: this should not be hardcoded!\n    _this._domain = divideURL(runtimeURL).domain;\n\n    _this._mf = new MessageFactory(false, {});\n\n    if (allocator) {\n      _this._allocator = allocator;\n    } else {\n      _this._allocator = new ObjectAllocation(_this._objectURL, bus);\n    }\n\n    bus.addListener(_this._url, (msg) => {\n      console.log('SyncherManager-RCV: ', msg);\n      switch (msg.type) {\n        case 'create': _this._onCreate(msg); break;\n        case 'delete': _this._onDelete(msg); break;\n        case 'subscribe': _this._onLocalSubscribe(msg); break;\n        case 'unsubscribe': _this._onLocalUnSubscribe(msg); break;\n      }\n    });\n  }\n\n  get url() { return this._url; }\n\n  //FLOW-IN: message received from Syncher -> create\n  _onCreate(msg) {\n\n    let _this = this;\n    let owner = msg.from;\n    let domain = divideURL(msg.from).domain;\n\n    if (msg.body.resource) {\n      _this._authorise(msg, msg.body.resource);\n      return;\n    }\n\n    //get schema from catalogue and parse -> (scheme, children)\n    _this._catalog.getDataSchemaDescriptor(msg.body.schema).then((descriptor) => {\n\n      let properties = descriptor.sourcePackage.sourceCode.properties;\n      let scheme = properties.scheme ? properties.scheme.constant : 'resource';\n      let childrens = properties.children ? properties.children.constant : [];\n\n      console.log('Scheme: ', scheme);\n\n      // schema validation\n      console.log('Running object validation...');\n      try {\n        let obj = msg.body.value;\n        let schema = descriptor.sourcePackage.sourceCode;\n\n        // add support for schema referencing itself\n        tv4.addSchema(schema.id, schema);\n\n        // validate\n        let result = tv4.validateMultiple(obj, schema);\n\n        // delete error stacks to improve logging\n        result.errors.forEach((error) => {\n          delete error.stack;\n        });\n\n        // print more details about validation if it fails or schema contains $refs\n        if (!result.valid || (result.missing.length > 0)) {\n          console.warn('Object validation ' + (result.valid ? 'succeeded, but schema contained references:' : 'failed:'), JSON.stringify(result, null, 2));\n          console.debug('Object:', JSON.stringify(obj, null, 2), '\\r\\nSchema:', JSON.stringify(schema, null, 2));\n        } else {\n          console.log('Object validation succeeded');\n        }\n      } catch (e) {\n        console.warn('Error during object validation:', e);\n      }\n\n      //request address allocation of a new object from the msg-node\n      _this._allocator.create(domain, scheme, 1).then((allocated) => {\n        let objURL = allocated[0];\n\n        console.log('ALLOCATOR CREATE:', allocated);\n\n        let subscriptionURL = objURL + '/subscription';\n\n        console.log('Subscription URL', subscriptionURL);\n\n        //To register the dataObject in the runtimeRegistry\n        console.info('Register Object: ', msg.body.value.name, msg.body.value.schema, objURL, msg.body.value.reporter, msg.body.value.resources);\n        _this._registry.registerDataObject(msg.body.value.name, msg.body.value.schema, objURL, msg.body.value.reporter, msg.body.value.resources, msg.body.authorise).then(function(resolve) {\n          console.log('DataObject successfully registered', resolve);\n\n          //all OK -> create reporter and register listeners\n          let reporter = new ReporterObject(_this, owner, objURL);\n          reporter.forwardSubscribe([objURL,subscriptionURL]).then(() => {\n            reporter.addChildrens(childrens).then(() => {\n              _this._reporters[objURL] = reporter;\n\n              //FLOW-OUT: message response to Syncher -> create\n              _this._bus.postMessage({\n                id: msg.id, type: 'response', from: msg.to, to: owner,\n                body: { code: 200, resource: objURL, childrenResources: childrens }\n              });\n\n              //send create to all observers, responses will be deliver to the Hyperty owner?\n              //schedule for next cycle needed, because the Reporter should be available.\n              setTimeout(() => {\n                //will invite other hyperties\n                _this._authorise(msg, objURL);\n              });\n            });\n          });\n        }, function(error) {\n          console.error(error);\n        });\n\n      });\n    }).catch((reason) => {\n      //FLOW-OUT: error message response to Syncher -> create\n      let responseMsg = {\n        id: msg.id, type: 'response', from: msg.to, to: owner,\n        body: { code: 500, desc: reason }\n      };\n\n      _this._bus.postMessage(responseMsg);\n    });\n  }\n\n  _authorise(msg, objURL) {\n    let _this = this;\n    let objSubscriptorURL = objURL + '/subscription';\n\n    msg.body.authorise.forEach((hypertyURL) => {\n      //FLOW-OUT: send invites to list of remote Syncher -> _onRemoteCreate -> onNotification\n      _this._bus.postMessage({\n        type: 'create', from: objSubscriptorURL, to: hypertyURL,\n        body: { identity: msg.body.identity, source: msg.from, value: msg.body.value, schema: msg.body.schema }\n      });\n    });\n  }\n\n  //FLOW-IN: message received from DataObjectReporter -> delete\n  _onDelete(msg) {\n    let _this = this;\n\n    let objURL = msg.body.resource;\n\n    let object = _this._reporters[objURL];\n    if (object) {\n      //TODO: is there any policy verification before delete?\n      object.delete();\n\n      //TODO: unregister object?\n      _this._bus.postMessage({\n        id: msg.id, type: 'response', from: msg.to, to: msg.from,\n        body: { code: 200 }\n      });\n    }\n  }\n\n  //FLOW-IN: message received from local Syncher -> subscribe\n  _onLocalSubscribe(msg) {\n    let _this = this;\n\n    let hypertyURL = msg.from;\n    let objURL = msg.body.resource;\n    let objURLSubscription = objURL + '/subscription';\n    let childBaseURL = objURL + '/children/';\n\n    let domain = divideURL(objURL).domain;\n\n    //get schema from catalogue and parse -> (children)\n    _this._catalog.getDataSchemaDescriptor(msg.body.schema).then((descriptor) => {\n      let properties = descriptor.sourcePackage.sourceCode.properties;\n      let childrens = properties.children ? properties.children.constant : [];\n\n      //children addresses\n      let subscriptions = [];\n      subscriptions.push(objURL + '/changes');\n      childrens.forEach((child) => subscriptions.push(childBaseURL + child));\n\n      //FLOW-OUT: subscribe message to the msg-node, registering listeners on the broker\n      let nodeSubscribeMsg = {\n        type: 'subscribe', from: _this._url, to: 'domain://msg-node.' + domain + '/sm',\n        body: { identity: msg.body.identity, subscribe: subscriptions, source: hypertyURL }\n      };\n\n      //subscribe in msg-node\n      _this._bus.postMessage(nodeSubscribeMsg, (reply) => {\n        console.log('node-subscribe-response(observer): ', reply);\n        if (reply.body.code === 200) {\n\n          //FLOW-OUT: reply with provisional response\n          _this._bus.postMessage({\n            id: msg.id, type: 'response', from: msg.to, to: hypertyURL,\n            body: { code: 100, childrenResources: childrens }\n          });\n\n          //FLOW-OUT: subscribe message to remote ReporterObject -> _onRemoteSubscribe\n          let objSubscribeMsg = {\n            type: 'subscribe', from: _this._url, to: objURLSubscription,\n            body: { identity: nodeSubscribeMsg.body.identity, subscriber: hypertyURL }\n          };\n\n          //subscribe to reporter SM\n          _this._bus.postMessage(objSubscribeMsg, (reply) => {\n            console.log('reporter-subscribe-response: ', reply);\n            if (reply.body.code === 200) {\n\n              let observer = _this._observers[objURL];\n              if (!observer) {\n                observer = new ObserverObject(_this, objURL, childrens);\n                _this._observers[objURL] = observer;\n              }\n\n              //register hyperty subscription\n              observer.addSubscription(hypertyURL);\n\n              //forward to hyperty:\n              reply.id = msg.id;\n              reply.from = _this._url;\n              reply.to = hypertyURL;\n              this._bus.postMessage(reply);\n            }\n          });\n\n        } else {\n          //listener rejected\n          _this._bus.postMessage({\n            id: msg.id, type: 'response', from: msg.to, to: hypertyURL,\n            body: reply.body\n          });\n        }\n      });\n    });\n  }\n\n  //FLOW-IN: message received from local DataObjectObserver -> unsubscribe\n  _onLocalUnSubscribe(msg) {\n    let _this = this;\n\n    let hypertyURL = msg.from;\n    let objURL = msg.body.resource;\n\n    let observer = _this._observers[objURL];\n    if (observer) {\n      //TODO: is there any policy verification before delete?\n      observer.removeSubscription(hypertyURL);\n\n      //TODO: destroy object in the registry?\n      _this._bus.postMessage({\n        id: msg.id, type: 'response', from: msg.to, to: msg.from,\n        body: { code: 200 }\n      });\n\n      //TODO: remove Object if no more subscription?\n      //delete _this._observers[objURL];\n    }\n  }\n\n}\n\nexport default SyncherManager;\n"],"sourceRoot":"/source/"}