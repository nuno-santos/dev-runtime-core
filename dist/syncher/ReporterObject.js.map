{"version":3,"sources":["syncher/ReporterObject.js"],"names":["_utils","require","_Subscription","ReporterObject","parent","owner","url","_classCallCheck3","default","this","_this","_parent","_owner","_url","_bus","_domain","divideURL","domain","_objSubscriptorURL","_subscriptions","_childrens","_childrenListeners","_forwards","_allocateListeners","_subscriptionListener","addListener","msg","console","log","type","_onRemoteSubscribe","_onRemoteUnSubscribe","_onRemoteResponse","changeURL","_changeListener","remove","forEach","cl","_keys2","key","forwardUnSubscribe","_releaseListeners","addresses","nodeSubscribeMsg","from","to","body","subscribe","source","_promise2","resolve","reject","postMessage","reply","code","newForward","addForward","desc","address","nodeUnSubscribeMsg","childrens","length","childBaseURL","push","subscriptions","child","childURL","childListener","selfForward","resource","childrenResources","_reporters","id","identity","hypertyURL","subscriber","errorMsg","mode","forwardMsg","_Subscription2","subscription"],"mappings":"+iBAAAA,OAAAC,QAAA,kBA8BIC,cAAAD,QAAA,uEAgCAE,0BAzDF,QAAAA,GAAYC,EAAQC,EAAOC,IAAK,EAAAC,iBAAAC,SAAAC,KAAAN,EAC9B,IAAIO,GAAQD,IAsERC,GAAAC,QAAAP,EAnEJM,EAAME,OAASP,EACfK,EAAMG,KAAOP,EAgGTI,EAAAI,KAAAV,EACFU,KA7FFJ,EAAMK,SAAU,EAAAf,OAAAgB,WAAUX,GAAOY,OACjCP,EAAMQ,mBAAqBR,EAAMG,KAAO,gBAExCH,EAAMS,kBACNT,EAAMU,cACNV,EAAMW,sBAENX,EAAMY,aA0HAZ,EAAAa,mGAuCN,GAAMb,GAAKD,IAxJXC,GAAMc,sBAAwBd,EAAMI,KAAKW,YAAYf,EAAMQ,mBAAoB,SAACQ,GAgM1E,OAJFC,QAAOC,IAAXlB,EAEIQ,mBA7LqC,SAAUQ,GA+L7CA,EACFG,MAWM,IAAK,YACTnB,EAAQoB,mBAAsBJ,EAAM,MAzMtC,KAAK,cAAehB,EAAMqB,qBAAqBL,EAAM,MACrD,KAAK,WAAYhB,EAAMsB,kBAkOhBN,KA9NX,IAAIO,GAAYvB,EAAMG,KAAO,UAC7BH,GAAMwB,gBAAkBxB,EAAMI,KAAKW,YAAYQ,EAAW,SAACP,GAEzDC,QAAQC,IAAI,kBAAoBK,EAAY,SAAUP,iDAKxD,GAAIhB,GAAQD,IAEZC,GAAMc,sBAAsBW,SAE5BzB,EAAMwB,gBAAgBC,SAEtBzB,EAAMW,mBAAmBe,QAAQ,SAACC,GAChCA,EAAGF,YAGL,EAAAG,OAAA9B,SAAYE,EAAMY,WAAWc,QAAQ,SAACG,GACpC7B,EAAM8B,mBAAmBD,MAI3B,EAAAD,OAAA9B,SAAYE,EAAMS,gBAAgBiB,QAAQ,SAACG,GACzC7B,EAAMS,eAAeoB,GAAKE,+DASbC,GACf,GAAIhC,GAAQD,KAGRkC,GACFd,KAAM,YAAae,KAAMlC,EAAMC,QAAQE,KAAMgC,GAAI,qBAAuBnC,EAAMK,QAAU,MACxF+B,MAAQC,UAAWL,EAAWM,OAAQtC,EAAME,QAG9C,OAAO,IAAAqC,WAAAzC,QAAY,SAAC0C,EAASC,GAC3BzC,EAAMI,KAAKsC,YAAYT,EAAkB,SAACU,GAExC,GADA1B,QAAQC,IAAI,yCAA0CyB,GAC9B,MAApBA,EAAMP,KAAKQ,KAAc,CAC3B,GAAIC,GAAa7C,EAAMI,KAAK0C,WAAW9C,EAAMG,KAAMH,EAAME,OACzDF,GAAMY,UAAUoB,EAAU,IAAMa,EAChCL,QAEAC,GAAO,mCAAqCE,EAAMP,KAAKW,qDAU5CC,GACjB,GAAIhD,GAAQD,IAEZC,GAAMY,UAAUoC,GAASvB,eAClBzB,GAAMY,UAAUoC,EAGvB,IAAIC,IACF9B,KAAM,cAAee,KAAMlC,EAAMC,QAAQE,KAAMgC,GAAI,qBAAuBnC,EAAMK,QAAU,MAC1F+B,MAAQC,WAAYW,GAAUV,OAAQtC,EAAME,QAG9CF,GAAMI,KAAKsC,YAAYO,wCAQZC,GACX,GAAIlD,GAAQD,IAEZ,OAAO,IAAAwC,WAAAzC,QAAY,SAAC0C,EAASC,GAC3B,GAAyB,IAArBS,EAAUC,OAEZ,WADAX,IAIF,IAAIY,GAAepD,EAAMG,KAAO,YAChCH,GAAMU,WAAW2C,KAAKH,EAUtB,IAAII,KACJJ,GAAUxB,QAAQ,SAAC6B,GAAD,MAAWD,GAAcD,KAAKD,EAAeG,IAG/D,IAAItB,IACFd,KAAM,YAAae,KAAMlC,EAAMC,QAAQE,KAAMgC,GAAI,qBAAuBnC,EAAMK,QAAU,MACxF+B,MAAQC,UAAWiB,EAAehB,OAAQtC,EAAME,QAGlDF,GAAMI,KAAKsC,YAAYT,EAAkB,SAACU,GACxC1B,QAAQC,IAAI,sCAAuCyB,GAC3B,MAApBA,EAAMP,KAAKQ,MAGbU,EAAc5B,QAAQ,SAAC8B,GACrB,GAAIC,GAAgBzD,EAAMI,KAAKW,YAAYyC,EAAU,SAACxC,GAEpDC,QAAQC,IAAI,kBAAoBsC,EAAW,SAAUxC,IAEvDhB,GAAMW,mBAAmB0C,KAAKI,EAE9B,IAAIC,GAAc1D,EAAMI,KAAK0C,WAAWU,EAAUxD,EAAME,OACxDF,GAAMW,mBAAmB0C,KAAKK,KAGhClB,KAEAC,EAAO,mCAAqCE,EAAMP,KAAKW,2CAO7D,GAAI/C,GAAQD,KACRQ,GAAS,EAAAjB,OAAAgB,WAAUN,EAAME,QAAQK,MAGrCP,GAAMI,KAAKsC,aACTvB,KAAM,SAAUe,KAAMlC,EAAMQ,mBAAoB2B,GAAInC,EAAMG,KAAO,aAInEH,EAAMI,KAAKsC,aACTvB,KAAM,SAAUe,KAAMlC,EAAMC,QAAQE,KAAMgC,GAAI,qBAAuB5B,EAAS,6BAC9E6B,MAAQuB,SAAU3D,EAAMG,KAAMyD,kBAAmB5D,EAAMU,cAGzDV,EAAM+B,0BACC/B,GAAMC,QAAQ4D,WAAW7D,EAAMG,gDAGtBa,GAChB,GAAIhB,GAAQD,IAEZC,GAAMI,KAAKsC,aACToB,GAAI9C,EAAI8C,GAAI3C,KAAM,WAAYe,KAAMlB,EAAImB,GAAIA,GAAInC,EAAMG,KACtDiC,MAAQQ,KAAM5B,EAAIoB,KAAKQ,KAAMmB,SAAU/C,EAAIoB,KAAK2B,SAAUzB,OAAQtB,EAAIkB,mDAKvDlB,GACjB,GAAIhB,GAAQD,KACRiE,EAAahD,EAAIoB,KAAK6B,UAG1B,IAAIjE,EAAMS,eAAeuD,GAAa,CACpC,GAAIE,IACFJ,GAAI9C,EAAI8C,GAAI3C,KAAM,WAAYe,KAAMlB,EAAImB,GAAIA,GAAI6B,EAChD5B,MAAQQ,KAAM,IAAKG,KAAM,qBAAuB/C,EAAMG,KAAO,MAAS6D,EAAa,qBAIrF,YADAhE,GAAMI,KAAKsC,YAAYwB,GAMzB,GAAIC,GAAO,SAEX,IAAa,YAATA,EAAoB,CAEtB,GAAIC,IACFjD,KAAM,UAAWe,KAAMlC,EAAMG,KAAMgC,GAAInC,EAAME,OAC7CkC,MAAQjB,KAAMH,EAAIG,KAAMe,KAAM8B,EAAY7B,GAAInC,EAAMG,KAAM4D,SAAU/C,EAAIoB,KAAK2B,UAG/E/D,GAAMI,KAAKsC,YAAY0B,EAAY,SAACzB,GAClC1B,QAAQC,IAAI,kBAAmByB,GACP,MAApBA,EAAMP,KAAKQ,OACb5C,EAAMS,eAAeuD,GAAc,GAAAK,gBAAAvE,QAAiBE,EAAMI,KAAMJ,EAAME,OAAQF,EAAMG,KAAMH,EAAMU,aAAY,KAI9GV,EAAMI,KAAKsC,aACToB,GAAI9C,EAAI8C,GAAI3C,KAAM,WAAYe,KAAMlB,EAAImB,GAAIA,GAAInB,EAAIkB,KACpDE,KAAMO,EAAMP,uDASCpB,GACnB,GAAIhB,GAAQD,KACRiE,EAAahD,EAAIoB,KAAK6B,WAEtBK,EAAetE,EAAMS,eAAeuD,EACpCM,KACFA,EAAavC,0BACN/B,GAAMS,eAAeuD,6BASnBvE","file":"syncher/ReporterObject.js","sourcesContent":["import { divideURL } from '../utils/utils';\nimport Subscription from './Subscription';\n\nclass ReporterObject {\n\n  constructor(parent, owner, url) {\n    let _this = this;\n\n    _this._parent = parent;\n    _this._owner = owner;\n    _this._url = url;\n\n    _this._bus = parent._bus;\n\n    _this._domain = divideURL(owner).domain;\n    _this._objSubscriptorURL = _this._url + '/subscription';\n\n    _this._subscriptions = {};\n    _this._childrens = [];\n    _this._childrenListeners = [];\n\n    _this._forwards = {};\n\n    _this._allocateListeners();\n  }\n\n  _allocateListeners() {\n    let _this = this;\n\n    //add subscription listener...\n    _this._subscriptionListener = _this._bus.addListener(_this._objSubscriptorURL, (msg) => {\n      console.log(_this._objSubscriptorURL + '-RCV: ', msg);\n      switch (msg.type) {\n        case 'subscribe': _this._onRemoteSubscribe(msg); break;\n        case 'unsubscribe': _this._onRemoteUnSubscribe(msg); break;\n        case 'response': _this._onRemoteResponse(msg); break;\n      }\n    });\n\n    let changeURL = _this._url + '/changes';\n    _this._changeListener = _this._bus.addListener(changeURL, (msg) => {\n      //TODO: what todo here? Save changes?\n      console.log('SyncherManager-' + changeURL + '-RCV: ', msg);\n    });\n  }\n\n  _releaseListeners() {\n    let _this = this;\n\n    _this._subscriptionListener.remove();\n\n    _this._changeListener.remove();\n\n    _this._childrenListeners.forEach((cl) => {\n      cl.remove();\n    });\n\n    Object.keys(_this._forwards).forEach((key) => {\n      _this.forwardUnSubscribe(key);\n    });\n\n    //remove all subscriptions\n    Object.keys(_this._subscriptions).forEach((key) => {\n      _this._subscriptions[key]._releaseListeners();\n    });\n  }\n\n  /**\n   * Register a listener in the msg-node and in the local MessageBus, so that messages on this address are forwarded to the reporter object\n   * @param  {string} address - URL to register the listeners\n   * @return {Promise} Return Promise OK or error\n   */\n  forwardSubscribe(addresses) {\n    let _this = this;\n\n    //FLOW-OUT: message sent to the msg-node SubscriptionManager component\n    let nodeSubscribeMsg = {\n      type: 'subscribe', from: _this._parent._url, to: 'domain://msg-node.' + _this._domain + '/sm',\n      body: { subscribe: addresses, source: _this._owner }\n    };\n\n    return new Promise((resolve, reject) => {\n      _this._bus.postMessage(nodeSubscribeMsg, (reply) => {\n        console.log('forward-subscribe-response(reporter): ', reply);\n        if (reply.body.code === 200) {\n          let newForward = _this._bus.addForward(_this._url, _this._owner);\n          _this._forwards[addresses[0]] = newForward;\n          resolve();\n        } else {\n          reject('Error on msg-node subscription: ' + reply.body.desc);\n        }\n      });\n    });\n  }\n\n  /**\n   * UnRegister a listener in the msg-node and in the local MessageBus, so that messages on this address are removed from forward\n   * @param  {string} address - URL to un-register the listeners\n   */\n  forwardUnSubscribe(address) {\n    let _this = this;\n\n    _this._forwards[address].remove();\n    delete _this._forwards[address];\n\n    //FLOW-OUT: message sent to the msg-node SubscriptionManager component\n    let nodeUnSubscribeMsg = {\n      type: 'unsubscribe', from: _this._parent._url, to: 'domain://msg-node.' + _this._domain + '/sm',\n      body: { subscribe: [address], source: _this._owner }\n    };\n\n    _this._bus.postMessage(nodeUnSubscribeMsg);\n  }\n\n  /**\n   * Register listeners for a list of childrens. Public channels used to transmit messages.\n   * @param  {string[]} childrens - channels to register\n   * @return {Promise} Return Promise OK or error\n   */\n  addChildrens(childrens) {\n    let _this = this;\n\n    return new Promise((resolve, reject) => {\n      if (childrens.length === 0) {\n        resolve();\n        return;\n      }\n\n      let childBaseURL = _this._url + '/children/';\n      _this._childrens.push(childrens);\n\n      /*\n      _this._childrens.forEach((child) => {\n        let childId = childBaseURL + child;\n\n        let selfForward = _this._bus.addForward(childId, owner);\n        _this._childrenListeners.push(selfForward);\n      });*/\n\n      let subscriptions = [];\n      childrens.forEach((child) => subscriptions.push(childBaseURL + child));\n\n      //FLOW-OUT: message sent to the msg-node SubscriptionManager component\n      let nodeSubscribeMsg = {\n        type: 'subscribe', from: _this._parent._url, to: 'domain://msg-node.' + _this._domain + '/sm',\n        body: { subscribe: subscriptions, source: _this._owner }\n      };\n\n      _this._bus.postMessage(nodeSubscribeMsg, (reply) => {\n        console.log('node-subscribe-response(reporter): ', reply);\n        if (reply.body.code === 200) {\n\n          //add children listeners on local ...\n          subscriptions.forEach((childURL) => {\n            let childListener = _this._bus.addListener(childURL, (msg) => {\n              //TODO: what todo here? Save childrens?\n              console.log('SyncherManager-' + childURL + '-RCV: ', msg);\n            });\n            _this._childrenListeners.push(childListener);\n\n            let selfForward = _this._bus.addForward(childURL, _this._owner);\n            _this._childrenListeners.push(selfForward);\n          });\n\n          resolve();\n        } else {\n          reject('Error on msg-node subscription: ' + reply.body.desc);\n        }\n      });\n    });\n  }\n\n  delete() {\n    let _this = this;\n    let domain = divideURL(_this._owner).domain;\n\n    //FLOW-OUT: message sent directly to all subscribers of the reporter\n    _this._bus.postMessage({\n      type: 'delete', from: _this._objSubscriptorURL, to: _this._url + '/changes'\n    });\n\n    //FLOW-OUT: message sent to the msg-node ObjectAllocationManager component\n    _this._bus.postMessage({\n      type: 'delete', from: _this._parent._url, to: 'domain://msg-node.' + domain + '/object-address-allocation',\n      body: { resource: _this._url, childrenResources: _this._childrens }\n    });\n\n    _this._releaseListeners();\n    delete _this._parent._reporters[_this._url];\n  }\n\n  _onRemoteResponse(msg) {\n    let _this = this;\n\n    _this._bus.postMessage({\n      id: msg.id, type: 'response', from: msg.to, to: _this._url,\n      body: { code: msg.body.code, identity: msg.body.identity, source: msg.from }\n    });\n  }\n\n  //FLOW-IN: message received from Syncher -> subscribe\n  _onRemoteSubscribe(msg) {\n    let _this = this;\n    let hypertyURL = msg.body.subscriber;\n\n    //validate if subscription already exists?\n    if (_this._subscriptions[hypertyURL]) {\n      let errorMsg = {\n        id: msg.id, type: 'response', from: msg.to, to: hypertyURL,\n        body: { code: 500, desc: 'Subscription for (' + _this._url + ' : ' +  hypertyURL + ') already exists!' }\n      };\n\n      _this._bus.postMessage(errorMsg);\n      return;\n    }\n\n    //ask to subscribe to Syncher? (depends on the operation mode)\n    //TODO: get mode from object!\n    let mode = 'sub/pub';\n\n    if (mode === 'sub/pub') {\n      //FLOW-OUT: message sent to local hyperty address Syncher -> _onForward\n      let forwardMsg = {\n        type: 'forward', from: _this._url, to: _this._owner,\n        body: { type: msg.type, from: hypertyURL, to: _this._url, identity: msg.body.identity }\n      };\n\n      _this._bus.postMessage(forwardMsg, (reply) => {\n        console.log('forward-reply: ', reply);\n        if (reply.body.code === 200) {\n          _this._subscriptions[hypertyURL] = new Subscription(_this._bus, _this._owner, _this._url, _this._childrens, true);\n        }\n\n        //FLOW-OUT: subscription response sent (forward from internal Hyperty)\n        _this._bus.postMessage({\n          id: msg.id, type: 'response', from: msg.to, to: msg.from,\n          body: reply.body\n        });\n\n      });\n    }\n\n  }\n\n  //FLOW-IN: message received from remote ObserverObject -> removeSubscription\n  _onRemoteUnSubscribe(msg) {\n    let _this = this;\n    let hypertyURL = msg.body.subscriber;\n\n    let subscription = _this._subscriptions[hypertyURL];\n    if (subscription) {\n      subscription._releaseListeners();\n      delete _this._subscriptions[hypertyURL];\n\n      //TODO: send un-subscribe message to Syncher? (depends on the operation mode)\n    }\n\n  }\n\n}\n\nexport default ReporterObject;\n"],"sourceRoot":"/source/"}