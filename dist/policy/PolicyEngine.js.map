{"version":3,"sources":["policy/PolicyEngine.js"],"names":["_PEP","require","_PDP","_UserPolicy","PolicyEngine","context","_classCallCheck3","default","this","policyEngine","loadActivePolicy","loadGroups","loadSPPolicies","loadUserPolicies","pdp","_PDP2","pep","_PEP2","source","key","policy","serviceProviderPolicies","savePolicies","Error","_UserPolicy2","userPolicies","activeUserPolicy","undefined","saveActivePolicy","rule","scope","target","condition","message","_this","authorise","myGroups","groups","groupsNames","groupName","push","members","saveGroups","userEmail","indexOf","group","splice"],"mappings":"0XAAAA,KAAAC,QAAA,4CACAC,KAAAD,QAAA,4CACAE,YAAAF,QAAA,0EAEMG,wBAEJ,QAAAA,GAAYC,IAAS,EAAAC,iBAAAC,SAAAC,KAAAJ,GACnBI,KAAKH,QAAUA,EACfA,EAAQI,aAAeD,KACvBH,EAAQK,mBACRL,EAAQM,aACRN,EAAQO,iBACRP,EAAQQ,mBACRL,KAAKM,IAAM,GAAAC,OAAAR,QAAQF,GACnBG,KAAKQ,IAAM,GAAAC,OAAAV,QAAQF,sEAGXa,EAAQC,EAAKC,GACrB,GAAe,qBAAXF,EACFV,KAAKH,QAAQgB,wBAAwBF,GAAOC,EAC5CZ,KAAKH,QAAQiB,aAAaJ,OACrB,CACL,GAAe,SAAXA,EAOF,KAAMK,OAAM,0BAA4BL,EANnCE,KACHA,EAAS,GAAAI,cAAAjB,QAAeY,UAE1BX,KAAKH,QAAQoB,aAAaN,GAAOC,EACjCZ,KAAKH,QAAQiB,aAAaJ,yCAOnBA,EAAQC,GACnB,GAAe,MAAXD,EACFV,KAAKH,QAAQgB,2BACbb,KAAKH,QAAQoB,gBACbjB,KAAKH,QAAQqB,iBAAmBC,WAEhC,IAAe,qBAAXT,QACKV,MAAKH,QAAQgB,wBAAwBF,OACvC,CACL,GAAe,SAAXD,EAMF,KAAMK,OAAM,0BAA4BL,SALjCV,MAAKH,QAAQoB,aAAaN,GAC7BA,IAAQX,KAAKH,QAAQqB,mBACvBlB,KAAKH,QAAQqB,iBAAmBC,QAQxCnB,KAAKH,QAAQiB,aAAa,QAC1Bd,KAAKH,QAAQiB,aAAa,oBAC1Bd,KAAKH,QAAQuB,sDAGJT,EAAKU,SACPrB,MAAKH,QAAQoB,aAAaN,GAAKU,EAAKC,OAAOD,EAAKE,QAAQF,EAAKG,6CAG5DC,GACR,GAAIC,GAAQ1B,IACZ,OAAO0B,GAAM7B,QAAQ8B,UAAUF,4CAI/B,GAAIG,GAAW5B,KAAKH,QAAQgC,OACxBC,IACJ,IAAiBX,SAAbS,EACF,IAAK,GAAIG,KAAaH,GACpBE,EAAYE,KAAKD,EAGrB,OAAOD,oCAGAC,GACP,GAAIH,GAAW5B,KAAKH,QAAQgC,OACxBI,IAMJ,OAJ4Bd,UAAxBS,EAASG,KACXE,EAAUL,EAASG,IAGdE,sCAOGF,GACV/B,KAAKH,QAAQgC,OAAOE,MACpB/B,KAAKH,QAAQqC,iDAGHH,SACH/B,MAAKH,QAAQgC,OAAOE,GAC3B/B,KAAKH,QAAQqC,gDAQJH,EAAWI,GACpB,GAAIP,GAAW5B,KAAKH,QAAQgC,MAC5B,IAA4BV,SAAxBS,EAASG,GAMX,KAAMhB,OAAM,UAAYgB,EAAY,oBALhCH,GAASG,GAAWK,QAAQD,MAAe,IAC7CP,EAASG,GAAWC,KAAKG,GACzBnC,KAAKH,QAAQqC,sDAOHH,EAAWI,GACzB,GAAIE,GAAQrC,KAAKH,QAAQgC,OAAOE,EAEhCM,GAAMC,OAAOD,EAAMD,QAAQD,GAAY,GACvCnC,KAAKH,QAAQqC,sCAKFtC","file":"policy/PolicyEngine.js","sourcesContent":["import PEP from './PEP';\nimport PDP from './PDP';\nimport UserPolicy from './policies/UserPolicy';\n\nclass PolicyEngine {\n\n  constructor(context) {\n    this.context = context;\n    context.policyEngine = this;\n    context.loadActivePolicy();\n    context.loadGroups();\n    context.loadSPPolicies();\n    context.loadUserPolicies();\n    this.pdp = new PDP(context);\n    this.pep = new PEP(context);\n  }\n\n  addPolicy(source, key, policy) {\n    if (source === 'SERVICE_PROVIDER') {\n      this.context.serviceProviderPolicies[key] = policy;\n      this.context.savePolicies(source);\n    } else {\n      if (source === 'USER') {\n        if (!policy) {\n          policy = new UserPolicy(key, [], []);\n        }\n        this.context.userPolicies[key] = policy;\n        this.context.savePolicies(source);\n      } else {\n        throw Error('Unknown policy source: ' + source);\n      }\n    }\n  }\n\n  removePolicy(source, key) {\n    if (source === '*') {\n      this.context.serviceProviderPolicies = {};\n      this.context.userPolicies = {};\n      this.context.activeUserPolicy = undefined;\n    } else {\n      if (source === 'SERVICE_PROVIDER') {\n        delete this.context.serviceProviderPolicies[key];\n      } else {\n        if (source === 'USER') {\n          delete this.context.userPolicies[key];\n          if (key === this.context.activeUserPolicy) {\n            this.context.activeUserPolicy = undefined;\n          }\n        } else {\n          throw Error('Unknown policy source: ' + source);\n        }\n      }\n    }\n\n    this.context.savePolicies('USER');\n    this.context.savePolicies('SERVICE_PROVIDER');\n    this.context.saveActivePolicy();\n  }\n\n  removeRule(key, rule) {\n    delete this.context.userPolicies[key][rule.scope][rule.target][rule.condition];\n  }\n\n  authorise(message) {\n    let _this = this;\n    return _this.context.authorise(message);\n  }\n\n  getGroupsNames() {\n    let myGroups = this.context.groups;\n    let groupsNames = [];\n    if (myGroups !== undefined) {\n      for (let groupName in myGroups) {\n        groupsNames.push(groupName);\n      }\n    }\n    return groupsNames;\n  }\n\n  getGroup(groupName) {\n    let myGroups = this.context.groups;\n    let members = [];\n\n    if (myGroups[groupName] !== undefined) {\n      members = myGroups[groupName];\n    }\n\n    return members;\n  }\n\n  /**\n  * Creates a group with the given name.\n  * @param  {String}  groupName\n  */\n  createGroup(groupName) {\n    this.context.groups[groupName] = [];\n    this.context.saveGroups();\n  }\n\n  deleteGroup(groupName) {\n    delete this.context.groups[groupName];\n    this.context.saveGroups();\n  }\n\n  /**\n  * Adds the given user email to the group with the given name.\n  * @param  {String}  userEmail\n  * @param  {String}  groupName\n  */\n  addToGroup(groupName, userEmail) {\n    let myGroups = this.context.groups;\n    if (myGroups[groupName] !== undefined) {\n      if (myGroups[groupName].indexOf(userEmail) === -1) {\n        myGroups[groupName].push(userEmail);\n        this.context.saveGroups();\n      }\n    } else {\n      throw Error('Group \"' + groupName + '\" does not exist!');\n    }\n  }\n\n  removeFromGroup(groupName, userEmail) {\n    let group = this.context.groups[groupName];\n\n    group.splice(group.indexOf(userEmail), 1);\n    this.context.saveGroups();\n  }\n\n}\n\nexport default PolicyEngine;\n"],"sourceRoot":"/source/"}