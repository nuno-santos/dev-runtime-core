{"version":3,"sources":["policy/Rule.js"],"names":["_utils","require","_Operators","Rule","authorise","condition","priority","scope","target","_classCallCheck3","default","this","operators","_Operators2","context","message","hypertyName","isDataObjectURL","from","reporter","runtimeRegistry","getReporterURLSynchonous","removePathFromURL","undefined","getHypertyName","split","to","_reporter","owner","_reporter2","getHypertyOwner","getUserEmailFromURL","_reporter3","isApplicable"],"mappings":"0XAAAA,OAAAC,QAAA,kBACAC,WAAAD,QAAA,8DAEME,gBAEJ,QAAAA,GAAYC,EAAWC,EAAWC,EAAUC,EAAOC,IAAQ,EAAAC,iBAAAC,SAAAC,KAAAR,GACzDQ,KAAKC,UAAY,GAAAC,aAAAH,QACjBC,KAAKP,UAAYA,EACjBO,KAAKN,UAAYA,EACjBM,KAAKL,SAAWA,EAChBK,KAAKJ,MAAQA,EACbI,KAAKH,OAASA,oEAGPM,EAASC,GAChB,GAAIC,GAAA,MACJ,QAAQL,KAAKJ,OACX,IAAK,SACH,KAEF,KAAK,UACH,IAAI,EAAAP,OAAAiB,iBAAgBF,EAAQG,MAAO,CACjC,GAAIC,GAAWL,EAAQM,gBAAgBC,0BAAyB,EAAArB,OAAAsB,mBAAkBP,EAAQG,MACzEK,UAAbJ,IACFH,EAAcF,EAAQM,gBAAgBI,eAAeL,QAGlB,YAAjCJ,EAAQG,KAAKO,MAAM,OAAO,KAC5BT,EAAcF,EAAQM,gBAAgBI,gBAAe,EAAAxB,OAAAsB,mBAAkBP,EAAQG,OAGnF,IAAIF,IAAgBL,KAAKH,OACvB,KAGF,KAAI,EAAAR,OAAAiB,iBAAgBF,EAAQW,IAAK,CAC/B,GAAIC,GAAWb,EAAQM,gBAAgBC,0BAAyB,EAAArB,OAAAsB,mBAAkBP,EAAQW,IACzEH,UAAbI,IACFX,EAAcF,EAAQM,gBAAgBI,eAAeG,QAGpB,YAA/BZ,EAAQW,GAAGD,MAAM,OAAO,KAC1BT,EAAcF,EAAQM,gBAAgBI,gBAAe,EAAAxB,OAAAsB,mBAAkBP,EAAQW,KAGnF,IAAIV,IAAgBL,KAAKH,OACvB,KAGF,OAAO,gBAET,KAAK,OACH,GAAIoB,GAAA,MAEJ,KAAI,EAAA5B,OAAAiB,iBAAgBF,EAAQG,MAAO,CACjC,GAAIW,GAAWf,EAAQM,gBAAgBC,0BAAyB,EAAArB,OAAAsB,mBAAkBP,EAAQG,MAC1FU,GAAQd,EAAQM,gBAAgBU,gBAAgBD,OAEX,YAAjCd,EAAQG,KAAKO,MAAM,OAAO,KAC5BG,EAAQd,EAAQM,gBAAgBU,iBAAgB,EAAA9B,OAAAsB,mBAAkBP,EAAQG,OAM9E,IAHcK,SAAVK,IACFA,GAAQ,EAAA5B,OAAA+B,qBAAoBH,IAE1BA,IAAUjB,KAAKH,OACjB,KAGF,KAAI,EAAAR,OAAAiB,iBAAgBF,EAAQW,IAAK,CAC/B,GAAIM,GAAWlB,EAAQM,gBAAgBC,0BAAyB,EAAArB,OAAAsB,mBAAkBP,EAAQW,IAC1FE,GAAQd,EAAQM,gBAAgBU,gBAAgBE,GAClCT,SAAVK,IACFA,GAAQ,EAAA5B,OAAA+B,qBAAoBH,QAGK,YAA/Bb,EAAQW,GAAGD,MAAM,OAAO,KAC1BG,EAAQd,EAAQM,gBAAgBU,iBAAgB,EAAA9B,OAAAsB,mBAAkBP,EAAQW,KAC5DH,SAAVK,IACFA,GAAQ,EAAA5B,OAAA+B,qBAAoBH,IAIlC,IAAIA,IAAUjB,KAAKH,OACjB,KAGF,OAAO,iBAEX,MAAIG,MAAKN,UAAU4B,aAAanB,EAASC,EAASJ,KAAKJ,MAAOI,KAAKH,QAC1DG,KAAKP,UAEL,0CAKED","file":"policy/Rule.js","sourcesContent":["import {getUserEmailFromURL, isDataObjectURL, removePathFromURL} from '../utils/utils';\nimport Operators from './Operators';\n\nclass Rule {\n\n  constructor(authorise, condition, priority, scope, target) {\n    this.operators = new Operators();\n    this.authorise = authorise;\n    this.condition = condition;\n    this.priority = priority;\n    this.scope = scope;\n    this.target = target;\n  }\n\n  evaluate(context, message) {\n    let hypertyName;\n    switch (this.scope) {\n      case 'global':\n        break;\n\n      case 'hyperty':\n        if (isDataObjectURL(message.from)) {\n          let reporter = context.runtimeRegistry.getReporterURLSynchonous(removePathFromURL(message.from));\n          if (reporter !== undefined) {\n            hypertyName = context.runtimeRegistry.getHypertyName(reporter);\n          }\n        } else {\n          if (message.from.split('://')[0] === 'hyperty') {\n            hypertyName = context.runtimeRegistry.getHypertyName(removePathFromURL(message.from));\n          }\n        }\n        if (hypertyName === this.target) {\n          break;\n        }\n\n        if (isDataObjectURL(message.to)) {\n          let reporter = context.runtimeRegistry.getReporterURLSynchonous(removePathFromURL(message.to));\n          if (reporter !== undefined) {\n            hypertyName = context.runtimeRegistry.getHypertyName(reporter);\n          }\n        } else {\n          if (message.to.split('://')[0] === 'hyperty') {\n            hypertyName = context.runtimeRegistry.getHypertyName(removePathFromURL(message.to));\n          }\n        }\n        if (hypertyName === this.target) {\n          break;\n        }\n\n        return 'Not Applicable';\n\n      case 'user':\n        let owner;\n\n        if (isDataObjectURL(message.from)) {\n          let reporter = context.runtimeRegistry.getReporterURLSynchonous(removePathFromURL(message.from));\n          owner = context.runtimeRegistry.getHypertyOwner(reporter);\n        } else {\n          if (message.from.split('://')[0] === 'hyperty') {\n            owner = context.runtimeRegistry.getHypertyOwner(removePathFromURL(message.from));\n          }\n        }\n        if (owner !== undefined) {\n          owner = getUserEmailFromURL(owner);\n        }\n        if (owner === this.target) {\n          break;\n        }\n\n        if (isDataObjectURL(message.to)) {\n          let reporter = context.runtimeRegistry.getReporterURLSynchonous(removePathFromURL(message.to));\n          owner = context.runtimeRegistry.getHypertyOwner(reporter);\n          if (owner !== undefined) {\n            owner = getUserEmailFromURL(owner);\n          }\n        } else {\n          if (message.to.split('://')[0] === 'hyperty') {\n            owner = context.runtimeRegistry.getHypertyOwner(removePathFromURL(message.to));\n            if (owner !== undefined) {\n              owner = getUserEmailFromURL(owner);\n            }\n          }\n        }\n        if (owner === this.target) {\n          break;\n        }\n\n        return 'Not Applicable';\n    }\n    if (this.condition.isApplicable(context, message, this.scope, this.target)) {\n      return this.authorise;\n    } else {\n      return 'Not Applicable';\n    }\n  }\n}\n\nexport default Rule;\n"],"sourceRoot":"/source/"}