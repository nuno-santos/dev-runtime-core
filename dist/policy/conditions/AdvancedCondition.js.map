{"version":3,"sources":["policy/conditions/AdvancedCondition.js"],"names":["_Condition","require","_Operators","_SubscriptionCondition","AdvancedCondition","condition","_classCallCheck3","default","this","operators","_Operators2","context","message","scope","target","operator","left","right","_Condition2","_SubscriptionCondition2","isApplicable","undefined","resultLeft","resultRight"],"mappings":"0XAAAA,WAAAC,QAAA,8DACAC,WAAAD,QAAA,+DACAE,uBAAAF,QAAA,kGAEMG,6BAEJ,QAAAA,GAAYC,IAAW,EAAAC,iBAAAC,SAAAC,KAAAJ,GACrBI,KAAKC,UAAY,GAAAC,aAAAH,QACjBC,KAAKH,UAAYA,wEAGNM,EAASC,EAASC,EAAOC,EAAQC,EAAUC,EAAMC,GAO5D,IANKF,IACHA,EAAWP,KAAKH,UAAU,GAC1BW,EAAOR,KAAKH,UAAU,GACtBY,EAAQT,KAAKH,UAAU,MAGhBW,YAAAE,aAAAX,WAA+BS,YAAAG,yBAAAZ,SAA0D,iBAATS,IACvFA,EAAOR,KAAKY,aAAaT,EAASC,EAASC,EAAOC,EAAQE,EAAK,GAAIA,EAAK,GAAIA,EAAK,GAEnF,IAAcK,SAAVJ,EACF,OAASA,YAAAC,aAAAX,WAAgCU,YAAAE,yBAAAZ,SAA4D,iBAAVU,IACzFA,EAAQT,KAAKY,aAAaT,EAASC,EAASC,EAAOC,EAAQG,EAAM,GAAIA,EAAM,GAAIA,EAAM,GAIzF,IAAIK,GAA8B,iBAATN,GAAsBA,EAAOA,EAAKI,aAAaT,EAASC,EAASC,EAAOC,GAC7FS,EAAA,MAIJ,OAHcF,UAAVJ,IACFM,EAAgC,iBAAVN,GAAuBA,EAAQA,EAAMG,aAAaT,EAASC,EAASC,EAAOC,IAE5FN,KAAKC,UAAUM,IAAWO,EAAYC,6BAKlCnB","file":"policy/conditions/AdvancedCondition.js","sourcesContent":["import Condition from './Condition';\nimport Operators from '../Operators';\nimport SubscriptionCondition from './SubscriptionCondition';\n\nclass AdvancedCondition {\n\n  constructor(condition) {\n    this.operators = new Operators();\n    this.condition = condition;\n  }\n\n  isApplicable(context, message, scope, target, operator, left, right) {\n    if (!operator) {\n      operator = this.condition[0];\n      left = this.condition[1];\n      right = this.condition[2];\n    }\n\n    while (!(left instanceof Condition) & !(left instanceof SubscriptionCondition) & (typeof left !== 'boolean')) {\n      left = this.isApplicable(context, message, scope, target, left[0], left[1], left[2]);\n    }\n    if (right !== undefined) {\n      while (!(right instanceof Condition) & !(right instanceof SubscriptionCondition) & (typeof right !== 'boolean')) {\n        right = this.isApplicable(context, message, scope, target, right[0], right[1], right[2]);\n      }\n    }\n\n    let resultLeft = (typeof left === 'boolean') ? left : left.isApplicable(context, message, scope, target);\n    let resultRight;\n    if (right !== undefined) {\n      resultRight = (typeof right === 'boolean') ? right : right.isApplicable(context, message, scope, target);\n    }\n    return this.operators[operator]([resultLeft, resultRight]);\n  }\n\n}\n\nexport default AdvancedCondition;\n"],"sourceRoot":"/source/"}