{"version":3,"sources":["policy/conditions/SubscriptionCondition.js"],"names":["_Condition2","require","SubscriptionCondition","attribute","operator","params","_classCallCheck3","default","this","_possibleConstructorReturn3","_getPrototypeOf2","call","context","message","scope","target","isSubscription","type","isFromRemoteSM","from","_get3","prototype"],"mappings":"q1BAAAA,YAAAC,QAAA,+DAEMC,kCAEJ,QAAAA,GAAYC,EAAWC,EAAUC,GAAQ,OAAA,EAAAC,iBAAAC,SAAAC,KAAAN,IAAA,EAAAO,4BAAAF,SAAAC,MAAA,EAAAE,iBAAAH,SAAAL,GAAAS,KAAAH,KACjCL,EAAWC,EAAUC,sGAGhBO,EAASC,EAASC,EAAOC,GACpC,GAAIC,GAAkC,cAAjBH,EAAQI,KACzBC,EAAiBN,EAAQM,eAAeL,EAAQM,KACpD,UAAIH,EAAiBE,KACnB,EAAAE,MAAAb,UAAA,EAAAG,iBAAAH,SAAAL,EAAAmB,WAAA,eAAAb,MAAAG,KAAAH,KAA0BI,EAASC,+CAO1BX","file":"policy/conditions/SubscriptionCondition.js","sourcesContent":["import Condition from './Condition';\n\nclass SubscriptionCondition extends Condition {\n\n  constructor(attribute, operator, params) {\n    super(attribute, operator, params);\n  }\n\n  isApplicable(context, message, scope, target) {\n    let isSubscription = message.type === 'subscribe';\n    let isFromRemoteSM = context.isFromRemoteSM(message.from);\n    if (isSubscription & isFromRemoteSM) {\n      return super.isApplicable(context, message);\n    } else {\n      return false;\n    }\n  }\n}\n\nexport default SubscriptionCondition;\n"],"sourceRoot":"/source/"}