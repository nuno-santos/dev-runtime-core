{"version":3,"sources":["policy/Policy.js"],"names":["_DenyOverrides","require","_FirstApplicable","Policy","key","rules","actions","combiningAlgorithm","_classCallCheck3","default","this","context","message","authDecision","i","results","push","evaluate","_combiningAlgorithm","_DenyOverrides2","Error","_FirstApplicable2"],"mappings":"0XAAAA,eAAAC,QAAA,8FACAC,iBAAAD,QAAA,oGAEME,kBAEJ,QAAAA,GAAYC,EAAKC,EAAOC,EAASC,IAAoB,EAAAC,iBAAAC,SAAAC,KAAAP,GACnDO,KAAKJ,QAAUA,EACfI,KAAKN,IAAMA,EACXM,KAAKL,MAAQA,EACbK,KAAKH,mBAAqBA,0EAmBbI,EAASC,EAASC,GAC/B,IAAK,GAAIC,KAAKJ,MAAKJ,QACjBK,EAAQD,KAAKJ,QAAQQ,IAAIF,EAASC,oCAI7BF,EAASC,GAChB,GAAIG,KAEJ,KAAK,GAAID,KAAKJ,MAAKL,MACjBU,EAAQC,KAAKN,KAAKL,MAAMS,GAAGG,SAASN,EAASC,GAG/C,OAAOF,MAAKH,mBAAmBU,SAASF,8CA5BxC,MAAOL,MAAKQ,kCAGSX,GACrB,GAA2B,kBAAvBA,EACFG,KAAKQ,oBAAsB,GAAAC,iBAAAV,YACtB,CACL,GAA2B,oBAAvBF,EAGF,KAAMa,OAAM,sBAAwBb,EAFpCG,MAAKQ,oBAAsB,GAAAG,mBAAAZ,kCAyBpBN","file":"policy/Policy.js","sourcesContent":["import DenyOverrides from './combiningAlgorithms/DenyOverrides';\nimport FirstApplicable from './combiningAlgorithms/FirstApplicable';\n\nclass Policy {\n\n  constructor(key, rules, actions, combiningAlgorithm) {\n    this.actions = actions;\n    this.key = key;\n    this.rules = rules;\n    this.combiningAlgorithm = combiningAlgorithm;\n  }\n\n  get combiningAlgorithm() {\n    return this._combiningAlgorithm;\n  }\n\n  set combiningAlgorithm(combiningAlgorithm) {\n    if (combiningAlgorithm === 'denyOverrides') {\n      this._combiningAlgorithm = new DenyOverrides();\n    } else {\n      if (combiningAlgorithm === 'firstApplicable') {\n        this._combiningAlgorithm = new FirstApplicable();\n      } else {\n        throw Error('Unknown algorithm: ' + combiningAlgorithm);\n      }\n    }\n  }\n\n  enforceActions(context, message, authDecision) {\n    for (let i in this.actions) {\n      context[this.actions[i]](message, authDecision);\n    }\n  }\n\n  evaluate(context, message) {\n    let results = [];\n\n    for (let i in this.rules) {\n      results.push(this.rules[i].evaluate(context, message));\n    }\n    \n    return this.combiningAlgorithm.evaluate(results);\n  }\n\n}\n\nexport default Policy;\n"],"sourceRoot":"/source/"}