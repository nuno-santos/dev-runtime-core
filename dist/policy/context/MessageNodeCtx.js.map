{"version":3,"sources":["policy/context/MessageNodeCtx.js"],"names":["_CommonCtx2","require","MessageNodeCtx","_classCallCheck3","default","this","_this2","_possibleConstructorReturn3","_getPrototypeOf2","call","serviceProviderPolicies","message","console","log","_this","result","isToVerify","_isToVerify","policies","serviceProviderPolicy","getServiceProviderPolicy","policyEngine","pdp","applyPolicies","defaultBehavior","policy","_keys2","length","i"],"mappings":"81BAAAA,YAAAC,QAAA,+DAEMC,2BAEJ,QAAAA,MAAc,EAAAC,iBAAAC,SAAAC,KAAAH,EAAA,IAAAI,IAAA,EAAAC,4BAAAH,SAAAC,MAAA,EAAAG,iBAAAJ,SAAAF,GAAAO,KAAAJ,MAAA,OAEZC,GAAKI,2BAFOJ,iGAKJK,GACRC,QAAQC,IAAI,yBACZD,QAAQC,IAAIF,EACZ,IAAIG,GAAQT,KACRU,EAAA,OAEAC,EAAaF,EAAMG,YAAYN,EACnC,IAAIK,EAAY,CACd,GAAIE,IACFC,sBAAuBL,EAAMM,yBAAyBT,GAMxD,OAJAI,GAASD,EAAMO,aAAaC,IAAIC,cAAcZ,EAASO,GACxC,mBAAXH,IACFA,EAASD,EAAMU,mBAEbT,EAOJ,MADAA,GAASD,EAAMU,kBACXT,6NAiBN,GAAIU,GAAA,MAEJ,IAAyD,KAArD,EAAAC,OAAAtB,SAAYC,KAAKK,yBAAyBiB,OAC5C,IAAK,GAAIC,KAAKvB,MAAKK,wBACjBe,EAASpB,KAAKK,wBAAwBkB,EAI1C,OAAOH,yCAIP,OAAO,kIAQIvB","file":"policy/context/MessageNodeCtx.js","sourcesContent":["import CommonCtx from './CommonCtx';\n\nclass MessageNodeCtx extends CommonCtx {\n\n  constructor() {\n    super();\n    this.serviceProviderPolicies = {}; //TODO: how to load them?\n  }\n\n  authorise(message) {\n    console.log('--- Policy Engine ---');\n    console.log(message);\n    let _this = this;\n    let result;\n\n    let isToVerify = _this._isToVerify(message);\n    if (isToVerify) {\n      let policies = {\n        serviceProviderPolicy: _this.getServiceProviderPolicy(message)\n      };\n      result = _this.policyEngine.pdp.applyPolicies(message, policies);\n      if (result === 'Not Applicable') {\n        result = _this.defaultBehavior;\n      }\n      if (result) {\n        return true;\n      } else {\n        return false;\n      }\n    } else {\n      result = _this.defaultBehavior;\n      if (result) {\n        return true;\n      } else {\n        return false;\n      }\n    }\n  }\n\n  loadActivePolicy() { }\n\n  loadGroups() { }\n\n  loadSPPolicies() { }\n\n  loadUserPolicies() { }\n\n  getServiceProviderPolicy() {\n    let policy;\n\n    if (Object.keys(this.serviceProviderPolicies).length !== 0) {\n      for (let i in this.serviceProviderPolicies) {\n        policy = this.serviceProviderPolicies[i];\n      }\n    }\n\n    return policy;\n  }\n\n  _isToVerify() {\n    return true;\n  }\n\n  saveActivePolicy() {}\n\n  savePolicies() {}\n}\n\nexport default MessageNodeCtx;\n"],"sourceRoot":"/source/"}