{"version":3,"sources":["policy/PDP.js"],"names":["_Operators","require","_RuntimeCoreCtx","PDP","context","_classCallCheck3","default","this","operators","_Operators2","message","policies","result","evaluateSPPolicy","serviceProviderPolicy","_RuntimeCoreCtx2","evaluateUserPolicy","userPolicy","policy","evaluate","title","undefined","userPolicies","_context","_operators"],"mappings":"0XAAAA,WAAAC,QAAA,8DACAC,gBAAAD,QAAA,qFAQME,eAEJ,QAAAA,GAAYC,IAAS,EAAAC,iBAAAC,SAAAC,KAAAJ,GACnBI,KAAKH,QAAUA,EACfG,KAAKC,UAAY,GAAAC,aAAAH,+EAmBLI,EAASC,GACrB,GAAIC,GAASL,KAAKM,iBAAiBH,EAASC,EAASG,sBAMrD,OAJIP,MAAKH,kBAALW,kBAAAT,UAA2CM,GAAqB,mBAAXA,KACvDA,EAASL,KAAKS,mBAAmBN,EAASC,EAASM,aAG9CL,2CAGQF,EAASQ,GACxB,GAAIN,GAAA,MAQJ,OALEA,GADEM,EACOA,EAAOC,SAASZ,KAAKH,QAASM,GAE9B,4DAMMA,EAASU,GAC1B,GAAIR,GAAA,MAEJ,IAAcS,SAAVD,EAAqB,CACvB,GAAIF,GAASX,KAAKH,QAAQkB,aAAaF,EAGrCR,GADEM,EACOA,EAAOC,SAASZ,KAAKH,QAASM,GAE9B,qBAGXE,GAAS,gBAGX,OAAOA,mCApDP,MAAOL,MAAKgB,uBAOFnB,GACVG,KAAKgB,SAAWnB,oCAJhB,MAAOG,MAAKiB,yBAOAhB,GACZD,KAAKiB,WAAahB,2BA6CPL","file":"policy/PDP.js","sourcesContent":["import Operators from './Operators';\nimport RuntimeCoreCtx from './context/RuntimeCoreCtx';\n/**\n* The Policy Decision Point (PDP) decides if a message is to be authorised by checking a set of\n* policies. The resource to be verified is specified in the first word of the 'condition' field of\n* a Policy object. The implementation that verifies if the message is compliant with a policy is\n* specified in a hashtable to allow dynamic definition of the implementation, providing\n* extensibility to the Policy Engine functionalities.\n*/\nclass PDP {\n\n  constructor(context) {\n    this.context = context;\n    this.operators = new Operators();\n  }\n\n  get context() {\n    return this._context;\n  }\n\n  get operators() {\n    return this._operators;\n  }\n\n  set context(context) {\n    this._context = context;\n  }\n\n  set operators(operators) {\n    this._operators = operators;\n  }\n\n  applyPolicies(message, policies) {\n    let result = this.evaluateSPPolicy(message, policies.serviceProviderPolicy);\n\n    if (this.context instanceof RuntimeCoreCtx && (result || result === 'Not Applicable')) {\n      result = this.evaluateUserPolicy(message, policies.userPolicy);\n    }\n\n    return result;\n  }\n\n  evaluateSPPolicy(message, policy) {\n    let result;\n\n    if (policy) {\n      result = policy.evaluate(this.context, message);\n    } else {\n      result = 'Not Applicable';\n    }\n\n    return result;\n  }\n\n  evaluateUserPolicy(message, title) {\n    let result;\n\n    if (title !== undefined) {\n      let policy = this.context.userPolicies[title];\n      \n      if (policy) {\n        result = policy.evaluate(this.context, message);\n      } else {\n        result = 'Not Applicable';\n      }\n    } else {\n      result = 'Not Applicable';\n    }\n\n    return result;\n  }\n\n}\n\nexport default PDP;\n"],"sourceRoot":"/source/"}