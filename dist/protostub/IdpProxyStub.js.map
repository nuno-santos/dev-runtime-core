{"version":3,"sources":["protostub/IdpProxyStub.js"],"names":["IdpProxyStub","messageBus","domain","idpProxy","_classCallCheck3","default","this","_this","addListener","msg","requestToIdp","start","params","body","method","login","then","value","replyMessage","generate","validate","window","Worker","myWorker","postMessage","_promise2","resolve","reject","onmessage","e","data","console","log","message","id","type","to","from","code"],"mappings":"udAGMA,wBAUJ,QAAAA,GAAYC,EAAYC,EAAQC,IAAU,EAAAC,iBAAAC,SAAAC,KAAAN,EACxC,IAAIO,GAAQD,IACZC,GAAMN,WAAaA,EACnBM,EAAML,OAASA,EACfK,EAAMJ,SAAWA,EA0CXI,EAAAN,WAAeO,YAAO,YAAAL,EAC1B,SAAMM,GAxCNF,EAAMG,aAAaD,KAIrBF,EAAMI,MAAMR,yEAQDM,GACX,GAAIF,GAAQD,KACRM,EAASH,EAAII,KAAKD,MACtB,QAAQH,EAAII,KAAKC,QACf,IAAK,QA4FGP,EAANQ,MAAeH,GAAaI,KAAA,SAADC,GAErBV,EAAAW,aAAqBT,EAAAQ,IA5F3B,MACF,KAAK,oBACHV,EAAMY,SAASP,GAAQI,KAAK,SAASC,GAASV,EAAMW,aAAaT,EAAKQ,IACtE,MACF,KAAK,oBACHV,EAAMa,SAASR,GAAQI,KAAK,SAASC,GAASV,EAAMW,aAAaT,EAAKQ,oCAYtEd,GACJ,GAAII,GAAQD,IACZ,KAAIe,OAAOC,OAOT,MAAO,OALP,IAAIC,GAAW,GAAID,QAAO,4BAC1Bf,GAAMgB,SAAWA,EACjBhB,EAAMgB,SAASC,aAAa,SAAS,8CAahCZ,GACP,GAAIL,GAAQD,IAEZ,OAAO,IAAAmB,WAAApB,QAAY,SAASqB,EAAQC,GAC9BN,OAAOC,QAETf,EAAMgB,SAASC,aAAa,WAAYZ,IAExCL,EAAMgB,SAASK,UAAY,SAASC,GAClCH,EAAQG,EAAEC,MACVC,QAAQC,IAAI,+BAAgCH,EAAEC,QAGhDH,EAAO,4CAWJf,GACP,GAAIL,GAAQD,IAEZ,OAAO,IAAAmB,WAAApB,QAAY,SAASqB,EAAQC,GAC9BN,OAAOC,QAETf,EAAMgB,SAASC,aAAa,WAAWZ,IAEvCL,EAAMgB,SAASK,UAAY,SAASC,GAClCH,EAAQG,EAAEC,MACVC,QAAQC,IAAI,+BAAgCH,EAAEC,QAGhDH,EAAO,yCAWPf,GACJ,GAAIL,GAAQD,IAEZ,OAAO,IAAAmB,WAAApB,QAAY,SAASqB,EAAQC,GAC9BN,OAAOC,QAETf,EAAMgB,SAASC,aAAa,QAASZ,IAErCL,EAAMgB,SAASK,UAAY,SAASC,GAClCH,EAAQG,EAAEC,MACVC,QAAQC,IAAI,+BAAgCH,EAAEC,QAGhDH,EAAO,gDAWAlB,EAAKQ,GAChB,GAAIV,GAAQD,KAER2B,GAAWC,GAAIzB,EAAIyB,GAAIC,KAAM,WAAYC,GAAI3B,EAAI4B,KAAMA,KAAM5B,EAAI2B,GACtDvB,MAAOyB,KAAM,IAAKrB,MAAOA,GAExCV,GAAMN,WAAWuB,YAAYS,4BAIlBjC","file":"protostub/IdpProxyStub.js","sourcesContent":["/**\n* Identity Provider Proxy Protocol Stub\n*/\nclass IdpProxyStub {\n\n  /**\n  * Constructor of the IdpProxy Stub\n  * The constructor add a listener in the messageBus received and start a web worker with the idpProxy received\n  *\n  * @param  {messageBus}      messageBus\n  * @param  {domain}          Domain\n  * @param  {idpProxy}    identity Provider Proxy javascript file\n  */\n  constructor(messageBus, domain, idpProxy) {\n    let _this = this;\n    _this.messageBus = messageBus;\n    _this.domain = domain;\n    _this.idpProxy = idpProxy;\n\n    _this.messageBus.addListener('domain://' + idpProxy, function(msg) {\n      _this.requestToIdp(msg);\n    });\n\n    //start the web worker with the idpProxy\n    _this.start(idpProxy);\n  }\n\n  /**\n  * Function that see the intended method in the message received and call the respective function\n  *\n  * @param {message}  message received in the messageBus\n  */\n  requestToIdp(msg) {\n    let _this = this;\n    let params = msg.body.params;\n    switch (msg.body.method) {\n      case 'login':\n        _this.login(params).then(function(value) { _this.replyMessage(msg, value);});\n        break;\n      case 'generateAssertion':\n        _this.generate(params).then(function(value) { _this.replyMessage(msg, value);});\n        break;\n      case 'validateAssertion':\n        _this.validate(params).then(function(value) { _this.replyMessage(msg, value);});\n        break;\n      default:\n        break;\n    }\n  }\n\n  /**\n  * Starts a web worker with the idpProxy javascipt file\n  *\n  * @param  {idpProxy}    identity Provider Proxy javascript file\n  */\n  start(idpProxy) {\n    let _this = this;\n    if (window.Worker) { //check if the browser supports the worker API\n\n      let myWorker = new Worker('/src/identity/IdpProxy.js');\n      _this.myWorker = myWorker;\n      _this.myWorker.postMessage(['create','IdpProxy']);\n\n    } else {\n      return 'error';\n    }\n  }\n\n  /**\n  * function that makes a request for an identity assertion to the web worker running the idpProxy\n  *\n  * @param  {params}  parameters received in the message. In this case contains the content, origin and usernamehint\n  * @return {Promise} returns a promise with an identity assertion generate by the idpProxy\n  */\n  generate(params) {\n    let _this = this;\n\n    return new Promise(function(resolve,reject) {\n      if (window.Worker) { //check if the browser supports the worker API\n\n        _this.myWorker.postMessage(['generate', params]);\n\n        _this.myWorker.onmessage = function(e) {\n          resolve(e.data);\n          console.log('Message received from worker', e.data);\n        };\n      } else {\n        reject('error');\n      }\n    });\n  }\n\n  /**\n  * function that makes a request to validate an identity assertion to the web worker running the idpProxy\n  *\n  * @param  {params}  parameters received in the message. In this case contains the identity assertion and origin\n  * @return {Promise} returns a promise with the identity assertion validation result, received by the idpProxy\n  */\n  validate(params) {\n    let _this = this;\n\n    return new Promise(function(resolve,reject) {\n      if (window.Worker) { //check if the browser supports the worker API\n\n        _this.myWorker.postMessage(['validate',params]);\n\n        _this.myWorker.onmessage = function(e) {\n          resolve(e.data);\n          console.log('Message received from worker', e.data);\n        };\n      } else {\n        reject('error');\n      }\n    });\n  }\n\n  /**\n  * function that makes a request for a user identity to the web worker running the idpProxy\n  *\n  * @param  {params}  parameters received in the message. In this case contains the login scope\n  * @return {Promise} returns a promise an URL so the Identity Module can use to obtain an identity\n  */\n  login(params) {\n    let _this = this;\n\n    return new Promise(function(resolve,reject) {\n      if (window.Worker) { //check if the browser supports the worker API\n\n        _this.myWorker.postMessage(['login', params]);\n\n        _this.myWorker.onmessage = function(e) {\n          resolve(e.data);\n          console.log('Message received from worker', e.data);\n        };\n      } else {\n        reject('error');\n      }\n    });\n  }\n\n  /**\n  * This function receives a message and a value. It replies the value to the sender of the message received\n  *\n  * @param  {message}   message received\n  * @param  {value}     value to include in the new message to send\n  */\n  replyMessage(msg, value) {\n    let _this = this;\n\n    let message = {id: msg.id, type: 'response', to: msg.from, from: msg.to,\n                   body: {code: 200, value: value}};\n\n    _this.messageBus.postMessage(message);\n  }\n}\n\nexport default IdpProxyStub;\n"],"sourceRoot":"/source/"}