{"version":3,"sources":["identity/Identity.js"],"names":["Identity","guid","type","_classCallCheck3","default","this","_this","identifiersList","identifier","identityInformation","idAssertion","serviceAddress","authenticationData","authorisationData","userProfile","assertion","idp","scope","newIdAssertion","IdAssertion","idAssertionList","push","IdValidation","identity","contents"],"mappings":"0XAIMA,oBAEJ,QAAAA,GAAYC,EAAMC,IAAM,EAAAC,iBAAAC,SAAAC,KAAAL,EACtB,IAAIM,GAAQD,IAEZC,GAAML,KAAOA,EACbK,EAAMJ,KAAOA,EACbI,EAAMC,wFAIIC,GACV,GAAIF,GAAQD,KACRI,GACFC,YAAa,GACbC,eAAgB,GAChBC,mBAAoB,GACpBC,kBAAmB,GACnBC,YAAa,GAEfR,GAAMC,gBAAgBC,GAAcC,yCAGvBD,EAAYO,EAAWC,EAAKC,GACzC,GAAIX,GAAQD,KAERa,EAAiB,GAAIC,aAAYJ,EAAWC,EAAKC,EAErDX,GAAMc,gBAAgBC,KAAKH,YAIzBC,YAEJ,QAAAA,GAAYJ,EAAWC,EAAKC,IAAO,EAAAd,iBAAAC,SAAAC,KAAAc,EACjC,IAAIb,GAAQD,IAEZC,GAAMS,UAAYA,EAClBT,EAAMU,IAAMA,EACZV,EAAMW,MAAQA,GAKZK,wBAEJ,QAAAA,GAAYC,EAAUC,IAAU,EAAArB,iBAAAC,SAAAC,KAAAiB,EAC9B,IAAIhB,GAAQD,IACZC,GAAMiB,SAAWA,EACjBjB,EAAMkB,SAAWA,qEAGTD,EAAUC,6BAMPxB","file":"identity/Identity.js","sourcesContent":["/**\n* The Identity Data Model is used to model the reTHINK User entity. The Identity data model is handled by Identity Management functionality.\n*\n*/\nclass Identity {\n\n  constructor(guid, type) {\n    let _this = this;\n\n    _this.guid = guid;\n    _this.type = type;\n    _this.identifiersList = {};\n\n  }\n\n  addIdentity(identifier) {\n    let _this = this;\n    let identityInformation = {\n      idAssertion: '',\n      serviceAddress: '',\n      authenticationData: '',\n      authorisationData: '',\n      userProfile: ''\n    };\n    _this.identifiersList[identifier] = identityInformation;\n  }\n\n  addIdAssertion(identifier, assertion, idp, scope) {\n    let _this = this;\n\n    let newIdAssertion = new IdAssertion(assertion, idp, scope);\n\n    _this.idAssertionList.push(newIdAssertion);\n  }\n}\n\nclass IdAssertion {\n\n  constructor(assertion, idp, scope) {\n    let _this = this;\n\n    _this.assertion = assertion;\n    _this.idp = idp;\n    _this.scope = scope;\n  }\n\n}\n\nclass IdValidation {\n\n  constructor(identity, contents) {\n    let _this = this;\n    _this.identity = identity;\n    _this.contents = contents;\n  }\n\n  validates(identity, contents) {\n    //TODO implement the logic\n\n  }\n}\n\nexport default Identity;\n"],"sourceRoot":"/source/"}