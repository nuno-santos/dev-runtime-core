{"version":3,"sources":["registry/AddressAllocation.js"],"names":["AddressAllocation","url","bus","_classCallCheck3","default","this","_this","_url","_bus","domain","number","msg","type","from","to","body","value","_promise2","resolve","reject","postMessage","reply","code","allocated","desc","addresses","message","childrenResources","console","log"],"mappings":"udA2BMA,6BAWJ,QAAAA,GAAYC,EAAKC,IAAK,EAAAC,iBAAAC,SAAAC,KAAAL,EACpB,IAAIM,GAAQD,IAKZC,GAAMC,KAAON,EACbK,EAAME,KAAON,kEAeRO,EAAQC,GACb,GAAIJ,GAAQD,KAIRM,GACFC,KAAM,SAAUC,KAAMP,EAAMC,KAAMO,GAAI,qBAAuBL,EAAS,8BACtEM,MAAOC,OAAQN,OAAQA,IASzB,OAAO,IAAAO,WAAAb,QAAY,SAACc,EAASC,GAG3Bb,EAAME,KAAKY,YAAYT,EAAK,SAACU,GACH,MAApBA,EAAMN,KAAKO,KACbJ,EAAQG,EAAMN,KAAKC,MAAMO,WAEzBJ,EAAOE,EAAMN,KAAKS,yCAYnBf,EAAQgB,GACb,GAAInB,GAAQD,KAERqB,GACFd,KAAM,SAAUC,KAAMP,EAAMC,KAAMO,GAAI,qBAAuBL,EAAS,8BACtEM,MAAOY,kBAAmBF,GAG5B,OAAO,IAAAR,WAAAb,QAAY,SAACc,EAASC,GAE3Bb,EAAME,KAAKY,YAAYM,EAAS,SAACL,GAC/BO,QAAQC,IAAI,QAASR,GACG,MAApBA,EAAMN,KAAKO,KACbJ,EAAQG,EAAMN,KAAKO,MAEnBH,EAAOE,EAAMN,KAAKS,sCA1Dd,MAAOnB,MAAKE,8BAkEXP","file":"registry/AddressAllocation.js","sourcesContent":["/**\n* Copyright 2016 PT Inovação e Sistemas SA\n* Copyright 2016 INESC-ID\n* Copyright 2016 QUOBIS NETWORKS SL\n* Copyright 2016 FRAUNHOFER-GESELLSCHAFT ZUR FOERDERUNG DER ANGEWANDTEN FORSCHUNG E.V\n* Copyright 2016 ORANGE SA\n* Copyright 2016 Deutsche Telekom AG\n* Copyright 2016 Apizee\n* Copyright 2016 TECHNISCHE UNIVERSITAT BERLIN\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n**/\n// import MessageFactory from '../../resources/MessageFactory';\n\n/**\n * Class will ask to the message node for addresses\n */\nclass AddressAllocation {\n  /* private\n  _url: URL\n  _bus: MiniBus\n  */\n\n  /**\n   * Create an Address Allocation\n   * @param  {URL.URL}      url - url from who is sending the message\n   * @param  {MiniBus}      bus - MiniBus used for address allocation\n   */\n  constructor(url, bus) {\n    let _this = this;\n\n    // let messageFactory = new MessageFactory();\n    //\n    // _this._messageFactory = messageFactory;\n    _this._url = url;\n    _this._bus = bus;\n  }\n\n  /**\n   * get the URL value\n   * @return {string} The url value;\n   */\n  get url() { return this._url; }\n\n  /**\n   * Ask for creation of a number of Hyperty addresses, to the domain message node.\n   * @param  {Domain} domain - Domain of the message node.\n   * @param  {number} number - Number of addresses to request\n   * @returns {Promise<HypertyURL>}  A list of HypertyURL's\n   */\n  create(domain, number) {\n    let _this = this;\n\n    // let messageFactory = _this._messageFactory;\n\n    let msg = {\n      type: 'create', from: _this._url, to: 'domain://msg-node.' + domain + '/hyperty-address-allocation',\n      body: {value: {number: number}}\n    };\n\n    // TODO: Apply the message factory\n    // The msg-node-vertx should be changed the body field to receive\n    // the following format body: {value: {number: number}} because\n    // the message is generated in that way by the message factory;\n    // let msg = messageFactory.createMessageRequest(_this._url, 'domain://msg-node.' + domain + '/hyperty-address-allocation', '', {number: number});\n\n    return new Promise((resolve, reject) => {\n\n      // TODO: change this response Message using the MessageFactory\n      _this._bus.postMessage(msg, (reply) => {\n        if (reply.body.code === 200) {\n          resolve(reply.body.value.allocated);\n        } else {\n          reject(reply.body.desc);\n        }\n      });\n    });\n  }\n\n  /**\n  * Send a request to the domain message node, to deallocate one or more addresses\n  * @param  {Domain} domain - Domain of the message node.\n  * @param  {addresses} addresses to request the deallocation\n  * @returns {Promise}  the response by the message node\n  */\n  delete(domain, addresses) {\n    let _this = this;\n\n    let message = {\n      type: 'delete', from: _this._url, to: 'domain://msg-node.' + domain + '/hyperty-address-allocation',\n      body: {childrenResources: addresses}\n    };\n\n    return new Promise((resolve, reject) => {\n\n      _this._bus.postMessage(message, (reply) => {\n        console.log('reply', reply);\n        if (reply.body.code === 200) {\n          resolve(reply.body.code);\n        } else {\n          reject(reply.body.desc);\n        }\n      });\n    });\n\n  }\n}\n\nexport default AddressAllocation;\n"],"sourceRoot":"/source/"}