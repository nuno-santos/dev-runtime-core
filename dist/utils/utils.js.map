{"version":3,"sources":["utils/utils.js"],"names":["divideURL","url","Error","re","subst","parts","replace","split","result","type","domain","identity","divideEmail","email","indexOfAt","indexOf","username","substring","length","emptyObject","object","_keys2","default","deepClone","obj","JSON","parse","_stringify2","removePathFromURL","splitURL","getUserURLFromEmail","userEmail","getUserEmailFromURL","userURL","convertToUserURL","identifier","dividedURL","isDataObjectURL","schemasToIgnore","urlSchema"],"mappings":"qFAgFO,QAASA,WAAYC,GAtC1B,IAAKA,EAAK,KAAMC,OAAM,yBAiDtB,IAAAC,GAAS,uFA7CLC,EAAQ,WACRC,EAAQJ,EAAIK,QAAQH,EAAIC,GAAOG,MAAM,IAGrCF,GAAM,KAAOJ,IACfI,EAAM,GAAK,QACXA,EAAM,GAAKJ,EAGb,IAAIO,IACFC,KAAMJ,EAAM,GACZK,OAAQL,EAAM,GAoEXM,SAASN,EAAA,GAGd,OAYEG,GA5EG,QAASI,aAAYC,GAC1B,GAAIC,GAAYD,EAAME,QAAQ,KAE1BP,GACFQ,SAAUH,EAAMI,UAAU,EAAGH,GAC7BJ,OAAQG,EAAMI,UAAUH,EAAY,EAAGD,EAAMK,QAG/C,OAAOV,GAQF,QAASW,aAAYC,GAC1B,SAAO,EAAAC,OAAAC,SAAYF,GAAQF,OAAS,GAQ/B,QAASK,WAAUC,GAExB,GAAIA,EAAK,MAAOC,MAAKC,OAAM,EAAAC,YAAAL,SAAeE,IAGrC,QAASI,mBAAkB3B,GAChC,GAAI4B,GAAW5B,EAAIM,MAAM,IACzB,OAAOsB,GAAS,GAAK,KAAOA,EAAS,GAAK,IAAMA,EAAS,GAQpD,QAASC,qBAAoBC,GAClC,GAAIjB,GAAYiB,EAAUhB,QAAQ,IAClC,OAAO,UAAYgB,EAAUd,UAAUH,EAAY,EAAGiB,EAAUb,QAAU,IAAMa,EAAUd,UAAU,EAAGH,GAQlG,QAASkB,qBAAoBC,GAClC,GAAIhC,GAAMD,UAAUiC,EACpB,OAAOhC,GAAIU,SAASL,QAAQ,IAAK,IAAM,IAAML,EAAIS,OAS5C,QAASwB,kBAAiBC,GAG/B,GAAmC,YAA/BA,EAAWlB,UAAU,EAAG,GAAkB,CAC5C,GAAImB,GAAapC,UAAUmC,EAG3B,IAAIC,EAAW1B,QAAU0B,EAAWzB,SAClC,MAAOwB,EAEP,MAAM,4BAKR,MAAOL,qBAAoBK,GAIxB,QAASE,iBAAgBpC,GAC9B,GAAIqC,IAAmB,aAAc,UAAW,SAAU,WACtDT,EAAY5B,EAAKM,MAAM,OACvBgC,EAAYV,EAAS,EAEzB,OAAOS,GAAgBvB,QAAQwB,MAAe,uQArEhCvC,UAAAA,kBAhBAY,YAAAA,oBAgBAO,YAAAA,oBASAI,UAAAA,kBAKAK,kBAAAA,0BAUAE,oBAAAA,4BAUAE,oBAAAA,4BAWAE,iBAAAA,yBAmBAG,gBAAAA","file":"utils/utils.js","sourcesContent":["/**\n* Copyright 2016 PT Inovação e Sistemas SA\n* Copyright 2016 INESC-ID\n* Copyright 2016 QUOBIS NETWORKS SL\n* Copyright 2016 FRAUNHOFER-GESELLSCHAFT ZUR FOERDERUNG DER ANGEWANDTEN FORSCHUNG E.V\n* Copyright 2016 ORANGE SA\n* Copyright 2016 Deutsche Telekom AG\n* Copyright 2016 Apizee\n* Copyright 2016 TECHNISCHE UNIVERSITAT BERLIN\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n**/\n/**\n * Support module with some functions will be useful\n * @module utils\n */\n\n/**\n * @typedef divideURL\n * @type Object\n * @property {string} type The type of URL\n * @property {string} domain The domain of URL\n * @property {string} identity The identity of URL\n */\n\n/**\n * Divide an url in type, domain and identity\n * @param  {URL.URL} url - url address\n * @return {divideURL} the result of divideURL\n */\nexport function divideURL(url) {\n\n  if (!url) throw Error('URL is needed to split');\n\n  // let re = /([a-zA-Z-]*)?:\\/\\/(?:\\.)?([-a-zA-Z0-9@:%._\\+~#=]{2,256}\\.[a-z]{2,6}\\b)*(\\/[\\/\\d\\w\\.-]*)*(?:[\\?])*(.+)*/gi;\n  let re = /([a-zA-Z-]*):\\/\\/(?:\\.)?([-a-zA-Z0-9@:%._\\+~#=]{2,256})([-a-zA-Z0-9@:%._\\+~#=\\/]*)/gi;\n  let subst = '$1,$2,$3';\n  let parts = url.replace(re, subst).split(',');\n\n  // If the url has no protocol, the default protocol set is https\n  if (parts[0] === url) {\n    parts[0] = 'https';\n    parts[1] = url;\n  }\n\n  let result = {\n    type: parts[0],\n    domain: parts[1],\n    identity: parts[2]\n  };\n\n  return result;\n}\n\nexport function divideEmail(email) {\n  let indexOfAt = email.indexOf('@');\n\n  let result = {\n    username: email.substring(0, indexOfAt),\n    domain: email.substring(indexOfAt + 1, email.length)\n  };\n\n  return result;\n}\n\n/**\n * Check if an Object is empty\n * @param  {Object} object Object to be checked\n * @return {Boolean}       status of Object, empty or not (true|false);\n */\nexport function emptyObject(object) {\n  return Object.keys(object).length > 0 ? false : true;\n}\n\n/**\n * Make a COPY of the original data\n * @param  {Object}  obj - object to be cloned\n * @return {Object}\n */\nexport function deepClone(obj) {\n  //TODO: simple but inefficient JSON deep clone...\n  if (obj) return JSON.parse(JSON.stringify(obj));\n}\n\nexport function removePathFromURL(url) {\n  let splitURL = url.split('/');\n  return splitURL[0] + '//' + splitURL[2] + '/' + splitURL[3];\n}\n\n/**\n * Obtains the user URL that corresponds to a given email\n * @param  {string} userEmail The user email\n * @return {URL.URL} userURL The user URL\n */\nexport function getUserURLFromEmail(userEmail) {\n  let indexOfAt = userEmail.indexOf('@');\n  return 'user://' + userEmail.substring(indexOfAt + 1, userEmail.length) + '/' + userEmail.substring(0, indexOfAt);\n}\n\n/**\n * Obtains the user email that corresponds to a given URL\n * @param  {URL.URL} userURL The user URL\n * @return {string} userEmail The user email\n */\nexport function getUserEmailFromURL(userURL) {\n  let url = divideURL(userURL);\n  return url.identity.replace('/', '') + '@' + url.domain; // identity field has '/exampleID' instead of 'exampleID'\n}\n\n\n/**\n * Check if the user identifier is already in the URL format, if not, convert to URL format\n * @param  {string}   identifier  user identifier\n * @return {string}   userURL    the user URL\n */\nexport function convertToUserURL(identifier) {\n\n  // check if the identifier is already in the url format\n  if (identifier.substring(0, 7) === 'user://') {\n    let dividedURL = divideURL(identifier);\n\n    //check if the url is well formated\n    if (dividedURL.domain && dividedURL.identity) {\n      return identifier;\n    } else {\n      throw 'userURL with wrong format';\n    }\n\n  //if not, convert the user email to URL format\n  } else {\n    return getUserURLFromEmail(identifier);\n  }\n}\n\nexport function isDataObjectURL(url) {\n  let schemasToIgnore = ['domain-idp', 'runtime', 'domain', 'hyperty'];\n  let splitURL = (url).split('://');\n  let urlSchema = splitURL[0];\n\n  return schemasToIgnore.indexOf(urlSchema) === -1;\n}\n"],"sourceRoot":"/source/"}