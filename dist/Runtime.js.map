{"version":3,"names":[],"mappings":"","sources":["Runtime.js"],"sourcesContent":["(function(f){if(typeof exports===\"object\"&&typeof module!==\"undefined\"){module.exports=f()}else if(typeof define===\"function\"&&define.amd){define([],f)}else{var g;if(typeof window!==\"undefined\"){g=window}else if(typeof global!==\"undefined\"){g=global}else if(typeof self!==\"undefined\"){g=self}else{g=this}g.Runtime = f()}})(function(){var define,module,exports;return (function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){\n(function (global){\n\"use strict\";\n\nrequire(\"core-js/shim\");\n\nrequire(\"regenerator-runtime/runtime\");\n\nrequire(\"core-js/fn/regexp/escape\");\n\n/* eslint max-len: 0 */\n\nif (global._babelPolyfill) {\n  throw new Error(\"only one instance of babel-polyfill is allowed\");\n}\nglobal._babelPolyfill = true;\n\n// Should be removed in the next major release:\n\nvar DEFINE_PROPERTY = \"defineProperty\";\nfunction define(O, key, value) {\n  O[key] || Object[DEFINE_PROPERTY](O, key, {\n    writable: true,\n    configurable: true,\n    value: value\n  });\n}\n\ndefine(String.prototype, \"padLeft\", \"\".padStart);\ndefine(String.prototype, \"padRight\", \"\".padEnd);\n\n\"pop,reverse,shift,keys,values,entries,indexOf,every,some,forEach,map,filter,find,findIndex,includes,join,slice,concat,push,splice,unshift,sort,lastIndexOf,reduce,reduceRight,copyWithin,fill\".split(\",\").forEach(function (key) {\n  [][key] && define(Array, key, Function.call.bind([][key]));\n});\n}).call(this,typeof global !== \"undefined\" ? global : typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {})\n\n},{\"core-js/fn/regexp/escape\":18,\"core-js/shim\":410,\"regenerator-runtime/runtime\":412}],2:[function(require,module,exports){\nmodule.exports = { \"default\": require(\"core-js/library/fn/json/stringify\"), __esModule: true };\n},{\"core-js/library/fn/json/stringify\":19}],3:[function(require,module,exports){\nmodule.exports = { \"default\": require(\"core-js/library/fn/object/assign\"), __esModule: true };\n},{\"core-js/library/fn/object/assign\":20}],4:[function(require,module,exports){\nmodule.exports = { \"default\": require(\"core-js/library/fn/object/create\"), __esModule: true };\n},{\"core-js/library/fn/object/create\":21}],5:[function(require,module,exports){\nmodule.exports = { \"default\": require(\"core-js/library/fn/object/define-property\"), __esModule: true };\n},{\"core-js/library/fn/object/define-property\":22}],6:[function(require,module,exports){\nmodule.exports = { \"default\": require(\"core-js/library/fn/object/get-prototype-of\"), __esModule: true };\n},{\"core-js/library/fn/object/get-prototype-of\":23}],7:[function(require,module,exports){\nmodule.exports = { \"default\": require(\"core-js/library/fn/object/is-frozen\"), __esModule: true };\n},{\"core-js/library/fn/object/is-frozen\":24}],8:[function(require,module,exports){\nmodule.exports = { \"default\": require(\"core-js/library/fn/object/keys\"), __esModule: true };\n},{\"core-js/library/fn/object/keys\":25}],9:[function(require,module,exports){\nmodule.exports = { \"default\": require(\"core-js/library/fn/object/set-prototype-of\"), __esModule: true };\n},{\"core-js/library/fn/object/set-prototype-of\":26}],10:[function(require,module,exports){\nmodule.exports = { \"default\": require(\"core-js/library/fn/promise\"), __esModule: true };\n},{\"core-js/library/fn/promise\":27}],11:[function(require,module,exports){\nmodule.exports = { \"default\": require(\"core-js/library/fn/symbol\"), __esModule: true };\n},{\"core-js/library/fn/symbol\":28}],12:[function(require,module,exports){\nmodule.exports = { \"default\": require(\"core-js/library/fn/symbol/iterator\"), __esModule: true };\n},{\"core-js/library/fn/symbol/iterator\":29}],13:[function(require,module,exports){\n\"use strict\";\n\nexports.__esModule = true;\n\nexports.default = function (instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n};\n},{}],14:[function(require,module,exports){\n\"use strict\";\n\nexports.__esModule = true;\n\nvar _defineProperty = require(\"../core-js/object/define-property\");\n\nvar _defineProperty2 = _interopRequireDefault(_defineProperty);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nexports.default = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      (0, _defineProperty2.default)(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n},{\"../core-js/object/define-property\":5}],15:[function(require,module,exports){\n\"use strict\";\n\nexports.__esModule = true;\n\nvar _setPrototypeOf = require(\"../core-js/object/set-prototype-of\");\n\nvar _setPrototypeOf2 = _interopRequireDefault(_setPrototypeOf);\n\nvar _create = require(\"../core-js/object/create\");\n\nvar _create2 = _interopRequireDefault(_create);\n\nvar _typeof2 = require(\"../helpers/typeof\");\n\nvar _typeof3 = _interopRequireDefault(_typeof2);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nexports.default = function (subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + (typeof superClass === \"undefined\" ? \"undefined\" : (0, _typeof3.default)(superClass)));\n  }\n\n  subClass.prototype = (0, _create2.default)(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) _setPrototypeOf2.default ? (0, _setPrototypeOf2.default)(subClass, superClass) : subClass.__proto__ = superClass;\n};\n},{\"../core-js/object/create\":4,\"../core-js/object/set-prototype-of\":9,\"../helpers/typeof\":17}],16:[function(require,module,exports){\n\"use strict\";\n\nexports.__esModule = true;\n\nvar _typeof2 = require(\"../helpers/typeof\");\n\nvar _typeof3 = _interopRequireDefault(_typeof2);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nexports.default = function (self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && ((typeof call === \"undefined\" ? \"undefined\" : (0, _typeof3.default)(call)) === \"object\" || typeof call === \"function\") ? call : self;\n};\n},{\"../helpers/typeof\":17}],17:[function(require,module,exports){\n\"use strict\";\n\nexports.__esModule = true;\n\nvar _iterator = require(\"../core-js/symbol/iterator\");\n\nvar _iterator2 = _interopRequireDefault(_iterator);\n\nvar _symbol = require(\"../core-js/symbol\");\n\nvar _symbol2 = _interopRequireDefault(_symbol);\n\nvar _typeof = typeof _symbol2.default === \"function\" && typeof _iterator2.default === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof _symbol2.default === \"function\" && obj.constructor === _symbol2.default ? \"symbol\" : typeof obj; };\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nexports.default = typeof _symbol2.default === \"function\" && _typeof(_iterator2.default) === \"symbol\" ? function (obj) {\n  return typeof obj === \"undefined\" ? \"undefined\" : _typeof(obj);\n} : function (obj) {\n  return obj && typeof _symbol2.default === \"function\" && obj.constructor === _symbol2.default ? \"symbol\" : typeof obj === \"undefined\" ? \"undefined\" : _typeof(obj);\n};\n},{\"../core-js/symbol\":11,\"../core-js/symbol/iterator\":12}],18:[function(require,module,exports){\nrequire('../../modules/core.regexp.escape');\nmodule.exports = require('../../modules/_core').RegExp.escape;\n},{\"../../modules/_core\":137,\"../../modules/core.regexp.escape\":234}],19:[function(require,module,exports){\nvar core  = require('../../modules/_core')\n  , $JSON = core.JSON || (core.JSON = {stringify: JSON.stringify});\nmodule.exports = function stringify(it){ // eslint-disable-line no-unused-vars\n  return $JSON.stringify.apply($JSON, arguments);\n};\n},{\"../../modules/_core\":37}],20:[function(require,module,exports){\nrequire('../../modules/es6.object.assign');\nmodule.exports = require('../../modules/_core').Object.assign;\n},{\"../../modules/_core\":37,\"../../modules/es6.object.assign\":103}],21:[function(require,module,exports){\nrequire('../../modules/es6.object.create');\nvar $Object = require('../../modules/_core').Object;\nmodule.exports = function create(P, D){\n  return $Object.create(P, D);\n};\n},{\"../../modules/_core\":37,\"../../modules/es6.object.create\":104}],22:[function(require,module,exports){\nrequire('../../modules/es6.object.define-property');\nvar $Object = require('../../modules/_core').Object;\nmodule.exports = function defineProperty(it, key, desc){\n  return $Object.defineProperty(it, key, desc);\n};\n},{\"../../modules/_core\":37,\"../../modules/es6.object.define-property\":105}],23:[function(require,module,exports){\nrequire('../../modules/es6.object.get-prototype-of');\nmodule.exports = require('../../modules/_core').Object.getPrototypeOf;\n},{\"../../modules/_core\":37,\"../../modules/es6.object.get-prototype-of\":106}],24:[function(require,module,exports){\nrequire('../../modules/es6.object.is-frozen');\nmodule.exports = require('../../modules/_core').Object.isFrozen;\n},{\"../../modules/_core\":37,\"../../modules/es6.object.is-frozen\":107}],25:[function(require,module,exports){\nrequire('../../modules/es6.object.keys');\nmodule.exports = require('../../modules/_core').Object.keys;\n},{\"../../modules/_core\":37,\"../../modules/es6.object.keys\":108}],26:[function(require,module,exports){\nrequire('../../modules/es6.object.set-prototype-of');\nmodule.exports = require('../../modules/_core').Object.setPrototypeOf;\n},{\"../../modules/_core\":37,\"../../modules/es6.object.set-prototype-of\":109}],27:[function(require,module,exports){\nrequire('../modules/es6.object.to-string');\nrequire('../modules/es6.string.iterator');\nrequire('../modules/web.dom.iterable');\nrequire('../modules/es6.promise');\nmodule.exports = require('../modules/_core').Promise;\n},{\"../modules/_core\":37,\"../modules/es6.object.to-string\":110,\"../modules/es6.promise\":111,\"../modules/es6.string.iterator\":112,\"../modules/web.dom.iterable\":116}],28:[function(require,module,exports){\nrequire('../../modules/es6.symbol');\nrequire('../../modules/es6.object.to-string');\nrequire('../../modules/es7.symbol.async-iterator');\nrequire('../../modules/es7.symbol.observable');\nmodule.exports = require('../../modules/_core').Symbol;\n},{\"../../modules/_core\":37,\"../../modules/es6.object.to-string\":110,\"../../modules/es6.symbol\":113,\"../../modules/es7.symbol.async-iterator\":114,\"../../modules/es7.symbol.observable\":115}],29:[function(require,module,exports){\nrequire('../../modules/es6.string.iterator');\nrequire('../../modules/web.dom.iterable');\nmodule.exports = require('../../modules/_wks-ext').f('iterator');\n},{\"../../modules/_wks-ext\":99,\"../../modules/es6.string.iterator\":112,\"../../modules/web.dom.iterable\":116}],30:[function(require,module,exports){\nmodule.exports = function(it){\n  if(typeof it != 'function')throw TypeError(it + ' is not a function!');\n  return it;\n};\n},{}],31:[function(require,module,exports){\nmodule.exports = function(){ /* empty */ };\n},{}],32:[function(require,module,exports){\nmodule.exports = function(it, Constructor, name, forbiddenField){\n  if(!(it instanceof Constructor) || (forbiddenField !== undefined && forbiddenField in it)){\n    throw TypeError(name + ': incorrect invocation!');\n  } return it;\n};\n},{}],33:[function(require,module,exports){\nvar isObject = require('./_is-object');\nmodule.exports = function(it){\n  if(!isObject(it))throw TypeError(it + ' is not an object!');\n  return it;\n};\n},{\"./_is-object\":56}],34:[function(require,module,exports){\n// false -> Array#indexOf\n// true  -> Array#includes\nvar toIObject = require('./_to-iobject')\n  , toLength  = require('./_to-length')\n  , toIndex   = require('./_to-index');\nmodule.exports = function(IS_INCLUDES){\n  return function($this, el, fromIndex){\n    var O      = toIObject($this)\n      , length = toLength(O.length)\n      , index  = toIndex(fromIndex, length)\n      , value;\n    // Array#includes uses SameValueZero equality algorithm\n    if(IS_INCLUDES && el != el)while(length > index){\n      value = O[index++];\n      if(value != value)return true;\n    // Array#toIndex ignores holes, Array#includes - not\n    } else for(;length > index; index++)if(IS_INCLUDES || index in O){\n      if(O[index] === el)return IS_INCLUDES || index || 0;\n    } return !IS_INCLUDES && -1;\n  };\n};\n},{\"./_to-index\":91,\"./_to-iobject\":93,\"./_to-length\":94}],35:[function(require,module,exports){\n// getting tag from 19.1.3.6 Object.prototype.toString()\nvar cof = require('./_cof')\n  , TAG = require('./_wks')('toStringTag')\n  // ES3 wrong here\n  , ARG = cof(function(){ return arguments; }()) == 'Arguments';\n\n// fallback for IE11 Script Access Denied error\nvar tryGet = function(it, key){\n  try {\n    return it[key];\n  } catch(e){ /* empty */ }\n};\n\nmodule.exports = function(it){\n  var O, T, B;\n  return it === undefined ? 'Undefined' : it === null ? 'Null'\n    // @@toStringTag case\n    : typeof (T = tryGet(O = Object(it), TAG)) == 'string' ? T\n    // builtinTag case\n    : ARG ? cof(O)\n    // ES3 arguments fallback\n    : (B = cof(O)) == 'Object' && typeof O.callee == 'function' ? 'Arguments' : B;\n};\n},{\"./_cof\":36,\"./_wks\":100}],36:[function(require,module,exports){\nvar toString = {}.toString;\n\nmodule.exports = function(it){\n  return toString.call(it).slice(8, -1);\n};\n},{}],37:[function(require,module,exports){\nvar core = module.exports = {version: '2.4.0'};\nif(typeof __e == 'number')__e = core; // eslint-disable-line no-undef\n},{}],38:[function(require,module,exports){\n// optional / simple context binding\nvar aFunction = require('./_a-function');\nmodule.exports = function(fn, that, length){\n  aFunction(fn);\n  if(that === undefined)return fn;\n  switch(length){\n    case 1: return function(a){\n      return fn.call(that, a);\n    };\n    case 2: return function(a, b){\n      return fn.call(that, a, b);\n    };\n    case 3: return function(a, b, c){\n      return fn.call(that, a, b, c);\n    };\n  }\n  return function(/* ...args */){\n    return fn.apply(that, arguments);\n  };\n};\n},{\"./_a-function\":30}],39:[function(require,module,exports){\n// 7.2.1 RequireObjectCoercible(argument)\nmodule.exports = function(it){\n  if(it == undefined)throw TypeError(\"Can't call method on  \" + it);\n  return it;\n};\n},{}],40:[function(require,module,exports){\n// Thank's IE8 for his funny defineProperty\nmodule.exports = !require('./_fails')(function(){\n  return Object.defineProperty({}, 'a', {get: function(){ return 7; }}).a != 7;\n});\n},{\"./_fails\":45}],41:[function(require,module,exports){\nvar isObject = require('./_is-object')\n  , document = require('./_global').document\n  // in old IE typeof document.createElement is 'object'\n  , is = isObject(document) && isObject(document.createElement);\nmodule.exports = function(it){\n  return is ? document.createElement(it) : {};\n};\n},{\"./_global\":47,\"./_is-object\":56}],42:[function(require,module,exports){\n// IE 8- don't enum bug keys\r\nmodule.exports = (\r\n  'constructor,hasOwnProperty,isPrototypeOf,propertyIsEnumerable,toLocaleString,toString,valueOf'\r\n).split(',');\n},{}],43:[function(require,module,exports){\n// all enumerable object keys, includes symbols\nvar getKeys = require('./_object-keys')\n  , gOPS    = require('./_object-gops')\n  , pIE     = require('./_object-pie');\nmodule.exports = function(it){\n  var result     = getKeys(it)\n    , getSymbols = gOPS.f;\n  if(getSymbols){\n    var symbols = getSymbols(it)\n      , isEnum  = pIE.f\n      , i       = 0\n      , key;\n    while(symbols.length > i)if(isEnum.call(it, key = symbols[i++]))result.push(key);\n  } return result;\n};\n},{\"./_object-gops\":74,\"./_object-keys\":77,\"./_object-pie\":78}],44:[function(require,module,exports){\nvar global    = require('./_global')\n  , core      = require('./_core')\n  , ctx       = require('./_ctx')\n  , hide      = require('./_hide')\n  , PROTOTYPE = 'prototype';\n\nvar $export = function(type, name, source){\n  var IS_FORCED = type & $export.F\n    , IS_GLOBAL = type & $export.G\n    , IS_STATIC = type & $export.S\n    , IS_PROTO  = type & $export.P\n    , IS_BIND   = type & $export.B\n    , IS_WRAP   = type & $export.W\n    , exports   = IS_GLOBAL ? core : core[name] || (core[name] = {})\n    , expProto  = exports[PROTOTYPE]\n    , target    = IS_GLOBAL ? global : IS_STATIC ? global[name] : (global[name] || {})[PROTOTYPE]\n    , key, own, out;\n  if(IS_GLOBAL)source = name;\n  for(key in source){\n    // contains in native\n    own = !IS_FORCED && target && target[key] !== undefined;\n    if(own && key in exports)continue;\n    // export native or passed\n    out = own ? target[key] : source[key];\n    // prevent global pollution for namespaces\n    exports[key] = IS_GLOBAL && typeof target[key] != 'function' ? source[key]\n    // bind timers to global for call from export context\n    : IS_BIND && own ? ctx(out, global)\n    // wrap global constructors for prevent change them in library\n    : IS_WRAP && target[key] == out ? (function(C){\n      var F = function(a, b, c){\n        if(this instanceof C){\n          switch(arguments.length){\n            case 0: return new C;\n            case 1: return new C(a);\n            case 2: return new C(a, b);\n          } return new C(a, b, c);\n        } return C.apply(this, arguments);\n      };\n      F[PROTOTYPE] = C[PROTOTYPE];\n      return F;\n    // make static versions for prototype methods\n    })(out) : IS_PROTO && typeof out == 'function' ? ctx(Function.call, out) : out;\n    // export proto methods to core.%CONSTRUCTOR%.methods.%NAME%\n    if(IS_PROTO){\n      (exports.virtual || (exports.virtual = {}))[key] = out;\n      // export proto methods to core.%CONSTRUCTOR%.prototype.%NAME%\n      if(type & $export.R && expProto && !expProto[key])hide(expProto, key, out);\n    }\n  }\n};\n// type bitmap\n$export.F = 1;   // forced\n$export.G = 2;   // global\n$export.S = 4;   // static\n$export.P = 8;   // proto\n$export.B = 16;  // bind\n$export.W = 32;  // wrap\n$export.U = 64;  // safe\n$export.R = 128; // real proto method for `library` \nmodule.exports = $export;\n},{\"./_core\":37,\"./_ctx\":38,\"./_global\":47,\"./_hide\":49}],45:[function(require,module,exports){\nmodule.exports = function(exec){\n  try {\n    return !!exec();\n  } catch(e){\n    return true;\n  }\n};\n},{}],46:[function(require,module,exports){\nvar ctx         = require('./_ctx')\n  , call        = require('./_iter-call')\n  , isArrayIter = require('./_is-array-iter')\n  , anObject    = require('./_an-object')\n  , toLength    = require('./_to-length')\n  , getIterFn   = require('./core.get-iterator-method')\n  , BREAK       = {}\n  , RETURN      = {};\nvar exports = module.exports = function(iterable, entries, fn, that, ITERATOR){\n  var iterFn = ITERATOR ? function(){ return iterable; } : getIterFn(iterable)\n    , f      = ctx(fn, that, entries ? 2 : 1)\n    , index  = 0\n    , length, step, iterator, result;\n  if(typeof iterFn != 'function')throw TypeError(iterable + ' is not iterable!');\n  // fast case for arrays with default iterator\n  if(isArrayIter(iterFn))for(length = toLength(iterable.length); length > index; index++){\n    result = entries ? f(anObject(step = iterable[index])[0], step[1]) : f(iterable[index]);\n    if(result === BREAK || result === RETURN)return result;\n  } else for(iterator = iterFn.call(iterable); !(step = iterator.next()).done; ){\n    result = call(iterator, f, step.value, entries);\n    if(result === BREAK || result === RETURN)return result;\n  }\n};\nexports.BREAK  = BREAK;\nexports.RETURN = RETURN;\n},{\"./_an-object\":33,\"./_ctx\":38,\"./_is-array-iter\":54,\"./_iter-call\":57,\"./_to-length\":94,\"./core.get-iterator-method\":101}],47:[function(require,module,exports){\n// https://github.com/zloirock/core-js/issues/86#issuecomment-115759028\nvar global = module.exports = typeof window != 'undefined' && window.Math == Math\n  ? window : typeof self != 'undefined' && self.Math == Math ? self : Function('return this')();\nif(typeof __g == 'number')__g = global; // eslint-disable-line no-undef\n},{}],48:[function(require,module,exports){\nvar hasOwnProperty = {}.hasOwnProperty;\nmodule.exports = function(it, key){\n  return hasOwnProperty.call(it, key);\n};\n},{}],49:[function(require,module,exports){\nvar dP         = require('./_object-dp')\n  , createDesc = require('./_property-desc');\nmodule.exports = require('./_descriptors') ? function(object, key, value){\n  return dP.f(object, key, createDesc(1, value));\n} : function(object, key, value){\n  object[key] = value;\n  return object;\n};\n},{\"./_descriptors\":40,\"./_object-dp\":69,\"./_property-desc\":80}],50:[function(require,module,exports){\nmodule.exports = require('./_global').document && document.documentElement;\n},{\"./_global\":47}],51:[function(require,module,exports){\nmodule.exports = !require('./_descriptors') && !require('./_fails')(function(){\r\n  return Object.defineProperty(require('./_dom-create')('div'), 'a', {get: function(){ return 7; }}).a != 7;\r\n});\n},{\"./_descriptors\":40,\"./_dom-create\":41,\"./_fails\":45}],52:[function(require,module,exports){\n// fast apply, http://jsperf.lnkit.com/fast-apply/5\nmodule.exports = function(fn, args, that){\n  var un = that === undefined;\n  switch(args.length){\n    case 0: return un ? fn()\n                      : fn.call(that);\n    case 1: return un ? fn(args[0])\n                      : fn.call(that, args[0]);\n    case 2: return un ? fn(args[0], args[1])\n                      : fn.call(that, args[0], args[1]);\n    case 3: return un ? fn(args[0], args[1], args[2])\n                      : fn.call(that, args[0], args[1], args[2]);\n    case 4: return un ? fn(args[0], args[1], args[2], args[3])\n                      : fn.call(that, args[0], args[1], args[2], args[3]);\n  } return              fn.apply(that, args);\n};\n},{}],53:[function(require,module,exports){\n// fallback for non-array-like ES3 and non-enumerable old V8 strings\nvar cof = require('./_cof');\nmodule.exports = Object('z').propertyIsEnumerable(0) ? Object : function(it){\n  return cof(it) == 'String' ? it.split('') : Object(it);\n};\n},{\"./_cof\":36}],54:[function(require,module,exports){\n// check on default Array iterator\nvar Iterators  = require('./_iterators')\n  , ITERATOR   = require('./_wks')('iterator')\n  , ArrayProto = Array.prototype;\n\nmodule.exports = function(it){\n  return it !== undefined && (Iterators.Array === it || ArrayProto[ITERATOR] === it);\n};\n},{\"./_iterators\":62,\"./_wks\":100}],55:[function(require,module,exports){\n// 7.2.2 IsArray(argument)\nvar cof = require('./_cof');\nmodule.exports = Array.isArray || function isArray(arg){\n  return cof(arg) == 'Array';\n};\n},{\"./_cof\":36}],56:[function(require,module,exports){\nmodule.exports = function(it){\n  return typeof it === 'object' ? it !== null : typeof it === 'function';\n};\n},{}],57:[function(require,module,exports){\n// call something on iterator step with safe closing on error\nvar anObject = require('./_an-object');\nmodule.exports = function(iterator, fn, value, entries){\n  try {\n    return entries ? fn(anObject(value)[0], value[1]) : fn(value);\n  // 7.4.6 IteratorClose(iterator, completion)\n  } catch(e){\n    var ret = iterator['return'];\n    if(ret !== undefined)anObject(ret.call(iterator));\n    throw e;\n  }\n};\n},{\"./_an-object\":33}],58:[function(require,module,exports){\n'use strict';\nvar create         = require('./_object-create')\n  , descriptor     = require('./_property-desc')\n  , setToStringTag = require('./_set-to-string-tag')\n  , IteratorPrototype = {};\n\n// 25.1.2.1.1 %IteratorPrototype%[@@iterator]()\nrequire('./_hide')(IteratorPrototype, require('./_wks')('iterator'), function(){ return this; });\n\nmodule.exports = function(Constructor, NAME, next){\n  Constructor.prototype = create(IteratorPrototype, {next: descriptor(1, next)});\n  setToStringTag(Constructor, NAME + ' Iterator');\n};\n},{\"./_hide\":49,\"./_object-create\":68,\"./_property-desc\":80,\"./_set-to-string-tag\":85,\"./_wks\":100}],59:[function(require,module,exports){\n'use strict';\nvar LIBRARY        = require('./_library')\n  , $export        = require('./_export')\n  , redefine       = require('./_redefine')\n  , hide           = require('./_hide')\n  , has            = require('./_has')\n  , Iterators      = require('./_iterators')\n  , $iterCreate    = require('./_iter-create')\n  , setToStringTag = require('./_set-to-string-tag')\n  , getPrototypeOf = require('./_object-gpo')\n  , ITERATOR       = require('./_wks')('iterator')\n  , BUGGY          = !([].keys && 'next' in [].keys()) // Safari has buggy iterators w/o `next`\n  , FF_ITERATOR    = '@@iterator'\n  , KEYS           = 'keys'\n  , VALUES         = 'values';\n\nvar returnThis = function(){ return this; };\n\nmodule.exports = function(Base, NAME, Constructor, next, DEFAULT, IS_SET, FORCED){\n  $iterCreate(Constructor, NAME, next);\n  var getMethod = function(kind){\n    if(!BUGGY && kind in proto)return proto[kind];\n    switch(kind){\n      case KEYS: return function keys(){ return new Constructor(this, kind); };\n      case VALUES: return function values(){ return new Constructor(this, kind); };\n    } return function entries(){ return new Constructor(this, kind); };\n  };\n  var TAG        = NAME + ' Iterator'\n    , DEF_VALUES = DEFAULT == VALUES\n    , VALUES_BUG = false\n    , proto      = Base.prototype\n    , $native    = proto[ITERATOR] || proto[FF_ITERATOR] || DEFAULT && proto[DEFAULT]\n    , $default   = $native || getMethod(DEFAULT)\n    , $entries   = DEFAULT ? !DEF_VALUES ? $default : getMethod('entries') : undefined\n    , $anyNative = NAME == 'Array' ? proto.entries || $native : $native\n    , methods, key, IteratorPrototype;\n  // Fix native\n  if($anyNative){\n    IteratorPrototype = getPrototypeOf($anyNative.call(new Base));\n    if(IteratorPrototype !== Object.prototype){\n      // Set @@toStringTag to native iterators\n      setToStringTag(IteratorPrototype, TAG, true);\n      // fix for some old engines\n      if(!LIBRARY && !has(IteratorPrototype, ITERATOR))hide(IteratorPrototype, ITERATOR, returnThis);\n    }\n  }\n  // fix Array#{values, @@iterator}.name in V8 / FF\n  if(DEF_VALUES && $native && $native.name !== VALUES){\n    VALUES_BUG = true;\n    $default = function values(){ return $native.call(this); };\n  }\n  // Define iterator\n  if((!LIBRARY || FORCED) && (BUGGY || VALUES_BUG || !proto[ITERATOR])){\n    hide(proto, ITERATOR, $default);\n  }\n  // Plug for library\n  Iterators[NAME] = $default;\n  Iterators[TAG]  = returnThis;\n  if(DEFAULT){\n    methods = {\n      values:  DEF_VALUES ? $default : getMethod(VALUES),\n      keys:    IS_SET     ? $default : getMethod(KEYS),\n      entries: $entries\n    };\n    if(FORCED)for(key in methods){\n      if(!(key in proto))redefine(proto, key, methods[key]);\n    } else $export($export.P + $export.F * (BUGGY || VALUES_BUG), NAME, methods);\n  }\n  return methods;\n};\n},{\"./_export\":44,\"./_has\":48,\"./_hide\":49,\"./_iter-create\":58,\"./_iterators\":62,\"./_library\":64,\"./_object-gpo\":75,\"./_redefine\":82,\"./_set-to-string-tag\":85,\"./_wks\":100}],60:[function(require,module,exports){\nvar ITERATOR     = require('./_wks')('iterator')\n  , SAFE_CLOSING = false;\n\ntry {\n  var riter = [7][ITERATOR]();\n  riter['return'] = function(){ SAFE_CLOSING = true; };\n  Array.from(riter, function(){ throw 2; });\n} catch(e){ /* empty */ }\n\nmodule.exports = function(exec, skipClosing){\n  if(!skipClosing && !SAFE_CLOSING)return false;\n  var safe = false;\n  try {\n    var arr  = [7]\n      , iter = arr[ITERATOR]();\n    iter.next = function(){ return {done: safe = true}; };\n    arr[ITERATOR] = function(){ return iter; };\n    exec(arr);\n  } catch(e){ /* empty */ }\n  return safe;\n};\n},{\"./_wks\":100}],61:[function(require,module,exports){\nmodule.exports = function(done, value){\n  return {value: value, done: !!done};\n};\n},{}],62:[function(require,module,exports){\nmodule.exports = {};\n},{}],63:[function(require,module,exports){\nvar getKeys   = require('./_object-keys')\n  , toIObject = require('./_to-iobject');\nmodule.exports = function(object, el){\n  var O      = toIObject(object)\n    , keys   = getKeys(O)\n    , length = keys.length\n    , index  = 0\n    , key;\n  while(length > index)if(O[key = keys[index++]] === el)return key;\n};\n},{\"./_object-keys\":77,\"./_to-iobject\":93}],64:[function(require,module,exports){\nmodule.exports = true;\n},{}],65:[function(require,module,exports){\nvar META     = require('./_uid')('meta')\n  , isObject = require('./_is-object')\n  , has      = require('./_has')\n  , setDesc  = require('./_object-dp').f\n  , id       = 0;\nvar isExtensible = Object.isExtensible || function(){\n  return true;\n};\nvar FREEZE = !require('./_fails')(function(){\n  return isExtensible(Object.preventExtensions({}));\n});\nvar setMeta = function(it){\n  setDesc(it, META, {value: {\n    i: 'O' + ++id, // object ID\n    w: {}          // weak collections IDs\n  }});\n};\nvar fastKey = function(it, create){\n  // return primitive with prefix\n  if(!isObject(it))return typeof it == 'symbol' ? it : (typeof it == 'string' ? 'S' : 'P') + it;\n  if(!has(it, META)){\n    // can't set metadata to uncaught frozen object\n    if(!isExtensible(it))return 'F';\n    // not necessary to add metadata\n    if(!create)return 'E';\n    // add missing metadata\n    setMeta(it);\n  // return object ID\n  } return it[META].i;\n};\nvar getWeak = function(it, create){\n  if(!has(it, META)){\n    // can't set metadata to uncaught frozen object\n    if(!isExtensible(it))return true;\n    // not necessary to add metadata\n    if(!create)return false;\n    // add missing metadata\n    setMeta(it);\n  // return hash weak collections IDs\n  } return it[META].w;\n};\n// add metadata on freeze-family methods calling\nvar onFreeze = function(it){\n  if(FREEZE && meta.NEED && isExtensible(it) && !has(it, META))setMeta(it);\n  return it;\n};\nvar meta = module.exports = {\n  KEY:      META,\n  NEED:     false,\n  fastKey:  fastKey,\n  getWeak:  getWeak,\n  onFreeze: onFreeze\n};\n},{\"./_fails\":45,\"./_has\":48,\"./_is-object\":56,\"./_object-dp\":69,\"./_uid\":97}],66:[function(require,module,exports){\nvar global    = require('./_global')\n  , macrotask = require('./_task').set\n  , Observer  = global.MutationObserver || global.WebKitMutationObserver\n  , process   = global.process\n  , Promise   = global.Promise\n  , isNode    = require('./_cof')(process) == 'process';\n\nmodule.exports = function(){\n  var head, last, notify;\n\n  var flush = function(){\n    var parent, fn;\n    if(isNode && (parent = process.domain))parent.exit();\n    while(head){\n      fn   = head.fn;\n      head = head.next;\n      try {\n        fn();\n      } catch(e){\n        if(head)notify();\n        else last = undefined;\n        throw e;\n      }\n    } last = undefined;\n    if(parent)parent.enter();\n  };\n\n  // Node.js\n  if(isNode){\n    notify = function(){\n      process.nextTick(flush);\n    };\n  // browsers with MutationObserver\n  } else if(Observer){\n    var toggle = true\n      , node   = document.createTextNode('');\n    new Observer(flush).observe(node, {characterData: true}); // eslint-disable-line no-new\n    notify = function(){\n      node.data = toggle = !toggle;\n    };\n  // environments with maybe non-completely correct, but existent Promise\n  } else if(Promise && Promise.resolve){\n    var promise = Promise.resolve();\n    notify = function(){\n      promise.then(flush);\n    };\n  // for other environments - macrotask based on:\n  // - setImmediate\n  // - MessageChannel\n  // - window.postMessag\n  // - onreadystatechange\n  // - setTimeout\n  } else {\n    notify = function(){\n      // strange IE + webpack dev server bug - use .call(global)\n      macrotask.call(global, flush);\n    };\n  }\n\n  return function(fn){\n    var task = {fn: fn, next: undefined};\n    if(last)last.next = task;\n    if(!head){\n      head = task;\n      notify();\n    } last = task;\n  };\n};\n},{\"./_cof\":36,\"./_global\":47,\"./_task\":90}],67:[function(require,module,exports){\n'use strict';\n// 19.1.2.1 Object.assign(target, source, ...)\nvar getKeys  = require('./_object-keys')\n  , gOPS     = require('./_object-gops')\n  , pIE      = require('./_object-pie')\n  , toObject = require('./_to-object')\n  , IObject  = require('./_iobject')\n  , $assign  = Object.assign;\n\n// should work with symbols and should have deterministic property order (V8 bug)\nmodule.exports = !$assign || require('./_fails')(function(){\n  var A = {}\n    , B = {}\n    , S = Symbol()\n    , K = 'abcdefghijklmnopqrst';\n  A[S] = 7;\n  K.split('').forEach(function(k){ B[k] = k; });\n  return $assign({}, A)[S] != 7 || Object.keys($assign({}, B)).join('') != K;\n}) ? function assign(target, source){ // eslint-disable-line no-unused-vars\n  var T     = toObject(target)\n    , aLen  = arguments.length\n    , index = 1\n    , getSymbols = gOPS.f\n    , isEnum     = pIE.f;\n  while(aLen > index){\n    var S      = IObject(arguments[index++])\n      , keys   = getSymbols ? getKeys(S).concat(getSymbols(S)) : getKeys(S)\n      , length = keys.length\n      , j      = 0\n      , key;\n    while(length > j)if(isEnum.call(S, key = keys[j++]))T[key] = S[key];\n  } return T;\n} : $assign;\n},{\"./_fails\":45,\"./_iobject\":53,\"./_object-gops\":74,\"./_object-keys\":77,\"./_object-pie\":78,\"./_to-object\":95}],68:[function(require,module,exports){\n// 19.1.2.2 / 15.2.3.5 Object.create(O [, Properties])\r\nvar anObject    = require('./_an-object')\r\n  , dPs         = require('./_object-dps')\r\n  , enumBugKeys = require('./_enum-bug-keys')\r\n  , IE_PROTO    = require('./_shared-key')('IE_PROTO')\r\n  , Empty       = function(){ /* empty */ }\r\n  , PROTOTYPE   = 'prototype';\r\n\r\n// Create object with fake `null` prototype: use iframe Object with cleared prototype\r\nvar createDict = function(){\r\n  // Thrash, waste and sodomy: IE GC bug\r\n  var iframe = require('./_dom-create')('iframe')\r\n    , i      = enumBugKeys.length\r\n    , gt     = '>'\r\n    , iframeDocument;\r\n  iframe.style.display = 'none';\r\n  require('./_html').appendChild(iframe);\r\n  iframe.src = 'javascript:'; // eslint-disable-line no-script-url\r\n  // createDict = iframe.contentWindow.Object;\r\n  // html.removeChild(iframe);\r\n  iframeDocument = iframe.contentWindow.document;\r\n  iframeDocument.open();\r\n  iframeDocument.write('<script>document.F=Object</script' + gt);\r\n  iframeDocument.close();\r\n  createDict = iframeDocument.F;\r\n  while(i--)delete createDict[PROTOTYPE][enumBugKeys[i]];\r\n  return createDict();\r\n};\r\n\r\nmodule.exports = Object.create || function create(O, Properties){\r\n  var result;\r\n  if(O !== null){\r\n    Empty[PROTOTYPE] = anObject(O);\r\n    result = new Empty;\r\n    Empty[PROTOTYPE] = null;\r\n    // add \"__proto__\" for Object.getPrototypeOf polyfill\r\n    result[IE_PROTO] = O;\r\n  } else result = createDict();\r\n  return Properties === undefined ? result : dPs(result, Properties);\r\n};\n},{\"./_an-object\":33,\"./_dom-create\":41,\"./_enum-bug-keys\":42,\"./_html\":50,\"./_object-dps\":70,\"./_shared-key\":86}],69:[function(require,module,exports){\nvar anObject       = require('./_an-object')\n  , IE8_DOM_DEFINE = require('./_ie8-dom-define')\n  , toPrimitive    = require('./_to-primitive')\n  , dP             = Object.defineProperty;\n\nexports.f = require('./_descriptors') ? Object.defineProperty : function defineProperty(O, P, Attributes){\n  anObject(O);\n  P = toPrimitive(P, true);\n  anObject(Attributes);\n  if(IE8_DOM_DEFINE)try {\n    return dP(O, P, Attributes);\n  } catch(e){ /* empty */ }\n  if('get' in Attributes || 'set' in Attributes)throw TypeError('Accessors not supported!');\n  if('value' in Attributes)O[P] = Attributes.value;\n  return O;\n};\n},{\"./_an-object\":33,\"./_descriptors\":40,\"./_ie8-dom-define\":51,\"./_to-primitive\":96}],70:[function(require,module,exports){\nvar dP       = require('./_object-dp')\r\n  , anObject = require('./_an-object')\r\n  , getKeys  = require('./_object-keys');\r\n\r\nmodule.exports = require('./_descriptors') ? Object.defineProperties : function defineProperties(O, Properties){\r\n  anObject(O);\r\n  var keys   = getKeys(Properties)\r\n    , length = keys.length\r\n    , i = 0\r\n    , P;\r\n  while(length > i)dP.f(O, P = keys[i++], Properties[P]);\r\n  return O;\r\n};\n},{\"./_an-object\":33,\"./_descriptors\":40,\"./_object-dp\":69,\"./_object-keys\":77}],71:[function(require,module,exports){\nvar pIE            = require('./_object-pie')\r\n  , createDesc     = require('./_property-desc')\r\n  , toIObject      = require('./_to-iobject')\r\n  , toPrimitive    = require('./_to-primitive')\r\n  , has            = require('./_has')\r\n  , IE8_DOM_DEFINE = require('./_ie8-dom-define')\r\n  , gOPD           = Object.getOwnPropertyDescriptor;\r\n\r\nexports.f = require('./_descriptors') ? gOPD : function getOwnPropertyDescriptor(O, P){\r\n  O = toIObject(O);\r\n  P = toPrimitive(P, true);\r\n  if(IE8_DOM_DEFINE)try {\r\n    return gOPD(O, P);\r\n  } catch(e){ /* empty */ }\r\n  if(has(O, P))return createDesc(!pIE.f.call(O, P), O[P]);\r\n};\n},{\"./_descriptors\":40,\"./_has\":48,\"./_ie8-dom-define\":51,\"./_object-pie\":78,\"./_property-desc\":80,\"./_to-iobject\":93,\"./_to-primitive\":96}],72:[function(require,module,exports){\n// fallback for IE11 buggy Object.getOwnPropertyNames with iframe and window\nvar toIObject = require('./_to-iobject')\n  , gOPN      = require('./_object-gopn').f\n  , toString  = {}.toString;\n\nvar windowNames = typeof window == 'object' && window && Object.getOwnPropertyNames\n  ? Object.getOwnPropertyNames(window) : [];\n\nvar getWindowNames = function(it){\n  try {\n    return gOPN(it);\n  } catch(e){\n    return windowNames.slice();\n  }\n};\n\nmodule.exports.f = function getOwnPropertyNames(it){\n  return windowNames && toString.call(it) == '[object Window]' ? getWindowNames(it) : gOPN(toIObject(it));\n};\n\n},{\"./_object-gopn\":73,\"./_to-iobject\":93}],73:[function(require,module,exports){\n// 19.1.2.7 / 15.2.3.4 Object.getOwnPropertyNames(O)\r\nvar $keys      = require('./_object-keys-internal')\r\n  , hiddenKeys = require('./_enum-bug-keys').concat('length', 'prototype');\r\n\r\nexports.f = Object.getOwnPropertyNames || function getOwnPropertyNames(O){\r\n  return $keys(O, hiddenKeys);\r\n};\n},{\"./_enum-bug-keys\":42,\"./_object-keys-internal\":76}],74:[function(require,module,exports){\nexports.f = Object.getOwnPropertySymbols;\n},{}],75:[function(require,module,exports){\n// 19.1.2.9 / 15.2.3.2 Object.getPrototypeOf(O)\r\nvar has         = require('./_has')\r\n  , toObject    = require('./_to-object')\r\n  , IE_PROTO    = require('./_shared-key')('IE_PROTO')\r\n  , ObjectProto = Object.prototype;\r\n\r\nmodule.exports = Object.getPrototypeOf || function(O){\r\n  O = toObject(O);\r\n  if(has(O, IE_PROTO))return O[IE_PROTO];\r\n  if(typeof O.constructor == 'function' && O instanceof O.constructor){\r\n    return O.constructor.prototype;\r\n  } return O instanceof Object ? ObjectProto : null;\r\n};\n},{\"./_has\":48,\"./_shared-key\":86,\"./_to-object\":95}],76:[function(require,module,exports){\nvar has          = require('./_has')\r\n  , toIObject    = require('./_to-iobject')\r\n  , arrayIndexOf = require('./_array-includes')(false)\r\n  , IE_PROTO     = require('./_shared-key')('IE_PROTO');\r\n\r\nmodule.exports = function(object, names){\r\n  var O      = toIObject(object)\r\n    , i      = 0\r\n    , result = []\r\n    , key;\r\n  for(key in O)if(key != IE_PROTO)has(O, key) && result.push(key);\r\n  // Don't enum bug & hidden keys\r\n  while(names.length > i)if(has(O, key = names[i++])){\r\n    ~arrayIndexOf(result, key) || result.push(key);\r\n  }\r\n  return result;\r\n};\n},{\"./_array-includes\":34,\"./_has\":48,\"./_shared-key\":86,\"./_to-iobject\":93}],77:[function(require,module,exports){\n// 19.1.2.14 / 15.2.3.14 Object.keys(O)\r\nvar $keys       = require('./_object-keys-internal')\r\n  , enumBugKeys = require('./_enum-bug-keys');\r\n\r\nmodule.exports = Object.keys || function keys(O){\r\n  return $keys(O, enumBugKeys);\r\n};\n},{\"./_enum-bug-keys\":42,\"./_object-keys-internal\":76}],78:[function(require,module,exports){\nexports.f = {}.propertyIsEnumerable;\n},{}],79:[function(require,module,exports){\n// most Object methods by ES6 should accept primitives\nvar $export = require('./_export')\n  , core    = require('./_core')\n  , fails   = require('./_fails');\nmodule.exports = function(KEY, exec){\n  var fn  = (core.Object || {})[KEY] || Object[KEY]\n    , exp = {};\n  exp[KEY] = exec(fn);\n  $export($export.S + $export.F * fails(function(){ fn(1); }), 'Object', exp);\n};\n},{\"./_core\":37,\"./_export\":44,\"./_fails\":45}],80:[function(require,module,exports){\nmodule.exports = function(bitmap, value){\n  return {\n    enumerable  : !(bitmap & 1),\n    configurable: !(bitmap & 2),\n    writable    : !(bitmap & 4),\n    value       : value\n  };\n};\n},{}],81:[function(require,module,exports){\nvar hide = require('./_hide');\nmodule.exports = function(target, src, safe){\n  for(var key in src){\n    if(safe && target[key])target[key] = src[key];\n    else hide(target, key, src[key]);\n  } return target;\n};\n},{\"./_hide\":49}],82:[function(require,module,exports){\nmodule.exports = require('./_hide');\n},{\"./_hide\":49}],83:[function(require,module,exports){\n// Works with __proto__ only. Old v8 can't work with null proto objects.\n/* eslint-disable no-proto */\nvar isObject = require('./_is-object')\n  , anObject = require('./_an-object');\nvar check = function(O, proto){\n  anObject(O);\n  if(!isObject(proto) && proto !== null)throw TypeError(proto + \": can't set as prototype!\");\n};\nmodule.exports = {\n  set: Object.setPrototypeOf || ('__proto__' in {} ? // eslint-disable-line\n    function(test, buggy, set){\n      try {\n        set = require('./_ctx')(Function.call, require('./_object-gopd').f(Object.prototype, '__proto__').set, 2);\n        set(test, []);\n        buggy = !(test instanceof Array);\n      } catch(e){ buggy = true; }\n      return function setPrototypeOf(O, proto){\n        check(O, proto);\n        if(buggy)O.__proto__ = proto;\n        else set(O, proto);\n        return O;\n      };\n    }({}, false) : undefined),\n  check: check\n};\n},{\"./_an-object\":33,\"./_ctx\":38,\"./_is-object\":56,\"./_object-gopd\":71}],84:[function(require,module,exports){\n'use strict';\nvar global      = require('./_global')\n  , core        = require('./_core')\n  , dP          = require('./_object-dp')\n  , DESCRIPTORS = require('./_descriptors')\n  , SPECIES     = require('./_wks')('species');\n\nmodule.exports = function(KEY){\n  var C = typeof core[KEY] == 'function' ? core[KEY] : global[KEY];\n  if(DESCRIPTORS && C && !C[SPECIES])dP.f(C, SPECIES, {\n    configurable: true,\n    get: function(){ return this; }\n  });\n};\n},{\"./_core\":37,\"./_descriptors\":40,\"./_global\":47,\"./_object-dp\":69,\"./_wks\":100}],85:[function(require,module,exports){\nvar def = require('./_object-dp').f\n  , has = require('./_has')\n  , TAG = require('./_wks')('toStringTag');\n\nmodule.exports = function(it, tag, stat){\n  if(it && !has(it = stat ? it : it.prototype, TAG))def(it, TAG, {configurable: true, value: tag});\n};\n},{\"./_has\":48,\"./_object-dp\":69,\"./_wks\":100}],86:[function(require,module,exports){\nvar shared = require('./_shared')('keys')\r\n  , uid    = require('./_uid');\r\nmodule.exports = function(key){\r\n  return shared[key] || (shared[key] = uid(key));\r\n};\n},{\"./_shared\":87,\"./_uid\":97}],87:[function(require,module,exports){\nvar global = require('./_global')\n  , SHARED = '__core-js_shared__'\n  , store  = global[SHARED] || (global[SHARED] = {});\nmodule.exports = function(key){\n  return store[key] || (store[key] = {});\n};\n},{\"./_global\":47}],88:[function(require,module,exports){\n// 7.3.20 SpeciesConstructor(O, defaultConstructor)\nvar anObject  = require('./_an-object')\n  , aFunction = require('./_a-function')\n  , SPECIES   = require('./_wks')('species');\nmodule.exports = function(O, D){\n  var C = anObject(O).constructor, S;\n  return C === undefined || (S = anObject(C)[SPECIES]) == undefined ? D : aFunction(S);\n};\n},{\"./_a-function\":30,\"./_an-object\":33,\"./_wks\":100}],89:[function(require,module,exports){\nvar toInteger = require('./_to-integer')\n  , defined   = require('./_defined');\n// true  -> String#at\n// false -> String#codePointAt\nmodule.exports = function(TO_STRING){\n  return function(that, pos){\n    var s = String(defined(that))\n      , i = toInteger(pos)\n      , l = s.length\n      , a, b;\n    if(i < 0 || i >= l)return TO_STRING ? '' : undefined;\n    a = s.charCodeAt(i);\n    return a < 0xd800 || a > 0xdbff || i + 1 === l || (b = s.charCodeAt(i + 1)) < 0xdc00 || b > 0xdfff\n      ? TO_STRING ? s.charAt(i) : a\n      : TO_STRING ? s.slice(i, i + 2) : (a - 0xd800 << 10) + (b - 0xdc00) + 0x10000;\n  };\n};\n},{\"./_defined\":39,\"./_to-integer\":92}],90:[function(require,module,exports){\nvar ctx                = require('./_ctx')\n  , invoke             = require('./_invoke')\n  , html               = require('./_html')\n  , cel                = require('./_dom-create')\n  , global             = require('./_global')\n  , process            = global.process\n  , setTask            = global.setImmediate\n  , clearTask          = global.clearImmediate\n  , MessageChannel     = global.MessageChannel\n  , counter            = 0\n  , queue              = {}\n  , ONREADYSTATECHANGE = 'onreadystatechange'\n  , defer, channel, port;\nvar run = function(){\n  var id = +this;\n  if(queue.hasOwnProperty(id)){\n    var fn = queue[id];\n    delete queue[id];\n    fn();\n  }\n};\nvar listener = function(event){\n  run.call(event.data);\n};\n// Node.js 0.9+ & IE10+ has setImmediate, otherwise:\nif(!setTask || !clearTask){\n  setTask = function setImmediate(fn){\n    var args = [], i = 1;\n    while(arguments.length > i)args.push(arguments[i++]);\n    queue[++counter] = function(){\n      invoke(typeof fn == 'function' ? fn : Function(fn), args);\n    };\n    defer(counter);\n    return counter;\n  };\n  clearTask = function clearImmediate(id){\n    delete queue[id];\n  };\n  // Node.js 0.8-\n  if(require('./_cof')(process) == 'process'){\n    defer = function(id){\n      process.nextTick(ctx(run, id, 1));\n    };\n  // Browsers with MessageChannel, includes WebWorkers\n  } else if(MessageChannel){\n    channel = new MessageChannel;\n    port    = channel.port2;\n    channel.port1.onmessage = listener;\n    defer = ctx(port.postMessage, port, 1);\n  // Browsers with postMessage, skip WebWorkers\n  // IE8 has postMessage, but it's sync & typeof its postMessage is 'object'\n  } else if(global.addEventListener && typeof postMessage == 'function' && !global.importScripts){\n    defer = function(id){\n      global.postMessage(id + '', '*');\n    };\n    global.addEventListener('message', listener, false);\n  // IE8-\n  } else if(ONREADYSTATECHANGE in cel('script')){\n    defer = function(id){\n      html.appendChild(cel('script'))[ONREADYSTATECHANGE] = function(){\n        html.removeChild(this);\n        run.call(id);\n      };\n    };\n  // Rest old browsers\n  } else {\n    defer = function(id){\n      setTimeout(ctx(run, id, 1), 0);\n    };\n  }\n}\nmodule.exports = {\n  set:   setTask,\n  clear: clearTask\n};\n},{\"./_cof\":36,\"./_ctx\":38,\"./_dom-create\":41,\"./_global\":47,\"./_html\":50,\"./_invoke\":52}],91:[function(require,module,exports){\nvar toInteger = require('./_to-integer')\n  , max       = Math.max\n  , min       = Math.min;\nmodule.exports = function(index, length){\n  index = toInteger(index);\n  return index < 0 ? max(index + length, 0) : min(index, length);\n};\n},{\"./_to-integer\":92}],92:[function(require,module,exports){\n// 7.1.4 ToInteger\nvar ceil  = Math.ceil\n  , floor = Math.floor;\nmodule.exports = function(it){\n  return isNaN(it = +it) ? 0 : (it > 0 ? floor : ceil)(it);\n};\n},{}],93:[function(require,module,exports){\n// to indexed object, toObject with fallback for non-array-like ES3 strings\nvar IObject = require('./_iobject')\n  , defined = require('./_defined');\nmodule.exports = function(it){\n  return IObject(defined(it));\n};\n},{\"./_defined\":39,\"./_iobject\":53}],94:[function(require,module,exports){\n// 7.1.15 ToLength\nvar toInteger = require('./_to-integer')\n  , min       = Math.min;\nmodule.exports = function(it){\n  return it > 0 ? min(toInteger(it), 0x1fffffffffffff) : 0; // pow(2, 53) - 1 == 9007199254740991\n};\n},{\"./_to-integer\":92}],95:[function(require,module,exports){\n// 7.1.13 ToObject(argument)\nvar defined = require('./_defined');\nmodule.exports = function(it){\n  return Object(defined(it));\n};\n},{\"./_defined\":39}],96:[function(require,module,exports){\n// 7.1.1 ToPrimitive(input [, PreferredType])\nvar isObject = require('./_is-object');\n// instead of the ES6 spec version, we didn't implement @@toPrimitive case\n// and the second argument - flag - preferred type is a string\nmodule.exports = function(it, S){\n  if(!isObject(it))return it;\n  var fn, val;\n  if(S && typeof (fn = it.toString) == 'function' && !isObject(val = fn.call(it)))return val;\n  if(typeof (fn = it.valueOf) == 'function' && !isObject(val = fn.call(it)))return val;\n  if(!S && typeof (fn = it.toString) == 'function' && !isObject(val = fn.call(it)))return val;\n  throw TypeError(\"Can't convert object to primitive value\");\n};\n},{\"./_is-object\":56}],97:[function(require,module,exports){\nvar id = 0\n  , px = Math.random();\nmodule.exports = function(key){\n  return 'Symbol('.concat(key === undefined ? '' : key, ')_', (++id + px).toString(36));\n};\n},{}],98:[function(require,module,exports){\nvar global         = require('./_global')\r\n  , core           = require('./_core')\r\n  , LIBRARY        = require('./_library')\r\n  , wksExt         = require('./_wks-ext')\r\n  , defineProperty = require('./_object-dp').f;\r\nmodule.exports = function(name){\r\n  var $Symbol = core.Symbol || (core.Symbol = LIBRARY ? {} : global.Symbol || {});\r\n  if(name.charAt(0) != '_' && !(name in $Symbol))defineProperty($Symbol, name, {value: wksExt.f(name)});\r\n};\n},{\"./_core\":37,\"./_global\":47,\"./_library\":64,\"./_object-dp\":69,\"./_wks-ext\":99}],99:[function(require,module,exports){\nexports.f = require('./_wks');\n},{\"./_wks\":100}],100:[function(require,module,exports){\nvar store      = require('./_shared')('wks')\n  , uid        = require('./_uid')\n  , Symbol     = require('./_global').Symbol\n  , USE_SYMBOL = typeof Symbol == 'function';\n\nvar $exports = module.exports = function(name){\n  return store[name] || (store[name] =\n    USE_SYMBOL && Symbol[name] || (USE_SYMBOL ? Symbol : uid)('Symbol.' + name));\n};\n\n$exports.store = store;\n},{\"./_global\":47,\"./_shared\":87,\"./_uid\":97}],101:[function(require,module,exports){\nvar classof   = require('./_classof')\n  , ITERATOR  = require('./_wks')('iterator')\n  , Iterators = require('./_iterators');\nmodule.exports = require('./_core').getIteratorMethod = function(it){\n  if(it != undefined)return it[ITERATOR]\n    || it['@@iterator']\n    || Iterators[classof(it)];\n};\n},{\"./_classof\":35,\"./_core\":37,\"./_iterators\":62,\"./_wks\":100}],102:[function(require,module,exports){\n'use strict';\nvar addToUnscopables = require('./_add-to-unscopables')\n  , step             = require('./_iter-step')\n  , Iterators        = require('./_iterators')\n  , toIObject        = require('./_to-iobject');\n\n// 22.1.3.4 Array.prototype.entries()\n// 22.1.3.13 Array.prototype.keys()\n// 22.1.3.29 Array.prototype.values()\n// 22.1.3.30 Array.prototype[@@iterator]()\nmodule.exports = require('./_iter-define')(Array, 'Array', function(iterated, kind){\n  this._t = toIObject(iterated); // target\n  this._i = 0;                   // next index\n  this._k = kind;                // kind\n// 22.1.5.2.1 %ArrayIteratorPrototype%.next()\n}, function(){\n  var O     = this._t\n    , kind  = this._k\n    , index = this._i++;\n  if(!O || index >= O.length){\n    this._t = undefined;\n    return step(1);\n  }\n  if(kind == 'keys'  )return step(0, index);\n  if(kind == 'values')return step(0, O[index]);\n  return step(0, [index, O[index]]);\n}, 'values');\n\n// argumentsList[@@iterator] is %ArrayProto_values% (9.4.4.6, 9.4.4.7)\nIterators.Arguments = Iterators.Array;\n\naddToUnscopables('keys');\naddToUnscopables('values');\naddToUnscopables('entries');\n},{\"./_add-to-unscopables\":31,\"./_iter-define\":59,\"./_iter-step\":61,\"./_iterators\":62,\"./_to-iobject\":93}],103:[function(require,module,exports){\n// 19.1.3.1 Object.assign(target, source)\nvar $export = require('./_export');\n\n$export($export.S + $export.F, 'Object', {assign: require('./_object-assign')});\n},{\"./_export\":44,\"./_object-assign\":67}],104:[function(require,module,exports){\nvar $export = require('./_export')\r\n// 19.1.2.2 / 15.2.3.5 Object.create(O [, Properties])\r\n$export($export.S, 'Object', {create: require('./_object-create')});\n},{\"./_export\":44,\"./_object-create\":68}],105:[function(require,module,exports){\nvar $export = require('./_export');\r\n// 19.1.2.4 / 15.2.3.6 Object.defineProperty(O, P, Attributes)\r\n$export($export.S + $export.F * !require('./_descriptors'), 'Object', {defineProperty: require('./_object-dp').f});\n},{\"./_descriptors\":40,\"./_export\":44,\"./_object-dp\":69}],106:[function(require,module,exports){\n// 19.1.2.9 Object.getPrototypeOf(O)\nvar toObject        = require('./_to-object')\n  , $getPrototypeOf = require('./_object-gpo');\n\nrequire('./_object-sap')('getPrototypeOf', function(){\n  return function getPrototypeOf(it){\n    return $getPrototypeOf(toObject(it));\n  };\n});\n},{\"./_object-gpo\":75,\"./_object-sap\":79,\"./_to-object\":95}],107:[function(require,module,exports){\n// 19.1.2.12 Object.isFrozen(O)\nvar isObject = require('./_is-object');\n\nrequire('./_object-sap')('isFrozen', function($isFrozen){\n  return function isFrozen(it){\n    return isObject(it) ? $isFrozen ? $isFrozen(it) : false : true;\n  };\n});\n},{\"./_is-object\":56,\"./_object-sap\":79}],108:[function(require,module,exports){\n// 19.1.2.14 Object.keys(O)\nvar toObject = require('./_to-object')\n  , $keys    = require('./_object-keys');\n\nrequire('./_object-sap')('keys', function(){\n  return function keys(it){\n    return $keys(toObject(it));\n  };\n});\n},{\"./_object-keys\":77,\"./_object-sap\":79,\"./_to-object\":95}],109:[function(require,module,exports){\n// 19.1.3.19 Object.setPrototypeOf(O, proto)\nvar $export = require('./_export');\n$export($export.S, 'Object', {setPrototypeOf: require('./_set-proto').set});\n},{\"./_export\":44,\"./_set-proto\":83}],110:[function(require,module,exports){\n\n},{}],111:[function(require,module,exports){\n'use strict';\nvar LIBRARY            = require('./_library')\n  , global             = require('./_global')\n  , ctx                = require('./_ctx')\n  , classof            = require('./_classof')\n  , $export            = require('./_export')\n  , isObject           = require('./_is-object')\n  , anObject           = require('./_an-object')\n  , aFunction          = require('./_a-function')\n  , anInstance         = require('./_an-instance')\n  , forOf              = require('./_for-of')\n  , setProto           = require('./_set-proto').set\n  , speciesConstructor = require('./_species-constructor')\n  , task               = require('./_task').set\n  , microtask          = require('./_microtask')()\n  , PROMISE            = 'Promise'\n  , TypeError          = global.TypeError\n  , process            = global.process\n  , $Promise           = global[PROMISE]\n  , process            = global.process\n  , isNode             = classof(process) == 'process'\n  , empty              = function(){ /* empty */ }\n  , Internal, GenericPromiseCapability, Wrapper;\n\nvar USE_NATIVE = !!function(){\n  try {\n    // correct subclassing with @@species support\n    var promise     = $Promise.resolve(1)\n      , FakePromise = (promise.constructor = {})[require('./_wks')('species')] = function(exec){ exec(empty, empty); };\n    // unhandled rejections tracking support, NodeJS Promise without it fails @@species test\n    return (isNode || typeof PromiseRejectionEvent == 'function') && promise.then(empty) instanceof FakePromise;\n  } catch(e){ /* empty */ }\n}();\n\n// helpers\nvar sameConstructor = function(a, b){\n  // with library wrapper special case\n  return a === b || a === $Promise && b === Wrapper;\n};\nvar isThenable = function(it){\n  var then;\n  return isObject(it) && typeof (then = it.then) == 'function' ? then : false;\n};\nvar newPromiseCapability = function(C){\n  return sameConstructor($Promise, C)\n    ? new PromiseCapability(C)\n    : new GenericPromiseCapability(C);\n};\nvar PromiseCapability = GenericPromiseCapability = function(C){\n  var resolve, reject;\n  this.promise = new C(function($$resolve, $$reject){\n    if(resolve !== undefined || reject !== undefined)throw TypeError('Bad Promise constructor');\n    resolve = $$resolve;\n    reject  = $$reject;\n  });\n  this.resolve = aFunction(resolve);\n  this.reject  = aFunction(reject);\n};\nvar perform = function(exec){\n  try {\n    exec();\n  } catch(e){\n    return {error: e};\n  }\n};\nvar notify = function(promise, isReject){\n  if(promise._n)return;\n  promise._n = true;\n  var chain = promise._c;\n  microtask(function(){\n    var value = promise._v\n      , ok    = promise._s == 1\n      , i     = 0;\n    var run = function(reaction){\n      var handler = ok ? reaction.ok : reaction.fail\n        , resolve = reaction.resolve\n        , reject  = reaction.reject\n        , domain  = reaction.domain\n        , result, then;\n      try {\n        if(handler){\n          if(!ok){\n            if(promise._h == 2)onHandleUnhandled(promise);\n            promise._h = 1;\n          }\n          if(handler === true)result = value;\n          else {\n            if(domain)domain.enter();\n            result = handler(value);\n            if(domain)domain.exit();\n          }\n          if(result === reaction.promise){\n            reject(TypeError('Promise-chain cycle'));\n          } else if(then = isThenable(result)){\n            then.call(result, resolve, reject);\n          } else resolve(result);\n        } else reject(value);\n      } catch(e){\n        reject(e);\n      }\n    };\n    while(chain.length > i)run(chain[i++]); // variable length - can't use forEach\n    promise._c = [];\n    promise._n = false;\n    if(isReject && !promise._h)onUnhandled(promise);\n  });\n};\nvar onUnhandled = function(promise){\n  task.call(global, function(){\n    var value = promise._v\n      , abrupt, handler, console;\n    if(isUnhandled(promise)){\n      abrupt = perform(function(){\n        if(isNode){\n          process.emit('unhandledRejection', value, promise);\n        } else if(handler = global.onunhandledrejection){\n          handler({promise: promise, reason: value});\n        } else if((console = global.console) && console.error){\n          console.error('Unhandled promise rejection', value);\n        }\n      });\n      // Browsers should not trigger `rejectionHandled` event if it was handled here, NodeJS - should\n      promise._h = isNode || isUnhandled(promise) ? 2 : 1;\n    } promise._a = undefined;\n    if(abrupt)throw abrupt.error;\n  });\n};\nvar isUnhandled = function(promise){\n  if(promise._h == 1)return false;\n  var chain = promise._a || promise._c\n    , i     = 0\n    , reaction;\n  while(chain.length > i){\n    reaction = chain[i++];\n    if(reaction.fail || !isUnhandled(reaction.promise))return false;\n  } return true;\n};\nvar onHandleUnhandled = function(promise){\n  task.call(global, function(){\n    var handler;\n    if(isNode){\n      process.emit('rejectionHandled', promise);\n    } else if(handler = global.onrejectionhandled){\n      handler({promise: promise, reason: promise._v});\n    }\n  });\n};\nvar $reject = function(value){\n  var promise = this;\n  if(promise._d)return;\n  promise._d = true;\n  promise = promise._w || promise; // unwrap\n  promise._v = value;\n  promise._s = 2;\n  if(!promise._a)promise._a = promise._c.slice();\n  notify(promise, true);\n};\nvar $resolve = function(value){\n  var promise = this\n    , then;\n  if(promise._d)return;\n  promise._d = true;\n  promise = promise._w || promise; // unwrap\n  try {\n    if(promise === value)throw TypeError(\"Promise can't be resolved itself\");\n    if(then = isThenable(value)){\n      microtask(function(){\n        var wrapper = {_w: promise, _d: false}; // wrap\n        try {\n          then.call(value, ctx($resolve, wrapper, 1), ctx($reject, wrapper, 1));\n        } catch(e){\n          $reject.call(wrapper, e);\n        }\n      });\n    } else {\n      promise._v = value;\n      promise._s = 1;\n      notify(promise, false);\n    }\n  } catch(e){\n    $reject.call({_w: promise, _d: false}, e); // wrap\n  }\n};\n\n// constructor polyfill\nif(!USE_NATIVE){\n  // 25.4.3.1 Promise(executor)\n  $Promise = function Promise(executor){\n    anInstance(this, $Promise, PROMISE, '_h');\n    aFunction(executor);\n    Internal.call(this);\n    try {\n      executor(ctx($resolve, this, 1), ctx($reject, this, 1));\n    } catch(err){\n      $reject.call(this, err);\n    }\n  };\n  Internal = function Promise(executor){\n    this._c = [];             // <- awaiting reactions\n    this._a = undefined;      // <- checked in isUnhandled reactions\n    this._s = 0;              // <- state\n    this._d = false;          // <- done\n    this._v = undefined;      // <- value\n    this._h = 0;              // <- rejection state, 0 - default, 1 - handled, 2 - unhandled\n    this._n = false;          // <- notify\n  };\n  Internal.prototype = require('./_redefine-all')($Promise.prototype, {\n    // 25.4.5.3 Promise.prototype.then(onFulfilled, onRejected)\n    then: function then(onFulfilled, onRejected){\n      var reaction    = newPromiseCapability(speciesConstructor(this, $Promise));\n      reaction.ok     = typeof onFulfilled == 'function' ? onFulfilled : true;\n      reaction.fail   = typeof onRejected == 'function' && onRejected;\n      reaction.domain = isNode ? process.domain : undefined;\n      this._c.push(reaction);\n      if(this._a)this._a.push(reaction);\n      if(this._s)notify(this, false);\n      return reaction.promise;\n    },\n    // 25.4.5.1 Promise.prototype.catch(onRejected)\n    'catch': function(onRejected){\n      return this.then(undefined, onRejected);\n    }\n  });\n  PromiseCapability = function(){\n    var promise  = new Internal;\n    this.promise = promise;\n    this.resolve = ctx($resolve, promise, 1);\n    this.reject  = ctx($reject, promise, 1);\n  };\n}\n\n$export($export.G + $export.W + $export.F * !USE_NATIVE, {Promise: $Promise});\nrequire('./_set-to-string-tag')($Promise, PROMISE);\nrequire('./_set-species')(PROMISE);\nWrapper = require('./_core')[PROMISE];\n\n// statics\n$export($export.S + $export.F * !USE_NATIVE, PROMISE, {\n  // 25.4.4.5 Promise.reject(r)\n  reject: function reject(r){\n    var capability = newPromiseCapability(this)\n      , $$reject   = capability.reject;\n    $$reject(r);\n    return capability.promise;\n  }\n});\n$export($export.S + $export.F * (LIBRARY || !USE_NATIVE), PROMISE, {\n  // 25.4.4.6 Promise.resolve(x)\n  resolve: function resolve(x){\n    // instanceof instead of internal slot check because we should fix it without replacement native Promise core\n    if(x instanceof $Promise && sameConstructor(x.constructor, this))return x;\n    var capability = newPromiseCapability(this)\n      , $$resolve  = capability.resolve;\n    $$resolve(x);\n    return capability.promise;\n  }\n});\n$export($export.S + $export.F * !(USE_NATIVE && require('./_iter-detect')(function(iter){\n  $Promise.all(iter)['catch'](empty);\n})), PROMISE, {\n  // 25.4.4.1 Promise.all(iterable)\n  all: function all(iterable){\n    var C          = this\n      , capability = newPromiseCapability(C)\n      , resolve    = capability.resolve\n      , reject     = capability.reject;\n    var abrupt = perform(function(){\n      var values    = []\n        , index     = 0\n        , remaining = 1;\n      forOf(iterable, false, function(promise){\n        var $index        = index++\n          , alreadyCalled = false;\n        values.push(undefined);\n        remaining++;\n        C.resolve(promise).then(function(value){\n          if(alreadyCalled)return;\n          alreadyCalled  = true;\n          values[$index] = value;\n          --remaining || resolve(values);\n        }, reject);\n      });\n      --remaining || resolve(values);\n    });\n    if(abrupt)reject(abrupt.error);\n    return capability.promise;\n  },\n  // 25.4.4.4 Promise.race(iterable)\n  race: function race(iterable){\n    var C          = this\n      , capability = newPromiseCapability(C)\n      , reject     = capability.reject;\n    var abrupt = perform(function(){\n      forOf(iterable, false, function(promise){\n        C.resolve(promise).then(capability.resolve, reject);\n      });\n    });\n    if(abrupt)reject(abrupt.error);\n    return capability.promise;\n  }\n});\n},{\"./_a-function\":30,\"./_an-instance\":32,\"./_an-object\":33,\"./_classof\":35,\"./_core\":37,\"./_ctx\":38,\"./_export\":44,\"./_for-of\":46,\"./_global\":47,\"./_is-object\":56,\"./_iter-detect\":60,\"./_library\":64,\"./_microtask\":66,\"./_redefine-all\":81,\"./_set-proto\":83,\"./_set-species\":84,\"./_set-to-string-tag\":85,\"./_species-constructor\":88,\"./_task\":90,\"./_wks\":100}],112:[function(require,module,exports){\n'use strict';\nvar $at  = require('./_string-at')(true);\n\n// 21.1.3.27 String.prototype[@@iterator]()\nrequire('./_iter-define')(String, 'String', function(iterated){\n  this._t = String(iterated); // target\n  this._i = 0;                // next index\n// 21.1.5.2.1 %StringIteratorPrototype%.next()\n}, function(){\n  var O     = this._t\n    , index = this._i\n    , point;\n  if(index >= O.length)return {value: undefined, done: true};\n  point = $at(O, index);\n  this._i += point.length;\n  return {value: point, done: false};\n});\n},{\"./_iter-define\":59,\"./_string-at\":89}],113:[function(require,module,exports){\n'use strict';\n// ECMAScript 6 symbols shim\nvar global         = require('./_global')\n  , has            = require('./_has')\n  , DESCRIPTORS    = require('./_descriptors')\n  , $export        = require('./_export')\n  , redefine       = require('./_redefine')\n  , META           = require('./_meta').KEY\n  , $fails         = require('./_fails')\n  , shared         = require('./_shared')\n  , setToStringTag = require('./_set-to-string-tag')\n  , uid            = require('./_uid')\n  , wks            = require('./_wks')\n  , wksExt         = require('./_wks-ext')\n  , wksDefine      = require('./_wks-define')\n  , keyOf          = require('./_keyof')\n  , enumKeys       = require('./_enum-keys')\n  , isArray        = require('./_is-array')\n  , anObject       = require('./_an-object')\n  , toIObject      = require('./_to-iobject')\n  , toPrimitive    = require('./_to-primitive')\n  , createDesc     = require('./_property-desc')\n  , _create        = require('./_object-create')\n  , gOPNExt        = require('./_object-gopn-ext')\n  , $GOPD          = require('./_object-gopd')\n  , $DP            = require('./_object-dp')\n  , $keys          = require('./_object-keys')\n  , gOPD           = $GOPD.f\n  , dP             = $DP.f\n  , gOPN           = gOPNExt.f\n  , $Symbol        = global.Symbol\n  , $JSON          = global.JSON\n  , _stringify     = $JSON && $JSON.stringify\n  , PROTOTYPE      = 'prototype'\n  , HIDDEN         = wks('_hidden')\n  , TO_PRIMITIVE   = wks('toPrimitive')\n  , isEnum         = {}.propertyIsEnumerable\n  , SymbolRegistry = shared('symbol-registry')\n  , AllSymbols     = shared('symbols')\n  , OPSymbols      = shared('op-symbols')\n  , ObjectProto    = Object[PROTOTYPE]\n  , USE_NATIVE     = typeof $Symbol == 'function'\n  , QObject        = global.QObject;\n// Don't use setters in Qt Script, https://github.com/zloirock/core-js/issues/173\nvar setter = !QObject || !QObject[PROTOTYPE] || !QObject[PROTOTYPE].findChild;\n\n// fallback for old Android, https://code.google.com/p/v8/issues/detail?id=687\nvar setSymbolDesc = DESCRIPTORS && $fails(function(){\n  return _create(dP({}, 'a', {\n    get: function(){ return dP(this, 'a', {value: 7}).a; }\n  })).a != 7;\n}) ? function(it, key, D){\n  var protoDesc = gOPD(ObjectProto, key);\n  if(protoDesc)delete ObjectProto[key];\n  dP(it, key, D);\n  if(protoDesc && it !== ObjectProto)dP(ObjectProto, key, protoDesc);\n} : dP;\n\nvar wrap = function(tag){\n  var sym = AllSymbols[tag] = _create($Symbol[PROTOTYPE]);\n  sym._k = tag;\n  return sym;\n};\n\nvar isSymbol = USE_NATIVE && typeof $Symbol.iterator == 'symbol' ? function(it){\n  return typeof it == 'symbol';\n} : function(it){\n  return it instanceof $Symbol;\n};\n\nvar $defineProperty = function defineProperty(it, key, D){\n  if(it === ObjectProto)$defineProperty(OPSymbols, key, D);\n  anObject(it);\n  key = toPrimitive(key, true);\n  anObject(D);\n  if(has(AllSymbols, key)){\n    if(!D.enumerable){\n      if(!has(it, HIDDEN))dP(it, HIDDEN, createDesc(1, {}));\n      it[HIDDEN][key] = true;\n    } else {\n      if(has(it, HIDDEN) && it[HIDDEN][key])it[HIDDEN][key] = false;\n      D = _create(D, {enumerable: createDesc(0, false)});\n    } return setSymbolDesc(it, key, D);\n  } return dP(it, key, D);\n};\nvar $defineProperties = function defineProperties(it, P){\n  anObject(it);\n  var keys = enumKeys(P = toIObject(P))\n    , i    = 0\n    , l = keys.length\n    , key;\n  while(l > i)$defineProperty(it, key = keys[i++], P[key]);\n  return it;\n};\nvar $create = function create(it, P){\n  return P === undefined ? _create(it) : $defineProperties(_create(it), P);\n};\nvar $propertyIsEnumerable = function propertyIsEnumerable(key){\n  var E = isEnum.call(this, key = toPrimitive(key, true));\n  if(this === ObjectProto && has(AllSymbols, key) && !has(OPSymbols, key))return false;\n  return E || !has(this, key) || !has(AllSymbols, key) || has(this, HIDDEN) && this[HIDDEN][key] ? E : true;\n};\nvar $getOwnPropertyDescriptor = function getOwnPropertyDescriptor(it, key){\n  it  = toIObject(it);\n  key = toPrimitive(key, true);\n  if(it === ObjectProto && has(AllSymbols, key) && !has(OPSymbols, key))return;\n  var D = gOPD(it, key);\n  if(D && has(AllSymbols, key) && !(has(it, HIDDEN) && it[HIDDEN][key]))D.enumerable = true;\n  return D;\n};\nvar $getOwnPropertyNames = function getOwnPropertyNames(it){\n  var names  = gOPN(toIObject(it))\n    , result = []\n    , i      = 0\n    , key;\n  while(names.length > i){\n    if(!has(AllSymbols, key = names[i++]) && key != HIDDEN && key != META)result.push(key);\n  } return result;\n};\nvar $getOwnPropertySymbols = function getOwnPropertySymbols(it){\n  var IS_OP  = it === ObjectProto\n    , names  = gOPN(IS_OP ? OPSymbols : toIObject(it))\n    , result = []\n    , i      = 0\n    , key;\n  while(names.length > i){\n    if(has(AllSymbols, key = names[i++]) && (IS_OP ? has(ObjectProto, key) : true))result.push(AllSymbols[key]);\n  } return result;\n};\n\n// 19.4.1.1 Symbol([description])\nif(!USE_NATIVE){\n  $Symbol = function Symbol(){\n    if(this instanceof $Symbol)throw TypeError('Symbol is not a constructor!');\n    var tag = uid(arguments.length > 0 ? arguments[0] : undefined);\n    var $set = function(value){\n      if(this === ObjectProto)$set.call(OPSymbols, value);\n      if(has(this, HIDDEN) && has(this[HIDDEN], tag))this[HIDDEN][tag] = false;\n      setSymbolDesc(this, tag, createDesc(1, value));\n    };\n    if(DESCRIPTORS && setter)setSymbolDesc(ObjectProto, tag, {configurable: true, set: $set});\n    return wrap(tag);\n  };\n  redefine($Symbol[PROTOTYPE], 'toString', function toString(){\n    return this._k;\n  });\n\n  $GOPD.f = $getOwnPropertyDescriptor;\n  $DP.f   = $defineProperty;\n  require('./_object-gopn').f = gOPNExt.f = $getOwnPropertyNames;\n  require('./_object-pie').f  = $propertyIsEnumerable;\n  require('./_object-gops').f = $getOwnPropertySymbols;\n\n  if(DESCRIPTORS && !require('./_library')){\n    redefine(ObjectProto, 'propertyIsEnumerable', $propertyIsEnumerable, true);\n  }\n\n  wksExt.f = function(name){\n    return wrap(wks(name));\n  }\n}\n\n$export($export.G + $export.W + $export.F * !USE_NATIVE, {Symbol: $Symbol});\n\nfor(var symbols = (\n  // 19.4.2.2, 19.4.2.3, 19.4.2.4, 19.4.2.6, 19.4.2.8, 19.4.2.9, 19.4.2.10, 19.4.2.11, 19.4.2.12, 19.4.2.13, 19.4.2.14\n  'hasInstance,isConcatSpreadable,iterator,match,replace,search,species,split,toPrimitive,toStringTag,unscopables'\n).split(','), i = 0; symbols.length > i; )wks(symbols[i++]);\n\nfor(var symbols = $keys(wks.store), i = 0; symbols.length > i; )wksDefine(symbols[i++]);\n\n$export($export.S + $export.F * !USE_NATIVE, 'Symbol', {\n  // 19.4.2.1 Symbol.for(key)\n  'for': function(key){\n    return has(SymbolRegistry, key += '')\n      ? SymbolRegistry[key]\n      : SymbolRegistry[key] = $Symbol(key);\n  },\n  // 19.4.2.5 Symbol.keyFor(sym)\n  keyFor: function keyFor(key){\n    if(isSymbol(key))return keyOf(SymbolRegistry, key);\n    throw TypeError(key + ' is not a symbol!');\n  },\n  useSetter: function(){ setter = true; },\n  useSimple: function(){ setter = false; }\n});\n\n$export($export.S + $export.F * !USE_NATIVE, 'Object', {\n  // 19.1.2.2 Object.create(O [, Properties])\n  create: $create,\n  // 19.1.2.4 Object.defineProperty(O, P, Attributes)\n  defineProperty: $defineProperty,\n  // 19.1.2.3 Object.defineProperties(O, Properties)\n  defineProperties: $defineProperties,\n  // 19.1.2.6 Object.getOwnPropertyDescriptor(O, P)\n  getOwnPropertyDescriptor: $getOwnPropertyDescriptor,\n  // 19.1.2.7 Object.getOwnPropertyNames(O)\n  getOwnPropertyNames: $getOwnPropertyNames,\n  // 19.1.2.8 Object.getOwnPropertySymbols(O)\n  getOwnPropertySymbols: $getOwnPropertySymbols\n});\n\n// 24.3.2 JSON.stringify(value [, replacer [, space]])\n$JSON && $export($export.S + $export.F * (!USE_NATIVE || $fails(function(){\n  var S = $Symbol();\n  // MS Edge converts symbol values to JSON as {}\n  // WebKit converts symbol values to JSON as null\n  // V8 throws on boxed symbols\n  return _stringify([S]) != '[null]' || _stringify({a: S}) != '{}' || _stringify(Object(S)) != '{}';\n})), 'JSON', {\n  stringify: function stringify(it){\n    if(it === undefined || isSymbol(it))return; // IE8 returns string on undefined\n    var args = [it]\n      , i    = 1\n      , replacer, $replacer;\n    while(arguments.length > i)args.push(arguments[i++]);\n    replacer = args[1];\n    if(typeof replacer == 'function')$replacer = replacer;\n    if($replacer || !isArray(replacer))replacer = function(key, value){\n      if($replacer)value = $replacer.call(this, key, value);\n      if(!isSymbol(value))return value;\n    };\n    args[1] = replacer;\n    return _stringify.apply($JSON, args);\n  }\n});\n\n// 19.4.3.4 Symbol.prototype[@@toPrimitive](hint)\n$Symbol[PROTOTYPE][TO_PRIMITIVE] || require('./_hide')($Symbol[PROTOTYPE], TO_PRIMITIVE, $Symbol[PROTOTYPE].valueOf);\n// 19.4.3.5 Symbol.prototype[@@toStringTag]\nsetToStringTag($Symbol, 'Symbol');\n// 20.2.1.9 Math[@@toStringTag]\nsetToStringTag(Math, 'Math', true);\n// 24.3.3 JSON[@@toStringTag]\nsetToStringTag(global.JSON, 'JSON', true);\n},{\"./_an-object\":33,\"./_descriptors\":40,\"./_enum-keys\":43,\"./_export\":44,\"./_fails\":45,\"./_global\":47,\"./_has\":48,\"./_hide\":49,\"./_is-array\":55,\"./_keyof\":63,\"./_library\":64,\"./_meta\":65,\"./_object-create\":68,\"./_object-dp\":69,\"./_object-gopd\":71,\"./_object-gopn\":73,\"./_object-gopn-ext\":72,\"./_object-gops\":74,\"./_object-keys\":77,\"./_object-pie\":78,\"./_property-desc\":80,\"./_redefine\":82,\"./_set-to-string-tag\":85,\"./_shared\":87,\"./_to-iobject\":93,\"./_to-primitive\":96,\"./_uid\":97,\"./_wks\":100,\"./_wks-define\":98,\"./_wks-ext\":99}],114:[function(require,module,exports){\nrequire('./_wks-define')('asyncIterator');\n},{\"./_wks-define\":98}],115:[function(require,module,exports){\nrequire('./_wks-define')('observable');\n},{\"./_wks-define\":98}],116:[function(require,module,exports){\nrequire('./es6.array.iterator');\nvar global        = require('./_global')\n  , hide          = require('./_hide')\n  , Iterators     = require('./_iterators')\n  , TO_STRING_TAG = require('./_wks')('toStringTag');\n\nfor(var collections = ['NodeList', 'DOMTokenList', 'MediaList', 'StyleSheetList', 'CSSRuleList'], i = 0; i < 5; i++){\n  var NAME       = collections[i]\n    , Collection = global[NAME]\n    , proto      = Collection && Collection.prototype;\n  if(proto && !proto[TO_STRING_TAG])hide(proto, TO_STRING_TAG, NAME);\n  Iterators[NAME] = Iterators.Array;\n}\n},{\"./_global\":47,\"./_hide\":49,\"./_iterators\":62,\"./_wks\":100,\"./es6.array.iterator\":102}],117:[function(require,module,exports){\narguments[4][30][0].apply(exports,arguments)\n},{\"dup\":30}],118:[function(require,module,exports){\nvar cof = require('./_cof');\r\nmodule.exports = function(it, msg){\r\n  if(typeof it != 'number' && cof(it) != 'Number')throw TypeError(msg);\r\n  return +it;\r\n};\n},{\"./_cof\":132}],119:[function(require,module,exports){\n// 22.1.3.31 Array.prototype[@@unscopables]\nvar UNSCOPABLES = require('./_wks')('unscopables')\n  , ArrayProto  = Array.prototype;\nif(ArrayProto[UNSCOPABLES] == undefined)require('./_hide')(ArrayProto, UNSCOPABLES, {});\nmodule.exports = function(key){\n  ArrayProto[UNSCOPABLES][key] = true;\n};\n},{\"./_hide\":154,\"./_wks\":231}],120:[function(require,module,exports){\narguments[4][32][0].apply(exports,arguments)\n},{\"dup\":32}],121:[function(require,module,exports){\narguments[4][33][0].apply(exports,arguments)\n},{\"./_is-object\":163,\"dup\":33}],122:[function(require,module,exports){\n// 22.1.3.3 Array.prototype.copyWithin(target, start, end = this.length)\n'use strict';\nvar toObject = require('./_to-object')\n  , toIndex  = require('./_to-index')\n  , toLength = require('./_to-length');\n\nmodule.exports = [].copyWithin || function copyWithin(target/*= 0*/, start/*= 0, end = @length*/){\n  var O     = toObject(this)\n    , len   = toLength(O.length)\n    , to    = toIndex(target, len)\n    , from  = toIndex(start, len)\n    , end   = arguments.length > 2 ? arguments[2] : undefined\n    , count = Math.min((end === undefined ? len : toIndex(end, len)) - from, len - to)\n    , inc   = 1;\n  if(from < to && to < from + count){\n    inc  = -1;\n    from += count - 1;\n    to   += count - 1;\n  }\n  while(count-- > 0){\n    if(from in O)O[to] = O[from];\n    else delete O[to];\n    to   += inc;\n    from += inc;\n  } return O;\n};\n},{\"./_to-index\":219,\"./_to-length\":222,\"./_to-object\":223}],123:[function(require,module,exports){\n// 22.1.3.6 Array.prototype.fill(value, start = 0, end = this.length)\n'use strict';\nvar toObject = require('./_to-object')\n  , toIndex  = require('./_to-index')\n  , toLength = require('./_to-length');\nmodule.exports = function fill(value /*, start = 0, end = @length */){\n  var O      = toObject(this)\n    , length = toLength(O.length)\n    , aLen   = arguments.length\n    , index  = toIndex(aLen > 1 ? arguments[1] : undefined, length)\n    , end    = aLen > 2 ? arguments[2] : undefined\n    , endPos = end === undefined ? length : toIndex(end, length);\n  while(endPos > index)O[index++] = value;\n  return O;\n};\n},{\"./_to-index\":219,\"./_to-length\":222,\"./_to-object\":223}],124:[function(require,module,exports){\nvar forOf = require('./_for-of');\n\nmodule.exports = function(iter, ITERATOR){\n  var result = [];\n  forOf(iter, false, result.push, result, ITERATOR);\n  return result;\n};\n\n},{\"./_for-of\":151}],125:[function(require,module,exports){\narguments[4][34][0].apply(exports,arguments)\n},{\"./_to-index\":219,\"./_to-iobject\":221,\"./_to-length\":222,\"dup\":34}],126:[function(require,module,exports){\n// 0 -> Array#forEach\n// 1 -> Array#map\n// 2 -> Array#filter\n// 3 -> Array#some\n// 4 -> Array#every\n// 5 -> Array#find\n// 6 -> Array#findIndex\nvar ctx      = require('./_ctx')\n  , IObject  = require('./_iobject')\n  , toObject = require('./_to-object')\n  , toLength = require('./_to-length')\n  , asc      = require('./_array-species-create');\nmodule.exports = function(TYPE, $create){\n  var IS_MAP        = TYPE == 1\n    , IS_FILTER     = TYPE == 2\n    , IS_SOME       = TYPE == 3\n    , IS_EVERY      = TYPE == 4\n    , IS_FIND_INDEX = TYPE == 6\n    , NO_HOLES      = TYPE == 5 || IS_FIND_INDEX\n    , create        = $create || asc;\n  return function($this, callbackfn, that){\n    var O      = toObject($this)\n      , self   = IObject(O)\n      , f      = ctx(callbackfn, that, 3)\n      , length = toLength(self.length)\n      , index  = 0\n      , result = IS_MAP ? create($this, length) : IS_FILTER ? create($this, 0) : undefined\n      , val, res;\n    for(;length > index; index++)if(NO_HOLES || index in self){\n      val = self[index];\n      res = f(val, index, O);\n      if(TYPE){\n        if(IS_MAP)result[index] = res;            // map\n        else if(res)switch(TYPE){\n          case 3: return true;                    // some\n          case 5: return val;                     // find\n          case 6: return index;                   // findIndex\n          case 2: result.push(val);               // filter\n        } else if(IS_EVERY)return false;          // every\n      }\n    }\n    return IS_FIND_INDEX ? -1 : IS_SOME || IS_EVERY ? IS_EVERY : result;\n  };\n};\n},{\"./_array-species-create\":129,\"./_ctx\":139,\"./_iobject\":159,\"./_to-length\":222,\"./_to-object\":223}],127:[function(require,module,exports){\nvar aFunction = require('./_a-function')\r\n  , toObject  = require('./_to-object')\r\n  , IObject   = require('./_iobject')\r\n  , toLength  = require('./_to-length');\r\n\r\nmodule.exports = function(that, callbackfn, aLen, memo, isRight){\r\n  aFunction(callbackfn);\r\n  var O      = toObject(that)\r\n    , self   = IObject(O)\r\n    , length = toLength(O.length)\r\n    , index  = isRight ? length - 1 : 0\r\n    , i      = isRight ? -1 : 1;\r\n  if(aLen < 2)for(;;){\r\n    if(index in self){\r\n      memo = self[index];\r\n      index += i;\r\n      break;\r\n    }\r\n    index += i;\r\n    if(isRight ? index < 0 : length <= index){\r\n      throw TypeError('Reduce of empty array with no initial value');\r\n    }\r\n  }\r\n  for(;isRight ? index >= 0 : length > index; index += i)if(index in self){\r\n    memo = callbackfn(memo, self[index], index, O);\r\n  }\r\n  return memo;\r\n};\n},{\"./_a-function\":117,\"./_iobject\":159,\"./_to-length\":222,\"./_to-object\":223}],128:[function(require,module,exports){\nvar isObject = require('./_is-object')\r\n  , isArray  = require('./_is-array')\r\n  , SPECIES  = require('./_wks')('species');\r\n\r\nmodule.exports = function(original){\r\n  var C;\r\n  if(isArray(original)){\r\n    C = original.constructor;\r\n    // cross-realm fallback\r\n    if(typeof C == 'function' && (C === Array || isArray(C.prototype)))C = undefined;\r\n    if(isObject(C)){\r\n      C = C[SPECIES];\r\n      if(C === null)C = undefined;\r\n    }\r\n  } return C === undefined ? Array : C;\r\n};\n},{\"./_is-array\":161,\"./_is-object\":163,\"./_wks\":231}],129:[function(require,module,exports){\n// 9.4.2.3 ArraySpeciesCreate(originalArray, length)\nvar speciesConstructor = require('./_array-species-constructor');\n\nmodule.exports = function(original, length){\n  return new (speciesConstructor(original))(length);\n};\n},{\"./_array-species-constructor\":128}],130:[function(require,module,exports){\n'use strict';\nvar aFunction  = require('./_a-function')\n  , isObject   = require('./_is-object')\n  , invoke     = require('./_invoke')\n  , arraySlice = [].slice\n  , factories  = {};\n\nvar construct = function(F, len, args){\n  if(!(len in factories)){\n    for(var n = [], i = 0; i < len; i++)n[i] = 'a[' + i + ']';\n    factories[len] = Function('F,a', 'return new F(' + n.join(',') + ')');\n  } return factories[len](F, args);\n};\n\nmodule.exports = Function.bind || function bind(that /*, args... */){\n  var fn       = aFunction(this)\n    , partArgs = arraySlice.call(arguments, 1);\n  var bound = function(/* args... */){\n    var args = partArgs.concat(arraySlice.call(arguments));\n    return this instanceof bound ? construct(fn, args.length, args) : invoke(fn, args, that);\n  };\n  if(isObject(fn.prototype))bound.prototype = fn.prototype;\n  return bound;\n};\n},{\"./_a-function\":117,\"./_invoke\":158,\"./_is-object\":163}],131:[function(require,module,exports){\narguments[4][35][0].apply(exports,arguments)\n},{\"./_cof\":132,\"./_wks\":231,\"dup\":35}],132:[function(require,module,exports){\narguments[4][36][0].apply(exports,arguments)\n},{\"dup\":36}],133:[function(require,module,exports){\n'use strict';\nvar dP          = require('./_object-dp').f\n  , create      = require('./_object-create')\n  , hide        = require('./_hide')\n  , redefineAll = require('./_redefine-all')\n  , ctx         = require('./_ctx')\n  , anInstance  = require('./_an-instance')\n  , defined     = require('./_defined')\n  , forOf       = require('./_for-of')\n  , $iterDefine = require('./_iter-define')\n  , step        = require('./_iter-step')\n  , setSpecies  = require('./_set-species')\n  , DESCRIPTORS = require('./_descriptors')\n  , fastKey     = require('./_meta').fastKey\n  , SIZE        = DESCRIPTORS ? '_s' : 'size';\n\nvar getEntry = function(that, key){\n  // fast case\n  var index = fastKey(key), entry;\n  if(index !== 'F')return that._i[index];\n  // frozen object case\n  for(entry = that._f; entry; entry = entry.n){\n    if(entry.k == key)return entry;\n  }\n};\n\nmodule.exports = {\n  getConstructor: function(wrapper, NAME, IS_MAP, ADDER){\n    var C = wrapper(function(that, iterable){\n      anInstance(that, C, NAME, '_i');\n      that._i = create(null); // index\n      that._f = undefined;    // first entry\n      that._l = undefined;    // last entry\n      that[SIZE] = 0;         // size\n      if(iterable != undefined)forOf(iterable, IS_MAP, that[ADDER], that);\n    });\n    redefineAll(C.prototype, {\n      // 23.1.3.1 Map.prototype.clear()\n      // 23.2.3.2 Set.prototype.clear()\n      clear: function clear(){\n        for(var that = this, data = that._i, entry = that._f; entry; entry = entry.n){\n          entry.r = true;\n          if(entry.p)entry.p = entry.p.n = undefined;\n          delete data[entry.i];\n        }\n        that._f = that._l = undefined;\n        that[SIZE] = 0;\n      },\n      // 23.1.3.3 Map.prototype.delete(key)\n      // 23.2.3.4 Set.prototype.delete(value)\n      'delete': function(key){\n        var that  = this\n          , entry = getEntry(that, key);\n        if(entry){\n          var next = entry.n\n            , prev = entry.p;\n          delete that._i[entry.i];\n          entry.r = true;\n          if(prev)prev.n = next;\n          if(next)next.p = prev;\n          if(that._f == entry)that._f = next;\n          if(that._l == entry)that._l = prev;\n          that[SIZE]--;\n        } return !!entry;\n      },\n      // 23.2.3.6 Set.prototype.forEach(callbackfn, thisArg = undefined)\n      // 23.1.3.5 Map.prototype.forEach(callbackfn, thisArg = undefined)\n      forEach: function forEach(callbackfn /*, that = undefined */){\n        anInstance(this, C, 'forEach');\n        var f = ctx(callbackfn, arguments.length > 1 ? arguments[1] : undefined, 3)\n          , entry;\n        while(entry = entry ? entry.n : this._f){\n          f(entry.v, entry.k, this);\n          // revert to the last existing entry\n          while(entry && entry.r)entry = entry.p;\n        }\n      },\n      // 23.1.3.7 Map.prototype.has(key)\n      // 23.2.3.7 Set.prototype.has(value)\n      has: function has(key){\n        return !!getEntry(this, key);\n      }\n    });\n    if(DESCRIPTORS)dP(C.prototype, 'size', {\n      get: function(){\n        return defined(this[SIZE]);\n      }\n    });\n    return C;\n  },\n  def: function(that, key, value){\n    var entry = getEntry(that, key)\n      , prev, index;\n    // change existing entry\n    if(entry){\n      entry.v = value;\n    // create new entry\n    } else {\n      that._l = entry = {\n        i: index = fastKey(key, true), // <- index\n        k: key,                        // <- key\n        v: value,                      // <- value\n        p: prev = that._l,             // <- previous entry\n        n: undefined,                  // <- next entry\n        r: false                       // <- removed\n      };\n      if(!that._f)that._f = entry;\n      if(prev)prev.n = entry;\n      that[SIZE]++;\n      // add to index\n      if(index !== 'F')that._i[index] = entry;\n    } return that;\n  },\n  getEntry: getEntry,\n  setStrong: function(C, NAME, IS_MAP){\n    // add .keys, .values, .entries, [@@iterator]\n    // 23.1.3.4, 23.1.3.8, 23.1.3.11, 23.1.3.12, 23.2.3.5, 23.2.3.8, 23.2.3.10, 23.2.3.11\n    $iterDefine(C, NAME, function(iterated, kind){\n      this._t = iterated;  // target\n      this._k = kind;      // kind\n      this._l = undefined; // previous\n    }, function(){\n      var that  = this\n        , kind  = that._k\n        , entry = that._l;\n      // revert to the last existing entry\n      while(entry && entry.r)entry = entry.p;\n      // get next entry\n      if(!that._t || !(that._l = entry = entry ? entry.n : that._t._f)){\n        // or finish the iteration\n        that._t = undefined;\n        return step(1);\n      }\n      // return step by kind\n      if(kind == 'keys'  )return step(0, entry.k);\n      if(kind == 'values')return step(0, entry.v);\n      return step(0, [entry.k, entry.v]);\n    }, IS_MAP ? 'entries' : 'values' , !IS_MAP, true);\n\n    // add [@@species], 23.1.2.2, 23.2.2.2\n    setSpecies(NAME);\n  }\n};\n},{\"./_an-instance\":120,\"./_ctx\":139,\"./_defined\":141,\"./_descriptors\":142,\"./_for-of\":151,\"./_hide\":154,\"./_iter-define\":167,\"./_iter-step\":169,\"./_meta\":176,\"./_object-create\":180,\"./_object-dp\":181,\"./_redefine-all\":200,\"./_set-species\":205}],134:[function(require,module,exports){\n// https://github.com/DavidBruant/Map-Set.prototype.toJSON\nvar classof = require('./_classof')\n  , from    = require('./_array-from-iterable');\nmodule.exports = function(NAME){\n  return function toJSON(){\n    if(classof(this) != NAME)throw TypeError(NAME + \"#toJSON isn't generic\");\n    return from(this);\n  };\n};\n},{\"./_array-from-iterable\":124,\"./_classof\":131}],135:[function(require,module,exports){\n'use strict';\nvar redefineAll       = require('./_redefine-all')\n  , getWeak           = require('./_meta').getWeak\n  , anObject          = require('./_an-object')\n  , isObject          = require('./_is-object')\n  , anInstance        = require('./_an-instance')\n  , forOf             = require('./_for-of')\n  , createArrayMethod = require('./_array-methods')\n  , $has              = require('./_has')\n  , arrayFind         = createArrayMethod(5)\n  , arrayFindIndex    = createArrayMethod(6)\n  , id                = 0;\n\n// fallback for uncaught frozen keys\nvar uncaughtFrozenStore = function(that){\n  return that._l || (that._l = new UncaughtFrozenStore);\n};\nvar UncaughtFrozenStore = function(){\n  this.a = [];\n};\nvar findUncaughtFrozen = function(store, key){\n  return arrayFind(store.a, function(it){\n    return it[0] === key;\n  });\n};\nUncaughtFrozenStore.prototype = {\n  get: function(key){\n    var entry = findUncaughtFrozen(this, key);\n    if(entry)return entry[1];\n  },\n  has: function(key){\n    return !!findUncaughtFrozen(this, key);\n  },\n  set: function(key, value){\n    var entry = findUncaughtFrozen(this, key);\n    if(entry)entry[1] = value;\n    else this.a.push([key, value]);\n  },\n  'delete': function(key){\n    var index = arrayFindIndex(this.a, function(it){\n      return it[0] === key;\n    });\n    if(~index)this.a.splice(index, 1);\n    return !!~index;\n  }\n};\n\nmodule.exports = {\n  getConstructor: function(wrapper, NAME, IS_MAP, ADDER){\n    var C = wrapper(function(that, iterable){\n      anInstance(that, C, NAME, '_i');\n      that._i = id++;      // collection id\n      that._l = undefined; // leak store for uncaught frozen objects\n      if(iterable != undefined)forOf(iterable, IS_MAP, that[ADDER], that);\n    });\n    redefineAll(C.prototype, {\n      // 23.3.3.2 WeakMap.prototype.delete(key)\n      // 23.4.3.3 WeakSet.prototype.delete(value)\n      'delete': function(key){\n        if(!isObject(key))return false;\n        var data = getWeak(key);\n        if(data === true)return uncaughtFrozenStore(this)['delete'](key);\n        return data && $has(data, this._i) && delete data[this._i];\n      },\n      // 23.3.3.4 WeakMap.prototype.has(key)\n      // 23.4.3.4 WeakSet.prototype.has(value)\n      has: function has(key){\n        if(!isObject(key))return false;\n        var data = getWeak(key);\n        if(data === true)return uncaughtFrozenStore(this).has(key);\n        return data && $has(data, this._i);\n      }\n    });\n    return C;\n  },\n  def: function(that, key, value){\n    var data = getWeak(anObject(key), true);\n    if(data === true)uncaughtFrozenStore(that).set(key, value);\n    else data[that._i] = value;\n    return that;\n  },\n  ufstore: uncaughtFrozenStore\n};\n},{\"./_an-instance\":120,\"./_an-object\":121,\"./_array-methods\":126,\"./_for-of\":151,\"./_has\":153,\"./_is-object\":163,\"./_meta\":176,\"./_redefine-all\":200}],136:[function(require,module,exports){\n'use strict';\nvar global            = require('./_global')\n  , $export           = require('./_export')\n  , redefine          = require('./_redefine')\n  , redefineAll       = require('./_redefine-all')\n  , meta              = require('./_meta')\n  , forOf             = require('./_for-of')\n  , anInstance        = require('./_an-instance')\n  , isObject          = require('./_is-object')\n  , fails             = require('./_fails')\n  , $iterDetect       = require('./_iter-detect')\n  , setToStringTag    = require('./_set-to-string-tag')\n  , inheritIfRequired = require('./_inherit-if-required');\n\nmodule.exports = function(NAME, wrapper, methods, common, IS_MAP, IS_WEAK){\n  var Base  = global[NAME]\n    , C     = Base\n    , ADDER = IS_MAP ? 'set' : 'add'\n    , proto = C && C.prototype\n    , O     = {};\n  var fixMethod = function(KEY){\n    var fn = proto[KEY];\n    redefine(proto, KEY,\n      KEY == 'delete' ? function(a){\n        return IS_WEAK && !isObject(a) ? false : fn.call(this, a === 0 ? 0 : a);\n      } : KEY == 'has' ? function has(a){\n        return IS_WEAK && !isObject(a) ? false : fn.call(this, a === 0 ? 0 : a);\n      } : KEY == 'get' ? function get(a){\n        return IS_WEAK && !isObject(a) ? undefined : fn.call(this, a === 0 ? 0 : a);\n      } : KEY == 'add' ? function add(a){ fn.call(this, a === 0 ? 0 : a); return this; }\n        : function set(a, b){ fn.call(this, a === 0 ? 0 : a, b); return this; }\n    );\n  };\n  if(typeof C != 'function' || !(IS_WEAK || proto.forEach && !fails(function(){\n    new C().entries().next();\n  }))){\n    // create collection constructor\n    C = common.getConstructor(wrapper, NAME, IS_MAP, ADDER);\n    redefineAll(C.prototype, methods);\n    meta.NEED = true;\n  } else {\n    var instance             = new C\n      // early implementations not supports chaining\n      , HASNT_CHAINING       = instance[ADDER](IS_WEAK ? {} : -0, 1) != instance\n      // V8 ~  Chromium 40- weak-collections throws on primitives, but should return false\n      , THROWS_ON_PRIMITIVES = fails(function(){ instance.has(1); })\n      // most early implementations doesn't supports iterables, most modern - not close it correctly\n      , ACCEPT_ITERABLES     = $iterDetect(function(iter){ new C(iter); }) // eslint-disable-line no-new\n      // for early implementations -0 and +0 not the same\n      , BUGGY_ZERO = !IS_WEAK && fails(function(){\n        // V8 ~ Chromium 42- fails only with 5+ elements\n        var $instance = new C()\n          , index     = 5;\n        while(index--)$instance[ADDER](index, index);\n        return !$instance.has(-0);\n      });\n    if(!ACCEPT_ITERABLES){ \n      C = wrapper(function(target, iterable){\n        anInstance(target, C, NAME);\n        var that = inheritIfRequired(new Base, target, C);\n        if(iterable != undefined)forOf(iterable, IS_MAP, that[ADDER], that);\n        return that;\n      });\n      C.prototype = proto;\n      proto.constructor = C;\n    }\n    if(THROWS_ON_PRIMITIVES || BUGGY_ZERO){\n      fixMethod('delete');\n      fixMethod('has');\n      IS_MAP && fixMethod('get');\n    }\n    if(BUGGY_ZERO || HASNT_CHAINING)fixMethod(ADDER);\n    // weak collections should not contains .clear method\n    if(IS_WEAK && proto.clear)delete proto.clear;\n  }\n\n  setToStringTag(C, NAME);\n\n  O[NAME] = C;\n  $export($export.G + $export.W + $export.F * (C != Base), O);\n\n  if(!IS_WEAK)common.setStrong(C, NAME, IS_MAP);\n\n  return C;\n};\n},{\"./_an-instance\":120,\"./_export\":146,\"./_fails\":148,\"./_for-of\":151,\"./_global\":152,\"./_inherit-if-required\":157,\"./_is-object\":163,\"./_iter-detect\":168,\"./_meta\":176,\"./_redefine\":201,\"./_redefine-all\":200,\"./_set-to-string-tag\":206}],137:[function(require,module,exports){\narguments[4][37][0].apply(exports,arguments)\n},{\"dup\":37}],138:[function(require,module,exports){\n'use strict';\r\nvar $defineProperty = require('./_object-dp')\r\n  , createDesc      = require('./_property-desc');\r\n\r\nmodule.exports = function(object, index, value){\r\n  if(index in object)$defineProperty.f(object, index, createDesc(0, value));\r\n  else object[index] = value;\r\n};\n},{\"./_object-dp\":181,\"./_property-desc\":199}],139:[function(require,module,exports){\narguments[4][38][0].apply(exports,arguments)\n},{\"./_a-function\":117,\"dup\":38}],140:[function(require,module,exports){\n'use strict';\r\nvar anObject    = require('./_an-object')\r\n  , toPrimitive = require('./_to-primitive')\r\n  , NUMBER      = 'number';\r\n\r\nmodule.exports = function(hint){\r\n  if(hint !== 'string' && hint !== NUMBER && hint !== 'default')throw TypeError('Incorrect hint');\r\n  return toPrimitive(anObject(this), hint != NUMBER);\r\n};\n},{\"./_an-object\":121,\"./_to-primitive\":224}],141:[function(require,module,exports){\narguments[4][39][0].apply(exports,arguments)\n},{\"dup\":39}],142:[function(require,module,exports){\narguments[4][40][0].apply(exports,arguments)\n},{\"./_fails\":148,\"dup\":40}],143:[function(require,module,exports){\narguments[4][41][0].apply(exports,arguments)\n},{\"./_global\":152,\"./_is-object\":163,\"dup\":41}],144:[function(require,module,exports){\narguments[4][42][0].apply(exports,arguments)\n},{\"dup\":42}],145:[function(require,module,exports){\narguments[4][43][0].apply(exports,arguments)\n},{\"./_object-gops\":187,\"./_object-keys\":190,\"./_object-pie\":191,\"dup\":43}],146:[function(require,module,exports){\nvar global    = require('./_global')\n  , core      = require('./_core')\n  , hide      = require('./_hide')\n  , redefine  = require('./_redefine')\n  , ctx       = require('./_ctx')\n  , PROTOTYPE = 'prototype';\n\nvar $export = function(type, name, source){\n  var IS_FORCED = type & $export.F\n    , IS_GLOBAL = type & $export.G\n    , IS_STATIC = type & $export.S\n    , IS_PROTO  = type & $export.P\n    , IS_BIND   = type & $export.B\n    , target    = IS_GLOBAL ? global : IS_STATIC ? global[name] || (global[name] = {}) : (global[name] || {})[PROTOTYPE]\n    , exports   = IS_GLOBAL ? core : core[name] || (core[name] = {})\n    , expProto  = exports[PROTOTYPE] || (exports[PROTOTYPE] = {})\n    , key, own, out, exp;\n  if(IS_GLOBAL)source = name;\n  for(key in source){\n    // contains in native\n    own = !IS_FORCED && target && target[key] !== undefined;\n    // export native or passed\n    out = (own ? target : source)[key];\n    // bind timers to global for call from export context\n    exp = IS_BIND && own ? ctx(out, global) : IS_PROTO && typeof out == 'function' ? ctx(Function.call, out) : out;\n    // extend global\n    if(target)redefine(target, key, out, type & $export.U);\n    // export\n    if(exports[key] != out)hide(exports, key, exp);\n    if(IS_PROTO && expProto[key] != out)expProto[key] = out;\n  }\n};\nglobal.core = core;\n// type bitmap\n$export.F = 1;   // forced\n$export.G = 2;   // global\n$export.S = 4;   // static\n$export.P = 8;   // proto\n$export.B = 16;  // bind\n$export.W = 32;  // wrap\n$export.U = 64;  // safe\n$export.R = 128; // real proto method for `library` \nmodule.exports = $export;\n},{\"./_core\":137,\"./_ctx\":139,\"./_global\":152,\"./_hide\":154,\"./_redefine\":201}],147:[function(require,module,exports){\nvar MATCH = require('./_wks')('match');\nmodule.exports = function(KEY){\n  var re = /./;\n  try {\n    '/./'[KEY](re);\n  } catch(e){\n    try {\n      re[MATCH] = false;\n      return !'/./'[KEY](re);\n    } catch(f){ /* empty */ }\n  } return true;\n};\n},{\"./_wks\":231}],148:[function(require,module,exports){\narguments[4][45][0].apply(exports,arguments)\n},{\"dup\":45}],149:[function(require,module,exports){\n'use strict';\nvar hide     = require('./_hide')\n  , redefine = require('./_redefine')\n  , fails    = require('./_fails')\n  , defined  = require('./_defined')\n  , wks      = require('./_wks');\n\nmodule.exports = function(KEY, length, exec){\n  var SYMBOL   = wks(KEY)\n    , fns      = exec(defined, SYMBOL, ''[KEY])\n    , strfn    = fns[0]\n    , rxfn     = fns[1];\n  if(fails(function(){\n    var O = {};\n    O[SYMBOL] = function(){ return 7; };\n    return ''[KEY](O) != 7;\n  })){\n    redefine(String.prototype, KEY, strfn);\n    hide(RegExp.prototype, SYMBOL, length == 2\n      // 21.2.5.8 RegExp.prototype[@@replace](string, replaceValue)\n      // 21.2.5.11 RegExp.prototype[@@split](string, limit)\n      ? function(string, arg){ return rxfn.call(string, this, arg); }\n      // 21.2.5.6 RegExp.prototype[@@match](string)\n      // 21.2.5.9 RegExp.prototype[@@search](string)\n      : function(string){ return rxfn.call(string, this); }\n    );\n  }\n};\n},{\"./_defined\":141,\"./_fails\":148,\"./_hide\":154,\"./_redefine\":201,\"./_wks\":231}],150:[function(require,module,exports){\n'use strict';\n// 21.2.5.3 get RegExp.prototype.flags\nvar anObject = require('./_an-object');\nmodule.exports = function(){\n  var that   = anObject(this)\n    , result = '';\n  if(that.global)     result += 'g';\n  if(that.ignoreCase) result += 'i';\n  if(that.multiline)  result += 'm';\n  if(that.unicode)    result += 'u';\n  if(that.sticky)     result += 'y';\n  return result;\n};\n},{\"./_an-object\":121}],151:[function(require,module,exports){\narguments[4][46][0].apply(exports,arguments)\n},{\"./_an-object\":121,\"./_ctx\":139,\"./_is-array-iter\":160,\"./_iter-call\":165,\"./_to-length\":222,\"./core.get-iterator-method\":232,\"dup\":46}],152:[function(require,module,exports){\narguments[4][47][0].apply(exports,arguments)\n},{\"dup\":47}],153:[function(require,module,exports){\narguments[4][48][0].apply(exports,arguments)\n},{\"dup\":48}],154:[function(require,module,exports){\narguments[4][49][0].apply(exports,arguments)\n},{\"./_descriptors\":142,\"./_object-dp\":181,\"./_property-desc\":199,\"dup\":49}],155:[function(require,module,exports){\narguments[4][50][0].apply(exports,arguments)\n},{\"./_global\":152,\"dup\":50}],156:[function(require,module,exports){\narguments[4][51][0].apply(exports,arguments)\n},{\"./_descriptors\":142,\"./_dom-create\":143,\"./_fails\":148,\"dup\":51}],157:[function(require,module,exports){\nvar isObject       = require('./_is-object')\r\n  , setPrototypeOf = require('./_set-proto').set;\r\nmodule.exports = function(that, target, C){\r\n  var P, S = target.constructor;\r\n  if(S !== C && typeof S == 'function' && (P = S.prototype) !== C.prototype && isObject(P) && setPrototypeOf){\r\n    setPrototypeOf(that, P);\r\n  } return that;\r\n};\n},{\"./_is-object\":163,\"./_set-proto\":204}],158:[function(require,module,exports){\narguments[4][52][0].apply(exports,arguments)\n},{\"dup\":52}],159:[function(require,module,exports){\narguments[4][53][0].apply(exports,arguments)\n},{\"./_cof\":132,\"dup\":53}],160:[function(require,module,exports){\narguments[4][54][0].apply(exports,arguments)\n},{\"./_iterators\":170,\"./_wks\":231,\"dup\":54}],161:[function(require,module,exports){\narguments[4][55][0].apply(exports,arguments)\n},{\"./_cof\":132,\"dup\":55}],162:[function(require,module,exports){\n// 20.1.2.3 Number.isInteger(number)\nvar isObject = require('./_is-object')\n  , floor    = Math.floor;\nmodule.exports = function isInteger(it){\n  return !isObject(it) && isFinite(it) && floor(it) === it;\n};\n},{\"./_is-object\":163}],163:[function(require,module,exports){\narguments[4][56][0].apply(exports,arguments)\n},{\"dup\":56}],164:[function(require,module,exports){\n// 7.2.8 IsRegExp(argument)\nvar isObject = require('./_is-object')\n  , cof      = require('./_cof')\n  , MATCH    = require('./_wks')('match');\nmodule.exports = function(it){\n  var isRegExp;\n  return isObject(it) && ((isRegExp = it[MATCH]) !== undefined ? !!isRegExp : cof(it) == 'RegExp');\n};\n},{\"./_cof\":132,\"./_is-object\":163,\"./_wks\":231}],165:[function(require,module,exports){\narguments[4][57][0].apply(exports,arguments)\n},{\"./_an-object\":121,\"dup\":57}],166:[function(require,module,exports){\narguments[4][58][0].apply(exports,arguments)\n},{\"./_hide\":154,\"./_object-create\":180,\"./_property-desc\":199,\"./_set-to-string-tag\":206,\"./_wks\":231,\"dup\":58}],167:[function(require,module,exports){\narguments[4][59][0].apply(exports,arguments)\n},{\"./_export\":146,\"./_has\":153,\"./_hide\":154,\"./_iter-create\":166,\"./_iterators\":170,\"./_library\":172,\"./_object-gpo\":188,\"./_redefine\":201,\"./_set-to-string-tag\":206,\"./_wks\":231,\"dup\":59}],168:[function(require,module,exports){\narguments[4][60][0].apply(exports,arguments)\n},{\"./_wks\":231,\"dup\":60}],169:[function(require,module,exports){\narguments[4][61][0].apply(exports,arguments)\n},{\"dup\":61}],170:[function(require,module,exports){\narguments[4][62][0].apply(exports,arguments)\n},{\"dup\":62}],171:[function(require,module,exports){\narguments[4][63][0].apply(exports,arguments)\n},{\"./_object-keys\":190,\"./_to-iobject\":221,\"dup\":63}],172:[function(require,module,exports){\nmodule.exports = false;\n},{}],173:[function(require,module,exports){\n// 20.2.2.14 Math.expm1(x)\nvar $expm1 = Math.expm1;\nmodule.exports = (!$expm1\n  // Old FF bug\n  || $expm1(10) > 22025.465794806719 || $expm1(10) < 22025.4657948067165168\n  // Tor Browser bug\n  || $expm1(-2e-17) != -2e-17\n) ? function expm1(x){\n  return (x = +x) == 0 ? x : x > -1e-6 && x < 1e-6 ? x + x * x / 2 : Math.exp(x) - 1;\n} : $expm1;\n},{}],174:[function(require,module,exports){\n// 20.2.2.20 Math.log1p(x)\nmodule.exports = Math.log1p || function log1p(x){\n  return (x = +x) > -1e-8 && x < 1e-8 ? x - x * x / 2 : Math.log(1 + x);\n};\n},{}],175:[function(require,module,exports){\n// 20.2.2.28 Math.sign(x)\nmodule.exports = Math.sign || function sign(x){\n  return (x = +x) == 0 || x != x ? x : x < 0 ? -1 : 1;\n};\n},{}],176:[function(require,module,exports){\narguments[4][65][0].apply(exports,arguments)\n},{\"./_fails\":148,\"./_has\":153,\"./_is-object\":163,\"./_object-dp\":181,\"./_uid\":228,\"dup\":65}],177:[function(require,module,exports){\nvar Map     = require('./es6.map')\n  , $export = require('./_export')\n  , shared  = require('./_shared')('metadata')\n  , store   = shared.store || (shared.store = new (require('./es6.weak-map')));\n\nvar getOrCreateMetadataMap = function(target, targetKey, create){\n  var targetMetadata = store.get(target);\n  if(!targetMetadata){\n    if(!create)return undefined;\n    store.set(target, targetMetadata = new Map);\n  }\n  var keyMetadata = targetMetadata.get(targetKey);\n  if(!keyMetadata){\n    if(!create)return undefined;\n    targetMetadata.set(targetKey, keyMetadata = new Map);\n  } return keyMetadata;\n};\nvar ordinaryHasOwnMetadata = function(MetadataKey, O, P){\n  var metadataMap = getOrCreateMetadataMap(O, P, false);\n  return metadataMap === undefined ? false : metadataMap.has(MetadataKey);\n};\nvar ordinaryGetOwnMetadata = function(MetadataKey, O, P){\n  var metadataMap = getOrCreateMetadataMap(O, P, false);\n  return metadataMap === undefined ? undefined : metadataMap.get(MetadataKey);\n};\nvar ordinaryDefineOwnMetadata = function(MetadataKey, MetadataValue, O, P){\n  getOrCreateMetadataMap(O, P, true).set(MetadataKey, MetadataValue);\n};\nvar ordinaryOwnMetadataKeys = function(target, targetKey){\n  var metadataMap = getOrCreateMetadataMap(target, targetKey, false)\n    , keys        = [];\n  if(metadataMap)metadataMap.forEach(function(_, key){ keys.push(key); });\n  return keys;\n};\nvar toMetaKey = function(it){\n  return it === undefined || typeof it == 'symbol' ? it : String(it);\n};\nvar exp = function(O){\n  $export($export.S, 'Reflect', O);\n};\n\nmodule.exports = {\n  store: store,\n  map: getOrCreateMetadataMap,\n  has: ordinaryHasOwnMetadata,\n  get: ordinaryGetOwnMetadata,\n  set: ordinaryDefineOwnMetadata,\n  keys: ordinaryOwnMetadataKeys,\n  key: toMetaKey,\n  exp: exp\n};\n},{\"./_export\":146,\"./_shared\":208,\"./es6.map\":264,\"./es6.weak-map\":370}],178:[function(require,module,exports){\narguments[4][66][0].apply(exports,arguments)\n},{\"./_cof\":132,\"./_global\":152,\"./_task\":218,\"dup\":66}],179:[function(require,module,exports){\narguments[4][67][0].apply(exports,arguments)\n},{\"./_fails\":148,\"./_iobject\":159,\"./_object-gops\":187,\"./_object-keys\":190,\"./_object-pie\":191,\"./_to-object\":223,\"dup\":67}],180:[function(require,module,exports){\narguments[4][68][0].apply(exports,arguments)\n},{\"./_an-object\":121,\"./_dom-create\":143,\"./_enum-bug-keys\":144,\"./_html\":155,\"./_object-dps\":182,\"./_shared-key\":207,\"dup\":68}],181:[function(require,module,exports){\narguments[4][69][0].apply(exports,arguments)\n},{\"./_an-object\":121,\"./_descriptors\":142,\"./_ie8-dom-define\":156,\"./_to-primitive\":224,\"dup\":69}],182:[function(require,module,exports){\narguments[4][70][0].apply(exports,arguments)\n},{\"./_an-object\":121,\"./_descriptors\":142,\"./_object-dp\":181,\"./_object-keys\":190,\"dup\":70}],183:[function(require,module,exports){\n// Forced replacement prototype accessors methods\r\nmodule.exports = require('./_library')|| !require('./_fails')(function(){\r\n  var K = Math.random();\r\n  // In FF throws only define methods\r\n  __defineSetter__.call(null, K, function(){ /* empty */});\r\n  delete require('./_global')[K];\r\n});\n},{\"./_fails\":148,\"./_global\":152,\"./_library\":172}],184:[function(require,module,exports){\narguments[4][71][0].apply(exports,arguments)\n},{\"./_descriptors\":142,\"./_has\":153,\"./_ie8-dom-define\":156,\"./_object-pie\":191,\"./_property-desc\":199,\"./_to-iobject\":221,\"./_to-primitive\":224,\"dup\":71}],185:[function(require,module,exports){\narguments[4][72][0].apply(exports,arguments)\n},{\"./_object-gopn\":186,\"./_to-iobject\":221,\"dup\":72}],186:[function(require,module,exports){\narguments[4][73][0].apply(exports,arguments)\n},{\"./_enum-bug-keys\":144,\"./_object-keys-internal\":189,\"dup\":73}],187:[function(require,module,exports){\narguments[4][74][0].apply(exports,arguments)\n},{\"dup\":74}],188:[function(require,module,exports){\narguments[4][75][0].apply(exports,arguments)\n},{\"./_has\":153,\"./_shared-key\":207,\"./_to-object\":223,\"dup\":75}],189:[function(require,module,exports){\narguments[4][76][0].apply(exports,arguments)\n},{\"./_array-includes\":125,\"./_has\":153,\"./_shared-key\":207,\"./_to-iobject\":221,\"dup\":76}],190:[function(require,module,exports){\narguments[4][77][0].apply(exports,arguments)\n},{\"./_enum-bug-keys\":144,\"./_object-keys-internal\":189,\"dup\":77}],191:[function(require,module,exports){\narguments[4][78][0].apply(exports,arguments)\n},{\"dup\":78}],192:[function(require,module,exports){\narguments[4][79][0].apply(exports,arguments)\n},{\"./_core\":137,\"./_export\":146,\"./_fails\":148,\"dup\":79}],193:[function(require,module,exports){\nvar getKeys   = require('./_object-keys')\n  , toIObject = require('./_to-iobject')\n  , isEnum    = require('./_object-pie').f;\nmodule.exports = function(isEntries){\n  return function(it){\n    var O      = toIObject(it)\n      , keys   = getKeys(O)\n      , length = keys.length\n      , i      = 0\n      , result = []\n      , key;\n    while(length > i)if(isEnum.call(O, key = keys[i++])){\n      result.push(isEntries ? [key, O[key]] : O[key]);\n    } return result;\n  };\n};\n},{\"./_object-keys\":190,\"./_object-pie\":191,\"./_to-iobject\":221}],194:[function(require,module,exports){\n// all object keys, includes non-enumerable and symbols\nvar gOPN     = require('./_object-gopn')\n  , gOPS     = require('./_object-gops')\n  , anObject = require('./_an-object')\n  , Reflect  = require('./_global').Reflect;\nmodule.exports = Reflect && Reflect.ownKeys || function ownKeys(it){\n  var keys       = gOPN.f(anObject(it))\n    , getSymbols = gOPS.f;\n  return getSymbols ? keys.concat(getSymbols(it)) : keys;\n};\n},{\"./_an-object\":121,\"./_global\":152,\"./_object-gopn\":186,\"./_object-gops\":187}],195:[function(require,module,exports){\nvar $parseFloat = require('./_global').parseFloat\n  , $trim       = require('./_string-trim').trim;\n\nmodule.exports = 1 / $parseFloat(require('./_string-ws') + '-0') !== -Infinity ? function parseFloat(str){\n  var string = $trim(String(str), 3)\n    , result = $parseFloat(string);\n  return result === 0 && string.charAt(0) == '-' ? -0 : result;\n} : $parseFloat;\n},{\"./_global\":152,\"./_string-trim\":216,\"./_string-ws\":217}],196:[function(require,module,exports){\nvar $parseInt = require('./_global').parseInt\n  , $trim     = require('./_string-trim').trim\n  , ws        = require('./_string-ws')\n  , hex       = /^[\\-+]?0[xX]/;\n\nmodule.exports = $parseInt(ws + '08') !== 8 || $parseInt(ws + '0x16') !== 22 ? function parseInt(str, radix){\n  var string = $trim(String(str), 3);\n  return $parseInt(string, (radix >>> 0) || (hex.test(string) ? 16 : 10));\n} : $parseInt;\n},{\"./_global\":152,\"./_string-trim\":216,\"./_string-ws\":217}],197:[function(require,module,exports){\n'use strict';\nvar path      = require('./_path')\n  , invoke    = require('./_invoke')\n  , aFunction = require('./_a-function');\nmodule.exports = function(/* ...pargs */){\n  var fn     = aFunction(this)\n    , length = arguments.length\n    , pargs  = Array(length)\n    , i      = 0\n    , _      = path._\n    , holder = false;\n  while(length > i)if((pargs[i] = arguments[i++]) === _)holder = true;\n  return function(/* ...args */){\n    var that = this\n      , aLen = arguments.length\n      , j = 0, k = 0, args;\n    if(!holder && !aLen)return invoke(fn, pargs, that);\n    args = pargs.slice();\n    if(holder)for(;length > j; j++)if(args[j] === _)args[j] = arguments[k++];\n    while(aLen > k)args.push(arguments[k++]);\n    return invoke(fn, args, that);\n  };\n};\n},{\"./_a-function\":117,\"./_invoke\":158,\"./_path\":198}],198:[function(require,module,exports){\nmodule.exports = require('./_global');\n},{\"./_global\":152}],199:[function(require,module,exports){\narguments[4][80][0].apply(exports,arguments)\n},{\"dup\":80}],200:[function(require,module,exports){\nvar redefine = require('./_redefine');\nmodule.exports = function(target, src, safe){\n  for(var key in src)redefine(target, key, src[key], safe);\n  return target;\n};\n},{\"./_redefine\":201}],201:[function(require,module,exports){\nvar global    = require('./_global')\n  , hide      = require('./_hide')\n  , has       = require('./_has')\n  , SRC       = require('./_uid')('src')\n  , TO_STRING = 'toString'\n  , $toString = Function[TO_STRING]\n  , TPL       = ('' + $toString).split(TO_STRING);\n\nrequire('./_core').inspectSource = function(it){\n  return $toString.call(it);\n};\n\n(module.exports = function(O, key, val, safe){\n  var isFunction = typeof val == 'function';\n  if(isFunction)has(val, 'name') || hide(val, 'name', key);\n  if(O[key] === val)return;\n  if(isFunction)has(val, SRC) || hide(val, SRC, O[key] ? '' + O[key] : TPL.join(String(key)));\n  if(O === global){\n    O[key] = val;\n  } else {\n    if(!safe){\n      delete O[key];\n      hide(O, key, val);\n    } else {\n      if(O[key])O[key] = val;\n      else hide(O, key, val);\n    }\n  }\n// add fake Function#toString for correct work wrapped methods / constructors with methods like LoDash isNative\n})(Function.prototype, TO_STRING, function toString(){\n  return typeof this == 'function' && this[SRC] || $toString.call(this);\n});\n},{\"./_core\":137,\"./_global\":152,\"./_has\":153,\"./_hide\":154,\"./_uid\":228}],202:[function(require,module,exports){\nmodule.exports = function(regExp, replace){\n  var replacer = replace === Object(replace) ? function(part){\n    return replace[part];\n  } : replace;\n  return function(it){\n    return String(it).replace(regExp, replacer);\n  };\n};\n},{}],203:[function(require,module,exports){\n// 7.2.9 SameValue(x, y)\nmodule.exports = Object.is || function is(x, y){\n  return x === y ? x !== 0 || 1 / x === 1 / y : x != x && y != y;\n};\n},{}],204:[function(require,module,exports){\narguments[4][83][0].apply(exports,arguments)\n},{\"./_an-object\":121,\"./_ctx\":139,\"./_is-object\":163,\"./_object-gopd\":184,\"dup\":83}],205:[function(require,module,exports){\n'use strict';\nvar global      = require('./_global')\n  , dP          = require('./_object-dp')\n  , DESCRIPTORS = require('./_descriptors')\n  , SPECIES     = require('./_wks')('species');\n\nmodule.exports = function(KEY){\n  var C = global[KEY];\n  if(DESCRIPTORS && C && !C[SPECIES])dP.f(C, SPECIES, {\n    configurable: true,\n    get: function(){ return this; }\n  });\n};\n},{\"./_descriptors\":142,\"./_global\":152,\"./_object-dp\":181,\"./_wks\":231}],206:[function(require,module,exports){\narguments[4][85][0].apply(exports,arguments)\n},{\"./_has\":153,\"./_object-dp\":181,\"./_wks\":231,\"dup\":85}],207:[function(require,module,exports){\narguments[4][86][0].apply(exports,arguments)\n},{\"./_shared\":208,\"./_uid\":228,\"dup\":86}],208:[function(require,module,exports){\narguments[4][87][0].apply(exports,arguments)\n},{\"./_global\":152,\"dup\":87}],209:[function(require,module,exports){\narguments[4][88][0].apply(exports,arguments)\n},{\"./_a-function\":117,\"./_an-object\":121,\"./_wks\":231,\"dup\":88}],210:[function(require,module,exports){\nvar fails = require('./_fails');\r\n\r\nmodule.exports = function(method, arg){\r\n  return !!method && fails(function(){\r\n    arg ? method.call(null, function(){}, 1) : method.call(null);\r\n  });\r\n};\n},{\"./_fails\":148}],211:[function(require,module,exports){\narguments[4][89][0].apply(exports,arguments)\n},{\"./_defined\":141,\"./_to-integer\":220,\"dup\":89}],212:[function(require,module,exports){\n// helper for String#{startsWith, endsWith, includes}\nvar isRegExp = require('./_is-regexp')\n  , defined  = require('./_defined');\n\nmodule.exports = function(that, searchString, NAME){\n  if(isRegExp(searchString))throw TypeError('String#' + NAME + \" doesn't accept regex!\");\n  return String(defined(that));\n};\n},{\"./_defined\":141,\"./_is-regexp\":164}],213:[function(require,module,exports){\nvar $export = require('./_export')\n  , fails   = require('./_fails')\n  , defined = require('./_defined')\n  , quot    = /\"/g;\n// B.2.3.2.1 CreateHTML(string, tag, attribute, value)\nvar createHTML = function(string, tag, attribute, value) {\n  var S  = String(defined(string))\n    , p1 = '<' + tag;\n  if(attribute !== '')p1 += ' ' + attribute + '=\"' + String(value).replace(quot, '&quot;') + '\"';\n  return p1 + '>' + S + '</' + tag + '>';\n};\nmodule.exports = function(NAME, exec){\n  var O = {};\n  O[NAME] = exec(createHTML);\n  $export($export.P + $export.F * fails(function(){\n    var test = ''[NAME]('\"');\n    return test !== test.toLowerCase() || test.split('\"').length > 3;\n  }), 'String', O);\n};\n},{\"./_defined\":141,\"./_export\":146,\"./_fails\":148}],214:[function(require,module,exports){\n// https://github.com/tc39/proposal-string-pad-start-end\nvar toLength = require('./_to-length')\n  , repeat   = require('./_string-repeat')\n  , defined  = require('./_defined');\n\nmodule.exports = function(that, maxLength, fillString, left){\n  var S            = String(defined(that))\n    , stringLength = S.length\n    , fillStr      = fillString === undefined ? ' ' : String(fillString)\n    , intMaxLength = toLength(maxLength);\n  if(intMaxLength <= stringLength || fillStr == '')return S;\n  var fillLen = intMaxLength - stringLength\n    , stringFiller = repeat.call(fillStr, Math.ceil(fillLen / fillStr.length));\n  if(stringFiller.length > fillLen)stringFiller = stringFiller.slice(0, fillLen);\n  return left ? stringFiller + S : S + stringFiller;\n};\n\n},{\"./_defined\":141,\"./_string-repeat\":215,\"./_to-length\":222}],215:[function(require,module,exports){\n'use strict';\nvar toInteger = require('./_to-integer')\n  , defined   = require('./_defined');\n\nmodule.exports = function repeat(count){\n  var str = String(defined(this))\n    , res = ''\n    , n   = toInteger(count);\n  if(n < 0 || n == Infinity)throw RangeError(\"Count can't be negative\");\n  for(;n > 0; (n >>>= 1) && (str += str))if(n & 1)res += str;\n  return res;\n};\n},{\"./_defined\":141,\"./_to-integer\":220}],216:[function(require,module,exports){\nvar $export = require('./_export')\n  , defined = require('./_defined')\n  , fails   = require('./_fails')\n  , spaces  = require('./_string-ws')\n  , space   = '[' + spaces + ']'\n  , non     = '\\u200b\\u0085'\n  , ltrim   = RegExp('^' + space + space + '*')\n  , rtrim   = RegExp(space + space + '*$');\n\nvar exporter = function(KEY, exec, ALIAS){\n  var exp   = {};\n  var FORCE = fails(function(){\n    return !!spaces[KEY]() || non[KEY]() != non;\n  });\n  var fn = exp[KEY] = FORCE ? exec(trim) : spaces[KEY];\n  if(ALIAS)exp[ALIAS] = fn;\n  $export($export.P + $export.F * FORCE, 'String', exp);\n};\n\n// 1 -> String#trimLeft\n// 2 -> String#trimRight\n// 3 -> String#trim\nvar trim = exporter.trim = function(string, TYPE){\n  string = String(defined(string));\n  if(TYPE & 1)string = string.replace(ltrim, '');\n  if(TYPE & 2)string = string.replace(rtrim, '');\n  return string;\n};\n\nmodule.exports = exporter;\n},{\"./_defined\":141,\"./_export\":146,\"./_fails\":148,\"./_string-ws\":217}],217:[function(require,module,exports){\nmodule.exports = '\\x09\\x0A\\x0B\\x0C\\x0D\\x20\\xA0\\u1680\\u180E\\u2000\\u2001\\u2002\\u2003' +\r\n  '\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200A\\u202F\\u205F\\u3000\\u2028\\u2029\\uFEFF';\n},{}],218:[function(require,module,exports){\narguments[4][90][0].apply(exports,arguments)\n},{\"./_cof\":132,\"./_ctx\":139,\"./_dom-create\":143,\"./_global\":152,\"./_html\":155,\"./_invoke\":158,\"dup\":90}],219:[function(require,module,exports){\narguments[4][91][0].apply(exports,arguments)\n},{\"./_to-integer\":220,\"dup\":91}],220:[function(require,module,exports){\narguments[4][92][0].apply(exports,arguments)\n},{\"dup\":92}],221:[function(require,module,exports){\narguments[4][93][0].apply(exports,arguments)\n},{\"./_defined\":141,\"./_iobject\":159,\"dup\":93}],222:[function(require,module,exports){\narguments[4][94][0].apply(exports,arguments)\n},{\"./_to-integer\":220,\"dup\":94}],223:[function(require,module,exports){\narguments[4][95][0].apply(exports,arguments)\n},{\"./_defined\":141,\"dup\":95}],224:[function(require,module,exports){\narguments[4][96][0].apply(exports,arguments)\n},{\"./_is-object\":163,\"dup\":96}],225:[function(require,module,exports){\n'use strict';\nif(require('./_descriptors')){\n  var LIBRARY             = require('./_library')\n    , global              = require('./_global')\n    , fails               = require('./_fails')\n    , $export             = require('./_export')\n    , $typed              = require('./_typed')\n    , $buffer             = require('./_typed-buffer')\n    , ctx                 = require('./_ctx')\n    , anInstance          = require('./_an-instance')\n    , propertyDesc        = require('./_property-desc')\n    , hide                = require('./_hide')\n    , redefineAll         = require('./_redefine-all')\n    , isInteger           = require('./_is-integer')\n    , toInteger           = require('./_to-integer')\n    , toLength            = require('./_to-length')\n    , toIndex             = require('./_to-index')\n    , toPrimitive         = require('./_to-primitive')\n    , has                 = require('./_has')\n    , same                = require('./_same-value')\n    , classof             = require('./_classof')\n    , isObject            = require('./_is-object')\n    , toObject            = require('./_to-object')\n    , isArrayIter         = require('./_is-array-iter')\n    , create              = require('./_object-create')\n    , getPrototypeOf      = require('./_object-gpo')\n    , gOPN                = require('./_object-gopn').f\n    , isIterable          = require('./core.is-iterable')\n    , getIterFn           = require('./core.get-iterator-method')\n    , uid                 = require('./_uid')\n    , wks                 = require('./_wks')\n    , createArrayMethod   = require('./_array-methods')\n    , createArrayIncludes = require('./_array-includes')\n    , speciesConstructor  = require('./_species-constructor')\n    , ArrayIterators      = require('./es6.array.iterator')\n    , Iterators           = require('./_iterators')\n    , $iterDetect         = require('./_iter-detect')\n    , setSpecies          = require('./_set-species')\n    , arrayFill           = require('./_array-fill')\n    , arrayCopyWithin     = require('./_array-copy-within')\n    , $DP                 = require('./_object-dp')\n    , $GOPD               = require('./_object-gopd')\n    , dP                  = $DP.f\n    , gOPD                = $GOPD.f\n    , RangeError          = global.RangeError\n    , TypeError           = global.TypeError\n    , Uint8Array          = global.Uint8Array\n    , ARRAY_BUFFER        = 'ArrayBuffer'\n    , SHARED_BUFFER       = 'Shared' + ARRAY_BUFFER\n    , BYTES_PER_ELEMENT   = 'BYTES_PER_ELEMENT'\n    , PROTOTYPE           = 'prototype'\n    , ArrayProto          = Array[PROTOTYPE]\n    , $ArrayBuffer        = $buffer.ArrayBuffer\n    , $DataView           = $buffer.DataView\n    , arrayForEach        = createArrayMethod(0)\n    , arrayFilter         = createArrayMethod(2)\n    , arraySome           = createArrayMethod(3)\n    , arrayEvery          = createArrayMethod(4)\n    , arrayFind           = createArrayMethod(5)\n    , arrayFindIndex      = createArrayMethod(6)\n    , arrayIncludes       = createArrayIncludes(true)\n    , arrayIndexOf        = createArrayIncludes(false)\n    , arrayValues         = ArrayIterators.values\n    , arrayKeys           = ArrayIterators.keys\n    , arrayEntries        = ArrayIterators.entries\n    , arrayLastIndexOf    = ArrayProto.lastIndexOf\n    , arrayReduce         = ArrayProto.reduce\n    , arrayReduceRight    = ArrayProto.reduceRight\n    , arrayJoin           = ArrayProto.join\n    , arraySort           = ArrayProto.sort\n    , arraySlice          = ArrayProto.slice\n    , arrayToString       = ArrayProto.toString\n    , arrayToLocaleString = ArrayProto.toLocaleString\n    , ITERATOR            = wks('iterator')\n    , TAG                 = wks('toStringTag')\n    , TYPED_CONSTRUCTOR   = uid('typed_constructor')\n    , DEF_CONSTRUCTOR     = uid('def_constructor')\n    , ALL_CONSTRUCTORS    = $typed.CONSTR\n    , TYPED_ARRAY         = $typed.TYPED\n    , VIEW                = $typed.VIEW\n    , WRONG_LENGTH        = 'Wrong length!';\n\n  var $map = createArrayMethod(1, function(O, length){\n    return allocate(speciesConstructor(O, O[DEF_CONSTRUCTOR]), length);\n  });\n\n  var LITTLE_ENDIAN = fails(function(){\n    return new Uint8Array(new Uint16Array([1]).buffer)[0] === 1;\n  });\n\n  var FORCED_SET = !!Uint8Array && !!Uint8Array[PROTOTYPE].set && fails(function(){\n    new Uint8Array(1).set({});\n  });\n\n  var strictToLength = function(it, SAME){\n    if(it === undefined)throw TypeError(WRONG_LENGTH);\n    var number = +it\n      , length = toLength(it);\n    if(SAME && !same(number, length))throw RangeError(WRONG_LENGTH);\n    return length;\n  };\n\n  var toOffset = function(it, BYTES){\n    var offset = toInteger(it);\n    if(offset < 0 || offset % BYTES)throw RangeError('Wrong offset!');\n    return offset;\n  };\n\n  var validate = function(it){\n    if(isObject(it) && TYPED_ARRAY in it)return it;\n    throw TypeError(it + ' is not a typed array!');\n  };\n\n  var allocate = function(C, length){\n    if(!(isObject(C) && TYPED_CONSTRUCTOR in C)){\n      throw TypeError('It is not a typed array constructor!');\n    } return new C(length);\n  };\n\n  var speciesFromList = function(O, list){\n    return fromList(speciesConstructor(O, O[DEF_CONSTRUCTOR]), list);\n  };\n\n  var fromList = function(C, list){\n    var index  = 0\n      , length = list.length\n      , result = allocate(C, length);\n    while(length > index)result[index] = list[index++];\n    return result;\n  };\n\n  var addGetter = function(it, key, internal){\n    dP(it, key, {get: function(){ return this._d[internal]; }});\n  };\n\n  var $from = function from(source /*, mapfn, thisArg */){\n    var O       = toObject(source)\n      , aLen    = arguments.length\n      , mapfn   = aLen > 1 ? arguments[1] : undefined\n      , mapping = mapfn !== undefined\n      , iterFn  = getIterFn(O)\n      , i, length, values, result, step, iterator;\n    if(iterFn != undefined && !isArrayIter(iterFn)){\n      for(iterator = iterFn.call(O), values = [], i = 0; !(step = iterator.next()).done; i++){\n        values.push(step.value);\n      } O = values;\n    }\n    if(mapping && aLen > 2)mapfn = ctx(mapfn, arguments[2], 2);\n    for(i = 0, length = toLength(O.length), result = allocate(this, length); length > i; i++){\n      result[i] = mapping ? mapfn(O[i], i) : O[i];\n    }\n    return result;\n  };\n\n  var $of = function of(/*...items*/){\n    var index  = 0\n      , length = arguments.length\n      , result = allocate(this, length);\n    while(length > index)result[index] = arguments[index++];\n    return result;\n  };\n\n  // iOS Safari 6.x fails here\n  var TO_LOCALE_BUG = !!Uint8Array && fails(function(){ arrayToLocaleString.call(new Uint8Array(1)); });\n\n  var $toLocaleString = function toLocaleString(){\n    return arrayToLocaleString.apply(TO_LOCALE_BUG ? arraySlice.call(validate(this)) : validate(this), arguments);\n  };\n\n  var proto = {\n    copyWithin: function copyWithin(target, start /*, end */){\n      return arrayCopyWithin.call(validate(this), target, start, arguments.length > 2 ? arguments[2] : undefined);\n    },\n    every: function every(callbackfn /*, thisArg */){\n      return arrayEvery(validate(this), callbackfn, arguments.length > 1 ? arguments[1] : undefined);\n    },\n    fill: function fill(value /*, start, end */){ // eslint-disable-line no-unused-vars\n      return arrayFill.apply(validate(this), arguments);\n    },\n    filter: function filter(callbackfn /*, thisArg */){\n      return speciesFromList(this, arrayFilter(validate(this), callbackfn,\n        arguments.length > 1 ? arguments[1] : undefined));\n    },\n    find: function find(predicate /*, thisArg */){\n      return arrayFind(validate(this), predicate, arguments.length > 1 ? arguments[1] : undefined);\n    },\n    findIndex: function findIndex(predicate /*, thisArg */){\n      return arrayFindIndex(validate(this), predicate, arguments.length > 1 ? arguments[1] : undefined);\n    },\n    forEach: function forEach(callbackfn /*, thisArg */){\n      arrayForEach(validate(this), callbackfn, arguments.length > 1 ? arguments[1] : undefined);\n    },\n    indexOf: function indexOf(searchElement /*, fromIndex */){\n      return arrayIndexOf(validate(this), searchElement, arguments.length > 1 ? arguments[1] : undefined);\n    },\n    includes: function includes(searchElement /*, fromIndex */){\n      return arrayIncludes(validate(this), searchElement, arguments.length > 1 ? arguments[1] : undefined);\n    },\n    join: function join(separator){ // eslint-disable-line no-unused-vars\n      return arrayJoin.apply(validate(this), arguments);\n    },\n    lastIndexOf: function lastIndexOf(searchElement /*, fromIndex */){ // eslint-disable-line no-unused-vars\n      return arrayLastIndexOf.apply(validate(this), arguments);\n    },\n    map: function map(mapfn /*, thisArg */){\n      return $map(validate(this), mapfn, arguments.length > 1 ? arguments[1] : undefined);\n    },\n    reduce: function reduce(callbackfn /*, initialValue */){ // eslint-disable-line no-unused-vars\n      return arrayReduce.apply(validate(this), arguments);\n    },\n    reduceRight: function reduceRight(callbackfn /*, initialValue */){ // eslint-disable-line no-unused-vars\n      return arrayReduceRight.apply(validate(this), arguments);\n    },\n    reverse: function reverse(){\n      var that   = this\n        , length = validate(that).length\n        , middle = Math.floor(length / 2)\n        , index  = 0\n        , value;\n      while(index < middle){\n        value         = that[index];\n        that[index++] = that[--length];\n        that[length]  = value;\n      } return that;\n    },\n    some: function some(callbackfn /*, thisArg */){\n      return arraySome(validate(this), callbackfn, arguments.length > 1 ? arguments[1] : undefined);\n    },\n    sort: function sort(comparefn){\n      return arraySort.call(validate(this), comparefn);\n    },\n    subarray: function subarray(begin, end){\n      var O      = validate(this)\n        , length = O.length\n        , $begin = toIndex(begin, length);\n      return new (speciesConstructor(O, O[DEF_CONSTRUCTOR]))(\n        O.buffer,\n        O.byteOffset + $begin * O.BYTES_PER_ELEMENT,\n        toLength((end === undefined ? length : toIndex(end, length)) - $begin)\n      );\n    }\n  };\n\n  var $slice = function slice(start, end){\n    return speciesFromList(this, arraySlice.call(validate(this), start, end));\n  };\n\n  var $set = function set(arrayLike /*, offset */){\n    validate(this);\n    var offset = toOffset(arguments[1], 1)\n      , length = this.length\n      , src    = toObject(arrayLike)\n      , len    = toLength(src.length)\n      , index  = 0;\n    if(len + offset > length)throw RangeError(WRONG_LENGTH);\n    while(index < len)this[offset + index] = src[index++];\n  };\n\n  var $iterators = {\n    entries: function entries(){\n      return arrayEntries.call(validate(this));\n    },\n    keys: function keys(){\n      return arrayKeys.call(validate(this));\n    },\n    values: function values(){\n      return arrayValues.call(validate(this));\n    }\n  };\n\n  var isTAIndex = function(target, key){\n    return isObject(target)\n      && target[TYPED_ARRAY]\n      && typeof key != 'symbol'\n      && key in target\n      && String(+key) == String(key);\n  };\n  var $getDesc = function getOwnPropertyDescriptor(target, key){\n    return isTAIndex(target, key = toPrimitive(key, true))\n      ? propertyDesc(2, target[key])\n      : gOPD(target, key);\n  };\n  var $setDesc = function defineProperty(target, key, desc){\n    if(isTAIndex(target, key = toPrimitive(key, true))\n      && isObject(desc)\n      && has(desc, 'value')\n      && !has(desc, 'get')\n      && !has(desc, 'set')\n      // TODO: add validation descriptor w/o calling accessors\n      && !desc.configurable\n      && (!has(desc, 'writable') || desc.writable)\n      && (!has(desc, 'enumerable') || desc.enumerable)\n    ){\n      target[key] = desc.value;\n      return target;\n    } else return dP(target, key, desc);\n  };\n\n  if(!ALL_CONSTRUCTORS){\n    $GOPD.f = $getDesc;\n    $DP.f   = $setDesc;\n  }\n\n  $export($export.S + $export.F * !ALL_CONSTRUCTORS, 'Object', {\n    getOwnPropertyDescriptor: $getDesc,\n    defineProperty:           $setDesc\n  });\n\n  if(fails(function(){ arrayToString.call({}); })){\n    arrayToString = arrayToLocaleString = function toString(){\n      return arrayJoin.call(this);\n    }\n  }\n\n  var $TypedArrayPrototype$ = redefineAll({}, proto);\n  redefineAll($TypedArrayPrototype$, $iterators);\n  hide($TypedArrayPrototype$, ITERATOR, $iterators.values);\n  redefineAll($TypedArrayPrototype$, {\n    slice:          $slice,\n    set:            $set,\n    constructor:    function(){ /* noop */ },\n    toString:       arrayToString,\n    toLocaleString: $toLocaleString\n  });\n  addGetter($TypedArrayPrototype$, 'buffer', 'b');\n  addGetter($TypedArrayPrototype$, 'byteOffset', 'o');\n  addGetter($TypedArrayPrototype$, 'byteLength', 'l');\n  addGetter($TypedArrayPrototype$, 'length', 'e');\n  dP($TypedArrayPrototype$, TAG, {\n    get: function(){ return this[TYPED_ARRAY]; }\n  });\n\n  module.exports = function(KEY, BYTES, wrapper, CLAMPED){\n    CLAMPED = !!CLAMPED;\n    var NAME       = KEY + (CLAMPED ? 'Clamped' : '') + 'Array'\n      , ISNT_UINT8 = NAME != 'Uint8Array'\n      , GETTER     = 'get' + KEY\n      , SETTER     = 'set' + KEY\n      , TypedArray = global[NAME]\n      , Base       = TypedArray || {}\n      , TAC        = TypedArray && getPrototypeOf(TypedArray)\n      , FORCED     = !TypedArray || !$typed.ABV\n      , O          = {}\n      , TypedArrayPrototype = TypedArray && TypedArray[PROTOTYPE];\n    var getter = function(that, index){\n      var data = that._d;\n      return data.v[GETTER](index * BYTES + data.o, LITTLE_ENDIAN);\n    };\n    var setter = function(that, index, value){\n      var data = that._d;\n      if(CLAMPED)value = (value = Math.round(value)) < 0 ? 0 : value > 0xff ? 0xff : value & 0xff;\n      data.v[SETTER](index * BYTES + data.o, value, LITTLE_ENDIAN);\n    };\n    var addElement = function(that, index){\n      dP(that, index, {\n        get: function(){\n          return getter(this, index);\n        },\n        set: function(value){\n          return setter(this, index, value);\n        },\n        enumerable: true\n      });\n    };\n    if(FORCED){\n      TypedArray = wrapper(function(that, data, $offset, $length){\n        anInstance(that, TypedArray, NAME, '_d');\n        var index  = 0\n          , offset = 0\n          , buffer, byteLength, length, klass;\n        if(!isObject(data)){\n          length     = strictToLength(data, true)\n          byteLength = length * BYTES;\n          buffer     = new $ArrayBuffer(byteLength);\n        } else if(data instanceof $ArrayBuffer || (klass = classof(data)) == ARRAY_BUFFER || klass == SHARED_BUFFER){\n          buffer = data;\n          offset = toOffset($offset, BYTES);\n          var $len = data.byteLength;\n          if($length === undefined){\n            if($len % BYTES)throw RangeError(WRONG_LENGTH);\n            byteLength = $len - offset;\n            if(byteLength < 0)throw RangeError(WRONG_LENGTH);\n          } else {\n            byteLength = toLength($length) * BYTES;\n            if(byteLength + offset > $len)throw RangeError(WRONG_LENGTH);\n          }\n          length = byteLength / BYTES;\n        } else if(TYPED_ARRAY in data){\n          return fromList(TypedArray, data);\n        } else {\n          return $from.call(TypedArray, data);\n        }\n        hide(that, '_d', {\n          b: buffer,\n          o: offset,\n          l: byteLength,\n          e: length,\n          v: new $DataView(buffer)\n        });\n        while(index < length)addElement(that, index++);\n      });\n      TypedArrayPrototype = TypedArray[PROTOTYPE] = create($TypedArrayPrototype$);\n      hide(TypedArrayPrototype, 'constructor', TypedArray);\n    } else if(!$iterDetect(function(iter){\n      // V8 works with iterators, but fails in many other cases\n      // https://code.google.com/p/v8/issues/detail?id=4552\n      new TypedArray(null); // eslint-disable-line no-new\n      new TypedArray(iter); // eslint-disable-line no-new\n    }, true)){\n      TypedArray = wrapper(function(that, data, $offset, $length){\n        anInstance(that, TypedArray, NAME);\n        var klass;\n        // `ws` module bug, temporarily remove validation length for Uint8Array\n        // https://github.com/websockets/ws/pull/645\n        if(!isObject(data))return new Base(strictToLength(data, ISNT_UINT8));\n        if(data instanceof $ArrayBuffer || (klass = classof(data)) == ARRAY_BUFFER || klass == SHARED_BUFFER){\n          return $length !== undefined\n            ? new Base(data, toOffset($offset, BYTES), $length)\n            : $offset !== undefined\n              ? new Base(data, toOffset($offset, BYTES))\n              : new Base(data);\n        }\n        if(TYPED_ARRAY in data)return fromList(TypedArray, data);\n        return $from.call(TypedArray, data);\n      });\n      arrayForEach(TAC !== Function.prototype ? gOPN(Base).concat(gOPN(TAC)) : gOPN(Base), function(key){\n        if(!(key in TypedArray))hide(TypedArray, key, Base[key]);\n      });\n      TypedArray[PROTOTYPE] = TypedArrayPrototype;\n      if(!LIBRARY)TypedArrayPrototype.constructor = TypedArray;\n    }\n    var $nativeIterator   = TypedArrayPrototype[ITERATOR]\n      , CORRECT_ITER_NAME = !!$nativeIterator && ($nativeIterator.name == 'values' || $nativeIterator.name == undefined)\n      , $iterator         = $iterators.values;\n    hide(TypedArray, TYPED_CONSTRUCTOR, true);\n    hide(TypedArrayPrototype, TYPED_ARRAY, NAME);\n    hide(TypedArrayPrototype, VIEW, true);\n    hide(TypedArrayPrototype, DEF_CONSTRUCTOR, TypedArray);\n\n    if(CLAMPED ? new TypedArray(1)[TAG] != NAME : !(TAG in TypedArrayPrototype)){\n      dP(TypedArrayPrototype, TAG, {\n        get: function(){ return NAME; }\n      });\n    }\n\n    O[NAME] = TypedArray;\n\n    $export($export.G + $export.W + $export.F * (TypedArray != Base), O);\n\n    $export($export.S, NAME, {\n      BYTES_PER_ELEMENT: BYTES,\n      from: $from,\n      of: $of\n    });\n\n    if(!(BYTES_PER_ELEMENT in TypedArrayPrototype))hide(TypedArrayPrototype, BYTES_PER_ELEMENT, BYTES);\n\n    $export($export.P, NAME, proto);\n\n    setSpecies(NAME);\n\n    $export($export.P + $export.F * FORCED_SET, NAME, {set: $set});\n\n    $export($export.P + $export.F * !CORRECT_ITER_NAME, NAME, $iterators);\n\n    $export($export.P + $export.F * (TypedArrayPrototype.toString != arrayToString), NAME, {toString: arrayToString});\n\n    $export($export.P + $export.F * fails(function(){\n      new TypedArray(1).slice();\n    }), NAME, {slice: $slice});\n\n    $export($export.P + $export.F * (fails(function(){\n      return [1, 2].toLocaleString() != new TypedArray([1, 2]).toLocaleString()\n    }) || !fails(function(){\n      TypedArrayPrototype.toLocaleString.call([1, 2]);\n    })), NAME, {toLocaleString: $toLocaleString});\n\n    Iterators[NAME] = CORRECT_ITER_NAME ? $nativeIterator : $iterator;\n    if(!LIBRARY && !CORRECT_ITER_NAME)hide(TypedArrayPrototype, ITERATOR, $iterator);\n  };\n} else module.exports = function(){ /* empty */ };\n},{\"./_an-instance\":120,\"./_array-copy-within\":122,\"./_array-fill\":123,\"./_array-includes\":125,\"./_array-methods\":126,\"./_classof\":131,\"./_ctx\":139,\"./_descriptors\":142,\"./_export\":146,\"./_fails\":148,\"./_global\":152,\"./_has\":153,\"./_hide\":154,\"./_is-array-iter\":160,\"./_is-integer\":162,\"./_is-object\":163,\"./_iter-detect\":168,\"./_iterators\":170,\"./_library\":172,\"./_object-create\":180,\"./_object-dp\":181,\"./_object-gopd\":184,\"./_object-gopn\":186,\"./_object-gpo\":188,\"./_property-desc\":199,\"./_redefine-all\":200,\"./_same-value\":203,\"./_set-species\":205,\"./_species-constructor\":209,\"./_to-index\":219,\"./_to-integer\":220,\"./_to-length\":222,\"./_to-object\":223,\"./_to-primitive\":224,\"./_typed\":227,\"./_typed-buffer\":226,\"./_uid\":228,\"./_wks\":231,\"./core.get-iterator-method\":232,\"./core.is-iterable\":233,\"./es6.array.iterator\":245}],226:[function(require,module,exports){\n'use strict';\nvar global         = require('./_global')\n  , DESCRIPTORS    = require('./_descriptors')\n  , LIBRARY        = require('./_library')\n  , $typed         = require('./_typed')\n  , hide           = require('./_hide')\n  , redefineAll    = require('./_redefine-all')\n  , fails          = require('./_fails')\n  , anInstance     = require('./_an-instance')\n  , toInteger      = require('./_to-integer')\n  , toLength       = require('./_to-length')\n  , gOPN           = require('./_object-gopn').f\n  , dP             = require('./_object-dp').f\n  , arrayFill      = require('./_array-fill')\n  , setToStringTag = require('./_set-to-string-tag')\n  , ARRAY_BUFFER   = 'ArrayBuffer'\n  , DATA_VIEW      = 'DataView'\n  , PROTOTYPE      = 'prototype'\n  , WRONG_LENGTH   = 'Wrong length!'\n  , WRONG_INDEX    = 'Wrong index!'\n  , $ArrayBuffer   = global[ARRAY_BUFFER]\n  , $DataView      = global[DATA_VIEW]\n  , Math           = global.Math\n  , parseInt       = global.parseInt\n  , RangeError     = global.RangeError\n  , Infinity       = global.Infinity\n  , BaseBuffer     = $ArrayBuffer\n  , abs            = Math.abs\n  , pow            = Math.pow\n  , min            = Math.min\n  , floor          = Math.floor\n  , log            = Math.log\n  , LN2            = Math.LN2\n  , BUFFER         = 'buffer'\n  , BYTE_LENGTH    = 'byteLength'\n  , BYTE_OFFSET    = 'byteOffset'\n  , $BUFFER        = DESCRIPTORS ? '_b' : BUFFER\n  , $LENGTH        = DESCRIPTORS ? '_l' : BYTE_LENGTH\n  , $OFFSET        = DESCRIPTORS ? '_o' : BYTE_OFFSET;\n\n// IEEE754 conversions based on https://github.com/feross/ieee754\nvar packIEEE754 = function(value, mLen, nBytes){\n  var buffer = Array(nBytes)\n    , eLen   = nBytes * 8 - mLen - 1\n    , eMax   = (1 << eLen) - 1\n    , eBias  = eMax >> 1\n    , rt     = mLen === 23 ? pow(2, -24) - pow(2, -77) : 0\n    , i      = 0\n    , s      = value < 0 || value === 0 && 1 / value < 0 ? 1 : 0\n    , e, m, c;\n  value = abs(value)\n  if(value != value || value === Infinity){\n    m = value != value ? 1 : 0;\n    e = eMax;\n  } else {\n    e = floor(log(value) / LN2);\n    if(value * (c = pow(2, -e)) < 1){\n      e--;\n      c *= 2;\n    }\n    if(e + eBias >= 1){\n      value += rt / c;\n    } else {\n      value += rt * pow(2, 1 - eBias);\n    }\n    if(value * c >= 2){\n      e++;\n      c /= 2;\n    }\n    if(e + eBias >= eMax){\n      m = 0;\n      e = eMax;\n    } else if(e + eBias >= 1){\n      m = (value * c - 1) * pow(2, mLen);\n      e = e + eBias;\n    } else {\n      m = value * pow(2, eBias - 1) * pow(2, mLen);\n      e = 0;\n    }\n  }\n  for(; mLen >= 8; buffer[i++] = m & 255, m /= 256, mLen -= 8);\n  e = e << mLen | m;\n  eLen += mLen;\n  for(; eLen > 0; buffer[i++] = e & 255, e /= 256, eLen -= 8);\n  buffer[--i] |= s * 128;\n  return buffer;\n};\nvar unpackIEEE754 = function(buffer, mLen, nBytes){\n  var eLen  = nBytes * 8 - mLen - 1\n    , eMax  = (1 << eLen) - 1\n    , eBias = eMax >> 1\n    , nBits = eLen - 7\n    , i     = nBytes - 1\n    , s     = buffer[i--]\n    , e     = s & 127\n    , m;\n  s >>= 7;\n  for(; nBits > 0; e = e * 256 + buffer[i], i--, nBits -= 8);\n  m = e & (1 << -nBits) - 1;\n  e >>= -nBits;\n  nBits += mLen;\n  for(; nBits > 0; m = m * 256 + buffer[i], i--, nBits -= 8);\n  if(e === 0){\n    e = 1 - eBias;\n  } else if(e === eMax){\n    return m ? NaN : s ? -Infinity : Infinity;\n  } else {\n    m = m + pow(2, mLen);\n    e = e - eBias;\n  } return (s ? -1 : 1) * m * pow(2, e - mLen);\n};\n\nvar unpackI32 = function(bytes){\n  return bytes[3] << 24 | bytes[2] << 16 | bytes[1] << 8 | bytes[0];\n};\nvar packI8 = function(it){\n  return [it & 0xff];\n};\nvar packI16 = function(it){\n  return [it & 0xff, it >> 8 & 0xff];\n};\nvar packI32 = function(it){\n  return [it & 0xff, it >> 8 & 0xff, it >> 16 & 0xff, it >> 24 & 0xff];\n};\nvar packF64 = function(it){\n  return packIEEE754(it, 52, 8);\n};\nvar packF32 = function(it){\n  return packIEEE754(it, 23, 4);\n};\n\nvar addGetter = function(C, key, internal){\n  dP(C[PROTOTYPE], key, {get: function(){ return this[internal]; }});\n};\n\nvar get = function(view, bytes, index, isLittleEndian){\n  var numIndex = +index\n    , intIndex = toInteger(numIndex);\n  if(numIndex != intIndex || intIndex < 0 || intIndex + bytes > view[$LENGTH])throw RangeError(WRONG_INDEX);\n  var store = view[$BUFFER]._b\n    , start = intIndex + view[$OFFSET]\n    , pack  = store.slice(start, start + bytes);\n  return isLittleEndian ? pack : pack.reverse();\n};\nvar set = function(view, bytes, index, conversion, value, isLittleEndian){\n  var numIndex = +index\n    , intIndex = toInteger(numIndex);\n  if(numIndex != intIndex || intIndex < 0 || intIndex + bytes > view[$LENGTH])throw RangeError(WRONG_INDEX);\n  var store = view[$BUFFER]._b\n    , start = intIndex + view[$OFFSET]\n    , pack  = conversion(+value);\n  for(var i = 0; i < bytes; i++)store[start + i] = pack[isLittleEndian ? i : bytes - i - 1];\n};\n\nvar validateArrayBufferArguments = function(that, length){\n  anInstance(that, $ArrayBuffer, ARRAY_BUFFER);\n  var numberLength = +length\n    , byteLength   = toLength(numberLength);\n  if(numberLength != byteLength)throw RangeError(WRONG_LENGTH);\n  return byteLength;\n};\n\nif(!$typed.ABV){\n  $ArrayBuffer = function ArrayBuffer(length){\n    var byteLength = validateArrayBufferArguments(this, length);\n    this._b       = arrayFill.call(Array(byteLength), 0);\n    this[$LENGTH] = byteLength;\n  };\n\n  $DataView = function DataView(buffer, byteOffset, byteLength){\n    anInstance(this, $DataView, DATA_VIEW);\n    anInstance(buffer, $ArrayBuffer, DATA_VIEW);\n    var bufferLength = buffer[$LENGTH]\n      , offset       = toInteger(byteOffset);\n    if(offset < 0 || offset > bufferLength)throw RangeError('Wrong offset!');\n    byteLength = byteLength === undefined ? bufferLength - offset : toLength(byteLength);\n    if(offset + byteLength > bufferLength)throw RangeError(WRONG_LENGTH);\n    this[$BUFFER] = buffer;\n    this[$OFFSET] = offset;\n    this[$LENGTH] = byteLength;\n  };\n\n  if(DESCRIPTORS){\n    addGetter($ArrayBuffer, BYTE_LENGTH, '_l');\n    addGetter($DataView, BUFFER, '_b');\n    addGetter($DataView, BYTE_LENGTH, '_l');\n    addGetter($DataView, BYTE_OFFSET, '_o');\n  }\n\n  redefineAll($DataView[PROTOTYPE], {\n    getInt8: function getInt8(byteOffset){\n      return get(this, 1, byteOffset)[0] << 24 >> 24;\n    },\n    getUint8: function getUint8(byteOffset){\n      return get(this, 1, byteOffset)[0];\n    },\n    getInt16: function getInt16(byteOffset /*, littleEndian */){\n      var bytes = get(this, 2, byteOffset, arguments[1]);\n      return (bytes[1] << 8 | bytes[0]) << 16 >> 16;\n    },\n    getUint16: function getUint16(byteOffset /*, littleEndian */){\n      var bytes = get(this, 2, byteOffset, arguments[1]);\n      return bytes[1] << 8 | bytes[0];\n    },\n    getInt32: function getInt32(byteOffset /*, littleEndian */){\n      return unpackI32(get(this, 4, byteOffset, arguments[1]));\n    },\n    getUint32: function getUint32(byteOffset /*, littleEndian */){\n      return unpackI32(get(this, 4, byteOffset, arguments[1])) >>> 0;\n    },\n    getFloat32: function getFloat32(byteOffset /*, littleEndian */){\n      return unpackIEEE754(get(this, 4, byteOffset, arguments[1]), 23, 4);\n    },\n    getFloat64: function getFloat64(byteOffset /*, littleEndian */){\n      return unpackIEEE754(get(this, 8, byteOffset, arguments[1]), 52, 8);\n    },\n    setInt8: function setInt8(byteOffset, value){\n      set(this, 1, byteOffset, packI8, value);\n    },\n    setUint8: function setUint8(byteOffset, value){\n      set(this, 1, byteOffset, packI8, value);\n    },\n    setInt16: function setInt16(byteOffset, value /*, littleEndian */){\n      set(this, 2, byteOffset, packI16, value, arguments[2]);\n    },\n    setUint16: function setUint16(byteOffset, value /*, littleEndian */){\n      set(this, 2, byteOffset, packI16, value, arguments[2]);\n    },\n    setInt32: function setInt32(byteOffset, value /*, littleEndian */){\n      set(this, 4, byteOffset, packI32, value, arguments[2]);\n    },\n    setUint32: function setUint32(byteOffset, value /*, littleEndian */){\n      set(this, 4, byteOffset, packI32, value, arguments[2]);\n    },\n    setFloat32: function setFloat32(byteOffset, value /*, littleEndian */){\n      set(this, 4, byteOffset, packF32, value, arguments[2]);\n    },\n    setFloat64: function setFloat64(byteOffset, value /*, littleEndian */){\n      set(this, 8, byteOffset, packF64, value, arguments[2]);\n    }\n  });\n} else {\n  if(!fails(function(){\n    new $ArrayBuffer;     // eslint-disable-line no-new\n  }) || !fails(function(){\n    new $ArrayBuffer(.5); // eslint-disable-line no-new\n  })){\n    $ArrayBuffer = function ArrayBuffer(length){\n      return new BaseBuffer(validateArrayBufferArguments(this, length));\n    };\n    var ArrayBufferProto = $ArrayBuffer[PROTOTYPE] = BaseBuffer[PROTOTYPE];\n    for(var keys = gOPN(BaseBuffer), j = 0, key; keys.length > j; ){\n      if(!((key = keys[j++]) in $ArrayBuffer))hide($ArrayBuffer, key, BaseBuffer[key]);\n    };\n    if(!LIBRARY)ArrayBufferProto.constructor = $ArrayBuffer;\n  }\n  // iOS Safari 7.x bug\n  var view = new $DataView(new $ArrayBuffer(2))\n    , $setInt8 = $DataView[PROTOTYPE].setInt8;\n  view.setInt8(0, 2147483648);\n  view.setInt8(1, 2147483649);\n  if(view.getInt8(0) || !view.getInt8(1))redefineAll($DataView[PROTOTYPE], {\n    setInt8: function setInt8(byteOffset, value){\n      $setInt8.call(this, byteOffset, value << 24 >> 24);\n    },\n    setUint8: function setUint8(byteOffset, value){\n      $setInt8.call(this, byteOffset, value << 24 >> 24);\n    }\n  }, true);\n}\nsetToStringTag($ArrayBuffer, ARRAY_BUFFER);\nsetToStringTag($DataView, DATA_VIEW);\nhide($DataView[PROTOTYPE], $typed.VIEW, true);\nexports[ARRAY_BUFFER] = $ArrayBuffer;\nexports[DATA_VIEW] = $DataView;\n},{\"./_an-instance\":120,\"./_array-fill\":123,\"./_descriptors\":142,\"./_fails\":148,\"./_global\":152,\"./_hide\":154,\"./_library\":172,\"./_object-dp\":181,\"./_object-gopn\":186,\"./_redefine-all\":200,\"./_set-to-string-tag\":206,\"./_to-integer\":220,\"./_to-length\":222,\"./_typed\":227}],227:[function(require,module,exports){\nvar global = require('./_global')\n  , hide   = require('./_hide')\n  , uid    = require('./_uid')\n  , TYPED  = uid('typed_array')\n  , VIEW   = uid('view')\n  , ABV    = !!(global.ArrayBuffer && global.DataView)\n  , CONSTR = ABV\n  , i = 0, l = 9, Typed;\n\nvar TypedArrayConstructors = (\n  'Int8Array,Uint8Array,Uint8ClampedArray,Int16Array,Uint16Array,Int32Array,Uint32Array,Float32Array,Float64Array'\n).split(',');\n\nwhile(i < l){\n  if(Typed = global[TypedArrayConstructors[i++]]){\n    hide(Typed.prototype, TYPED, true);\n    hide(Typed.prototype, VIEW, true);\n  } else CONSTR = false;\n}\n\nmodule.exports = {\n  ABV:    ABV,\n  CONSTR: CONSTR,\n  TYPED:  TYPED,\n  VIEW:   VIEW\n};\n},{\"./_global\":152,\"./_hide\":154,\"./_uid\":228}],228:[function(require,module,exports){\narguments[4][97][0].apply(exports,arguments)\n},{\"dup\":97}],229:[function(require,module,exports){\narguments[4][98][0].apply(exports,arguments)\n},{\"./_core\":137,\"./_global\":152,\"./_library\":172,\"./_object-dp\":181,\"./_wks-ext\":230,\"dup\":98}],230:[function(require,module,exports){\narguments[4][99][0].apply(exports,arguments)\n},{\"./_wks\":231,\"dup\":99}],231:[function(require,module,exports){\narguments[4][100][0].apply(exports,arguments)\n},{\"./_global\":152,\"./_shared\":208,\"./_uid\":228,\"dup\":100}],232:[function(require,module,exports){\narguments[4][101][0].apply(exports,arguments)\n},{\"./_classof\":131,\"./_core\":137,\"./_iterators\":170,\"./_wks\":231,\"dup\":101}],233:[function(require,module,exports){\nvar classof   = require('./_classof')\n  , ITERATOR  = require('./_wks')('iterator')\n  , Iterators = require('./_iterators');\nmodule.exports = require('./_core').isIterable = function(it){\n  var O = Object(it);\n  return O[ITERATOR] !== undefined\n    || '@@iterator' in O\n    || Iterators.hasOwnProperty(classof(O));\n};\n},{\"./_classof\":131,\"./_core\":137,\"./_iterators\":170,\"./_wks\":231}],234:[function(require,module,exports){\n// https://github.com/benjamingr/RexExp.escape\nvar $export = require('./_export')\n  , $re     = require('./_replacer')(/[\\\\^$*+?.()|[\\]{}]/g, '\\\\$&');\n\n$export($export.S, 'RegExp', {escape: function escape(it){ return $re(it); }});\n\n},{\"./_export\":146,\"./_replacer\":202}],235:[function(require,module,exports){\n// 22.1.3.3 Array.prototype.copyWithin(target, start, end = this.length)\nvar $export = require('./_export');\n\n$export($export.P, 'Array', {copyWithin: require('./_array-copy-within')});\n\nrequire('./_add-to-unscopables')('copyWithin');\n},{\"./_add-to-unscopables\":119,\"./_array-copy-within\":122,\"./_export\":146}],236:[function(require,module,exports){\n'use strict';\r\nvar $export = require('./_export')\r\n  , $every  = require('./_array-methods')(4);\r\n\r\n$export($export.P + $export.F * !require('./_strict-method')([].every, true), 'Array', {\r\n  // 22.1.3.5 / 15.4.4.16 Array.prototype.every(callbackfn [, thisArg])\r\n  every: function every(callbackfn /* , thisArg */){\r\n    return $every(this, callbackfn, arguments[1]);\r\n  }\r\n});\n},{\"./_array-methods\":126,\"./_export\":146,\"./_strict-method\":210}],237:[function(require,module,exports){\n// 22.1.3.6 Array.prototype.fill(value, start = 0, end = this.length)\nvar $export = require('./_export');\n\n$export($export.P, 'Array', {fill: require('./_array-fill')});\n\nrequire('./_add-to-unscopables')('fill');\n},{\"./_add-to-unscopables\":119,\"./_array-fill\":123,\"./_export\":146}],238:[function(require,module,exports){\n'use strict';\nvar $export = require('./_export')\n  , $filter = require('./_array-methods')(2);\n\n$export($export.P + $export.F * !require('./_strict-method')([].filter, true), 'Array', {\n  // 22.1.3.7 / 15.4.4.20 Array.prototype.filter(callbackfn [, thisArg])\n  filter: function filter(callbackfn /* , thisArg */){\n    return $filter(this, callbackfn, arguments[1]);\n  }\n});\n},{\"./_array-methods\":126,\"./_export\":146,\"./_strict-method\":210}],239:[function(require,module,exports){\n'use strict';\n// 22.1.3.9 Array.prototype.findIndex(predicate, thisArg = undefined)\nvar $export = require('./_export')\n  , $find   = require('./_array-methods')(6)\n  , KEY     = 'findIndex'\n  , forced  = true;\n// Shouldn't skip holes\nif(KEY in [])Array(1)[KEY](function(){ forced = false; });\n$export($export.P + $export.F * forced, 'Array', {\n  findIndex: function findIndex(callbackfn/*, that = undefined */){\n    return $find(this, callbackfn, arguments.length > 1 ? arguments[1] : undefined);\n  }\n});\nrequire('./_add-to-unscopables')(KEY);\n},{\"./_add-to-unscopables\":119,\"./_array-methods\":126,\"./_export\":146}],240:[function(require,module,exports){\n'use strict';\n// 22.1.3.8 Array.prototype.find(predicate, thisArg = undefined)\nvar $export = require('./_export')\n  , $find   = require('./_array-methods')(5)\n  , KEY     = 'find'\n  , forced  = true;\n// Shouldn't skip holes\nif(KEY in [])Array(1)[KEY](function(){ forced = false; });\n$export($export.P + $export.F * forced, 'Array', {\n  find: function find(callbackfn/*, that = undefined */){\n    return $find(this, callbackfn, arguments.length > 1 ? arguments[1] : undefined);\n  }\n});\nrequire('./_add-to-unscopables')(KEY);\n},{\"./_add-to-unscopables\":119,\"./_array-methods\":126,\"./_export\":146}],241:[function(require,module,exports){\n'use strict';\r\nvar $export  = require('./_export')\r\n  , $forEach = require('./_array-methods')(0)\r\n  , STRICT   = require('./_strict-method')([].forEach, true);\r\n\r\n$export($export.P + $export.F * !STRICT, 'Array', {\r\n  // 22.1.3.10 / 15.4.4.18 Array.prototype.forEach(callbackfn [, thisArg])\r\n  forEach: function forEach(callbackfn /* , thisArg */){\r\n    return $forEach(this, callbackfn, arguments[1]);\r\n  }\r\n});\n},{\"./_array-methods\":126,\"./_export\":146,\"./_strict-method\":210}],242:[function(require,module,exports){\n'use strict';\nvar ctx            = require('./_ctx')\n  , $export        = require('./_export')\n  , toObject       = require('./_to-object')\n  , call           = require('./_iter-call')\n  , isArrayIter    = require('./_is-array-iter')\n  , toLength       = require('./_to-length')\n  , createProperty = require('./_create-property')\n  , getIterFn      = require('./core.get-iterator-method');\n\n$export($export.S + $export.F * !require('./_iter-detect')(function(iter){ Array.from(iter); }), 'Array', {\n  // 22.1.2.1 Array.from(arrayLike, mapfn = undefined, thisArg = undefined)\n  from: function from(arrayLike/*, mapfn = undefined, thisArg = undefined*/){\n    var O       = toObject(arrayLike)\n      , C       = typeof this == 'function' ? this : Array\n      , aLen    = arguments.length\n      , mapfn   = aLen > 1 ? arguments[1] : undefined\n      , mapping = mapfn !== undefined\n      , index   = 0\n      , iterFn  = getIterFn(O)\n      , length, result, step, iterator;\n    if(mapping)mapfn = ctx(mapfn, aLen > 2 ? arguments[2] : undefined, 2);\n    // if object isn't iterable or it's array with default iterator - use simple case\n    if(iterFn != undefined && !(C == Array && isArrayIter(iterFn))){\n      for(iterator = iterFn.call(O), result = new C; !(step = iterator.next()).done; index++){\n        createProperty(result, index, mapping ? call(iterator, mapfn, [step.value, index], true) : step.value);\n      }\n    } else {\n      length = toLength(O.length);\n      for(result = new C(length); length > index; index++){\n        createProperty(result, index, mapping ? mapfn(O[index], index) : O[index]);\n      }\n    }\n    result.length = index;\n    return result;\n  }\n});\n\n},{\"./_create-property\":138,\"./_ctx\":139,\"./_export\":146,\"./_is-array-iter\":160,\"./_iter-call\":165,\"./_iter-detect\":168,\"./_to-length\":222,\"./_to-object\":223,\"./core.get-iterator-method\":232}],243:[function(require,module,exports){\n'use strict';\r\nvar $export       = require('./_export')\r\n  , $indexOf      = require('./_array-includes')(false)\r\n  , $native       = [].indexOf\r\n  , NEGATIVE_ZERO = !!$native && 1 / [1].indexOf(1, -0) < 0;\r\n\r\n$export($export.P + $export.F * (NEGATIVE_ZERO || !require('./_strict-method')($native)), 'Array', {\r\n  // 22.1.3.11 / 15.4.4.14 Array.prototype.indexOf(searchElement [, fromIndex])\r\n  indexOf: function indexOf(searchElement /*, fromIndex = 0 */){\r\n    return NEGATIVE_ZERO\r\n      // convert -0 to +0\r\n      ? $native.apply(this, arguments) || 0\r\n      : $indexOf(this, searchElement, arguments[1]);\r\n  }\r\n});\n},{\"./_array-includes\":125,\"./_export\":146,\"./_strict-method\":210}],244:[function(require,module,exports){\n// 22.1.2.2 / 15.4.3.2 Array.isArray(arg)\r\nvar $export = require('./_export');\r\n\r\n$export($export.S, 'Array', {isArray: require('./_is-array')});\n},{\"./_export\":146,\"./_is-array\":161}],245:[function(require,module,exports){\narguments[4][102][0].apply(exports,arguments)\n},{\"./_add-to-unscopables\":119,\"./_iter-define\":167,\"./_iter-step\":169,\"./_iterators\":170,\"./_to-iobject\":221,\"dup\":102}],246:[function(require,module,exports){\n'use strict';\r\n// 22.1.3.13 Array.prototype.join(separator)\r\nvar $export   = require('./_export')\r\n  , toIObject = require('./_to-iobject')\r\n  , arrayJoin = [].join;\r\n\r\n// fallback for not array-like strings\r\n$export($export.P + $export.F * (require('./_iobject') != Object || !require('./_strict-method')(arrayJoin)), 'Array', {\r\n  join: function join(separator){\r\n    return arrayJoin.call(toIObject(this), separator === undefined ? ',' : separator);\r\n  }\r\n});\n},{\"./_export\":146,\"./_iobject\":159,\"./_strict-method\":210,\"./_to-iobject\":221}],247:[function(require,module,exports){\n'use strict';\r\nvar $export       = require('./_export')\r\n  , toIObject     = require('./_to-iobject')\r\n  , toInteger     = require('./_to-integer')\r\n  , toLength      = require('./_to-length')\r\n  , $native       = [].lastIndexOf\r\n  , NEGATIVE_ZERO = !!$native && 1 / [1].lastIndexOf(1, -0) < 0;\r\n\r\n$export($export.P + $export.F * (NEGATIVE_ZERO || !require('./_strict-method')($native)), 'Array', {\r\n  // 22.1.3.14 / 15.4.4.15 Array.prototype.lastIndexOf(searchElement [, fromIndex])\r\n  lastIndexOf: function lastIndexOf(searchElement /*, fromIndex = @[*-1] */){\r\n    // convert -0 to +0\r\n    if(NEGATIVE_ZERO)return $native.apply(this, arguments) || 0;\r\n    var O      = toIObject(this)\r\n      , length = toLength(O.length)\r\n      , index  = length - 1;\r\n    if(arguments.length > 1)index = Math.min(index, toInteger(arguments[1]));\r\n    if(index < 0)index = length + index;\r\n    for(;index >= 0; index--)if(index in O)if(O[index] === searchElement)return index || 0;\r\n    return -1;\r\n  }\r\n});\n},{\"./_export\":146,\"./_strict-method\":210,\"./_to-integer\":220,\"./_to-iobject\":221,\"./_to-length\":222}],248:[function(require,module,exports){\n'use strict';\r\nvar $export = require('./_export')\r\n  , $map    = require('./_array-methods')(1);\r\n\r\n$export($export.P + $export.F * !require('./_strict-method')([].map, true), 'Array', {\r\n  // 22.1.3.15 / 15.4.4.19 Array.prototype.map(callbackfn [, thisArg])\r\n  map: function map(callbackfn /* , thisArg */){\r\n    return $map(this, callbackfn, arguments[1]);\r\n  }\r\n});\n},{\"./_array-methods\":126,\"./_export\":146,\"./_strict-method\":210}],249:[function(require,module,exports){\n'use strict';\nvar $export        = require('./_export')\n  , createProperty = require('./_create-property');\n\n// WebKit Array.of isn't generic\n$export($export.S + $export.F * require('./_fails')(function(){\n  function F(){}\n  return !(Array.of.call(F) instanceof F);\n}), 'Array', {\n  // 22.1.2.3 Array.of( ...items)\n  of: function of(/* ...args */){\n    var index  = 0\n      , aLen   = arguments.length\n      , result = new (typeof this == 'function' ? this : Array)(aLen);\n    while(aLen > index)createProperty(result, index, arguments[index++]);\n    result.length = aLen;\n    return result;\n  }\n});\n},{\"./_create-property\":138,\"./_export\":146,\"./_fails\":148}],250:[function(require,module,exports){\n'use strict';\r\nvar $export = require('./_export')\r\n  , $reduce = require('./_array-reduce');\r\n\r\n$export($export.P + $export.F * !require('./_strict-method')([].reduceRight, true), 'Array', {\r\n  // 22.1.3.19 / 15.4.4.22 Array.prototype.reduceRight(callbackfn [, initialValue])\r\n  reduceRight: function reduceRight(callbackfn /* , initialValue */){\r\n    return $reduce(this, callbackfn, arguments.length, arguments[1], true);\r\n  }\r\n});\n},{\"./_array-reduce\":127,\"./_export\":146,\"./_strict-method\":210}],251:[function(require,module,exports){\n'use strict';\r\nvar $export = require('./_export')\r\n  , $reduce = require('./_array-reduce');\r\n\r\n$export($export.P + $export.F * !require('./_strict-method')([].reduce, true), 'Array', {\r\n  // 22.1.3.18 / 15.4.4.21 Array.prototype.reduce(callbackfn [, initialValue])\r\n  reduce: function reduce(callbackfn /* , initialValue */){\r\n    return $reduce(this, callbackfn, arguments.length, arguments[1], false);\r\n  }\r\n});\n},{\"./_array-reduce\":127,\"./_export\":146,\"./_strict-method\":210}],252:[function(require,module,exports){\n'use strict';\r\nvar $export    = require('./_export')\r\n  , html       = require('./_html')\r\n  , cof        = require('./_cof')\r\n  , toIndex    = require('./_to-index')\r\n  , toLength   = require('./_to-length')\r\n  , arraySlice = [].slice;\r\n\r\n// fallback for not array-like ES3 strings and DOM objects\r\n$export($export.P + $export.F * require('./_fails')(function(){\r\n  if(html)arraySlice.call(html);\r\n}), 'Array', {\r\n  slice: function slice(begin, end){\r\n    var len   = toLength(this.length)\r\n      , klass = cof(this);\r\n    end = end === undefined ? len : end;\r\n    if(klass == 'Array')return arraySlice.call(this, begin, end);\r\n    var start  = toIndex(begin, len)\r\n      , upTo   = toIndex(end, len)\r\n      , size   = toLength(upTo - start)\r\n      , cloned = Array(size)\r\n      , i      = 0;\r\n    for(; i < size; i++)cloned[i] = klass == 'String'\r\n      ? this.charAt(start + i)\r\n      : this[start + i];\r\n    return cloned;\r\n  }\r\n});\n},{\"./_cof\":132,\"./_export\":146,\"./_fails\":148,\"./_html\":155,\"./_to-index\":219,\"./_to-length\":222}],253:[function(require,module,exports){\n'use strict';\r\nvar $export = require('./_export')\r\n  , $some   = require('./_array-methods')(3);\r\n\r\n$export($export.P + $export.F * !require('./_strict-method')([].some, true), 'Array', {\r\n  // 22.1.3.23 / 15.4.4.17 Array.prototype.some(callbackfn [, thisArg])\r\n  some: function some(callbackfn /* , thisArg */){\r\n    return $some(this, callbackfn, arguments[1]);\r\n  }\r\n});\n},{\"./_array-methods\":126,\"./_export\":146,\"./_strict-method\":210}],254:[function(require,module,exports){\n'use strict';\r\nvar $export   = require('./_export')\r\n  , aFunction = require('./_a-function')\r\n  , toObject  = require('./_to-object')\r\n  , fails     = require('./_fails')\r\n  , $sort     = [].sort\r\n  , test      = [1, 2, 3];\r\n\r\n$export($export.P + $export.F * (fails(function(){\r\n  // IE8-\r\n  test.sort(undefined);\r\n}) || !fails(function(){\r\n  // V8 bug\r\n  test.sort(null);\r\n  // Old WebKit\r\n}) || !require('./_strict-method')($sort)), 'Array', {\r\n  // 22.1.3.25 Array.prototype.sort(comparefn)\r\n  sort: function sort(comparefn){\r\n    return comparefn === undefined\r\n      ? $sort.call(toObject(this))\r\n      : $sort.call(toObject(this), aFunction(comparefn));\r\n  }\r\n});\n},{\"./_a-function\":117,\"./_export\":146,\"./_fails\":148,\"./_strict-method\":210,\"./_to-object\":223}],255:[function(require,module,exports){\nrequire('./_set-species')('Array');\n},{\"./_set-species\":205}],256:[function(require,module,exports){\n// 20.3.3.1 / 15.9.4.4 Date.now()\r\nvar $export = require('./_export');\r\n\r\n$export($export.S, 'Date', {now: function(){ return new Date().getTime(); }});\n},{\"./_export\":146}],257:[function(require,module,exports){\n'use strict';\r\n// 20.3.4.36 / 15.9.5.43 Date.prototype.toISOString()\r\nvar $export = require('./_export')\r\n  , fails   = require('./_fails')\r\n  , getTime = Date.prototype.getTime;\r\n\r\nvar lz = function(num){\r\n  return num > 9 ? num : '0' + num;\r\n};\r\n\r\n// PhantomJS / old WebKit has a broken implementations\r\n$export($export.P + $export.F * (fails(function(){\r\n  return new Date(-5e13 - 1).toISOString() != '0385-07-25T07:06:39.999Z';\r\n}) || !fails(function(){\r\n  new Date(NaN).toISOString();\r\n})), 'Date', {\r\n  toISOString: function toISOString(){\r\n    if(!isFinite(getTime.call(this)))throw RangeError('Invalid time value');\r\n    var d = this\r\n      , y = d.getUTCFullYear()\r\n      , m = d.getUTCMilliseconds()\r\n      , s = y < 0 ? '-' : y > 9999 ? '+' : '';\r\n    return s + ('00000' + Math.abs(y)).slice(s ? -6 : -4) +\r\n      '-' + lz(d.getUTCMonth() + 1) + '-' + lz(d.getUTCDate()) +\r\n      'T' + lz(d.getUTCHours()) + ':' + lz(d.getUTCMinutes()) +\r\n      ':' + lz(d.getUTCSeconds()) + '.' + (m > 99 ? m : '0' + lz(m)) + 'Z';\r\n  }\r\n});\n},{\"./_export\":146,\"./_fails\":148}],258:[function(require,module,exports){\n'use strict';\nvar $export     = require('./_export')\n  , toObject    = require('./_to-object')\n  , toPrimitive = require('./_to-primitive');\n\n$export($export.P + $export.F * require('./_fails')(function(){\n  return new Date(NaN).toJSON() !== null || Date.prototype.toJSON.call({toISOString: function(){ return 1; }}) !== 1;\n}), 'Date', {\n  toJSON: function toJSON(key){\n    var O  = toObject(this)\n      , pv = toPrimitive(O);\n    return typeof pv == 'number' && !isFinite(pv) ? null : O.toISOString();\n  }\n});\n},{\"./_export\":146,\"./_fails\":148,\"./_to-object\":223,\"./_to-primitive\":224}],259:[function(require,module,exports){\nvar TO_PRIMITIVE = require('./_wks')('toPrimitive')\r\n  , proto        = Date.prototype;\r\n\r\nif(!(TO_PRIMITIVE in proto))require('./_hide')(proto, TO_PRIMITIVE, require('./_date-to-primitive'));\n},{\"./_date-to-primitive\":140,\"./_hide\":154,\"./_wks\":231}],260:[function(require,module,exports){\nvar DateProto    = Date.prototype\n  , INVALID_DATE = 'Invalid Date'\n  , TO_STRING    = 'toString'\n  , $toString    = DateProto[TO_STRING]\n  , getTime      = DateProto.getTime;\nif(new Date(NaN) + '' != INVALID_DATE){\n  require('./_redefine')(DateProto, TO_STRING, function toString(){\n    var value = getTime.call(this);\n    return value === value ? $toString.call(this) : INVALID_DATE;\n  });\n}\n},{\"./_redefine\":201}],261:[function(require,module,exports){\n// 19.2.3.2 / 15.3.4.5 Function.prototype.bind(thisArg, args...)\r\nvar $export = require('./_export');\r\n\r\n$export($export.P, 'Function', {bind: require('./_bind')});\n},{\"./_bind\":130,\"./_export\":146}],262:[function(require,module,exports){\n'use strict';\nvar isObject       = require('./_is-object')\n  , getPrototypeOf = require('./_object-gpo')\n  , HAS_INSTANCE   = require('./_wks')('hasInstance')\n  , FunctionProto  = Function.prototype;\n// 19.2.3.6 Function.prototype[@@hasInstance](V)\nif(!(HAS_INSTANCE in FunctionProto))require('./_object-dp').f(FunctionProto, HAS_INSTANCE, {value: function(O){\n  if(typeof this != 'function' || !isObject(O))return false;\n  if(!isObject(this.prototype))return O instanceof this;\n  // for environment w/o native `@@hasInstance` logic enough `instanceof`, but add this:\n  while(O = getPrototypeOf(O))if(this.prototype === O)return true;\n  return false;\n}});\n},{\"./_is-object\":163,\"./_object-dp\":181,\"./_object-gpo\":188,\"./_wks\":231}],263:[function(require,module,exports){\nvar dP         = require('./_object-dp').f\n  , createDesc = require('./_property-desc')\n  , has        = require('./_has')\n  , FProto     = Function.prototype\n  , nameRE     = /^\\s*function ([^ (]*)/\n  , NAME       = 'name';\n\nvar isExtensible = Object.isExtensible || function(){\n  return true;\n};\n\n// 19.2.4.2 name\nNAME in FProto || require('./_descriptors') && dP(FProto, NAME, {\n  configurable: true,\n  get: function(){\n    try {\n      var that = this\n        , name = ('' + that).match(nameRE)[1];\n      has(that, NAME) || !isExtensible(that) || dP(that, NAME, createDesc(5, name));\n      return name;\n    } catch(e){\n      return '';\n    }\n  }\n});\n},{\"./_descriptors\":142,\"./_has\":153,\"./_object-dp\":181,\"./_property-desc\":199}],264:[function(require,module,exports){\n'use strict';\nvar strong = require('./_collection-strong');\n\n// 23.1 Map Objects\nmodule.exports = require('./_collection')('Map', function(get){\n  return function Map(){ return get(this, arguments.length > 0 ? arguments[0] : undefined); };\n}, {\n  // 23.1.3.6 Map.prototype.get(key)\n  get: function get(key){\n    var entry = strong.getEntry(this, key);\n    return entry && entry.v;\n  },\n  // 23.1.3.9 Map.prototype.set(key, value)\n  set: function set(key, value){\n    return strong.def(this, key === 0 ? 0 : key, value);\n  }\n}, strong, true);\n},{\"./_collection\":136,\"./_collection-strong\":133}],265:[function(require,module,exports){\n// 20.2.2.3 Math.acosh(x)\nvar $export = require('./_export')\n  , log1p   = require('./_math-log1p')\n  , sqrt    = Math.sqrt\n  , $acosh  = Math.acosh;\n\n$export($export.S + $export.F * !($acosh\n  // V8 bug: https://code.google.com/p/v8/issues/detail?id=3509\n  && Math.floor($acosh(Number.MAX_VALUE)) == 710\n  // Tor Browser bug: Math.acosh(Infinity) -> NaN \n  && $acosh(Infinity) == Infinity\n), 'Math', {\n  acosh: function acosh(x){\n    return (x = +x) < 1 ? NaN : x > 94906265.62425156\n      ? Math.log(x) + Math.LN2\n      : log1p(x - 1 + sqrt(x - 1) * sqrt(x + 1));\n  }\n});\n},{\"./_export\":146,\"./_math-log1p\":174}],266:[function(require,module,exports){\n// 20.2.2.5 Math.asinh(x)\nvar $export = require('./_export')\n  , $asinh  = Math.asinh;\n\nfunction asinh(x){\n  return !isFinite(x = +x) || x == 0 ? x : x < 0 ? -asinh(-x) : Math.log(x + Math.sqrt(x * x + 1));\n}\n\n// Tor Browser bug: Math.asinh(0) -> -0 \n$export($export.S + $export.F * !($asinh && 1 / $asinh(0) > 0), 'Math', {asinh: asinh});\n},{\"./_export\":146}],267:[function(require,module,exports){\n// 20.2.2.7 Math.atanh(x)\nvar $export = require('./_export')\n  , $atanh  = Math.atanh;\n\n// Tor Browser bug: Math.atanh(-0) -> 0 \n$export($export.S + $export.F * !($atanh && 1 / $atanh(-0) < 0), 'Math', {\n  atanh: function atanh(x){\n    return (x = +x) == 0 ? x : Math.log((1 + x) / (1 - x)) / 2;\n  }\n});\n},{\"./_export\":146}],268:[function(require,module,exports){\n// 20.2.2.9 Math.cbrt(x)\nvar $export = require('./_export')\n  , sign    = require('./_math-sign');\n\n$export($export.S, 'Math', {\n  cbrt: function cbrt(x){\n    return sign(x = +x) * Math.pow(Math.abs(x), 1 / 3);\n  }\n});\n},{\"./_export\":146,\"./_math-sign\":175}],269:[function(require,module,exports){\n// 20.2.2.11 Math.clz32(x)\nvar $export = require('./_export');\n\n$export($export.S, 'Math', {\n  clz32: function clz32(x){\n    return (x >>>= 0) ? 31 - Math.floor(Math.log(x + 0.5) * Math.LOG2E) : 32;\n  }\n});\n},{\"./_export\":146}],270:[function(require,module,exports){\n// 20.2.2.12 Math.cosh(x)\nvar $export = require('./_export')\n  , exp     = Math.exp;\n\n$export($export.S, 'Math', {\n  cosh: function cosh(x){\n    return (exp(x = +x) + exp(-x)) / 2;\n  }\n});\n},{\"./_export\":146}],271:[function(require,module,exports){\n// 20.2.2.14 Math.expm1(x)\nvar $export = require('./_export')\n  , $expm1  = require('./_math-expm1');\n\n$export($export.S + $export.F * ($expm1 != Math.expm1), 'Math', {expm1: $expm1});\n},{\"./_export\":146,\"./_math-expm1\":173}],272:[function(require,module,exports){\n// 20.2.2.16 Math.fround(x)\nvar $export   = require('./_export')\n  , sign      = require('./_math-sign')\n  , pow       = Math.pow\n  , EPSILON   = pow(2, -52)\n  , EPSILON32 = pow(2, -23)\n  , MAX32     = pow(2, 127) * (2 - EPSILON32)\n  , MIN32     = pow(2, -126);\n\nvar roundTiesToEven = function(n){\n  return n + 1 / EPSILON - 1 / EPSILON;\n};\n\n\n$export($export.S, 'Math', {\n  fround: function fround(x){\n    var $abs  = Math.abs(x)\n      , $sign = sign(x)\n      , a, result;\n    if($abs < MIN32)return $sign * roundTiesToEven($abs / MIN32 / EPSILON32) * MIN32 * EPSILON32;\n    a = (1 + EPSILON32 / EPSILON) * $abs;\n    result = a - (a - $abs);\n    if(result > MAX32 || result != result)return $sign * Infinity;\n    return $sign * result;\n  }\n});\n},{\"./_export\":146,\"./_math-sign\":175}],273:[function(require,module,exports){\n// 20.2.2.17 Math.hypot([value1[, value2[, … ]]])\nvar $export = require('./_export')\n  , abs     = Math.abs;\n\n$export($export.S, 'Math', {\n  hypot: function hypot(value1, value2){ // eslint-disable-line no-unused-vars\n    var sum  = 0\n      , i    = 0\n      , aLen = arguments.length\n      , larg = 0\n      , arg, div;\n    while(i < aLen){\n      arg = abs(arguments[i++]);\n      if(larg < arg){\n        div  = larg / arg;\n        sum  = sum * div * div + 1;\n        larg = arg;\n      } else if(arg > 0){\n        div  = arg / larg;\n        sum += div * div;\n      } else sum += arg;\n    }\n    return larg === Infinity ? Infinity : larg * Math.sqrt(sum);\n  }\n});\n},{\"./_export\":146}],274:[function(require,module,exports){\n// 20.2.2.18 Math.imul(x, y)\nvar $export = require('./_export')\n  , $imul   = Math.imul;\n\n// some WebKit versions fails with big numbers, some has wrong arity\n$export($export.S + $export.F * require('./_fails')(function(){\n  return $imul(0xffffffff, 5) != -5 || $imul.length != 2;\n}), 'Math', {\n  imul: function imul(x, y){\n    var UINT16 = 0xffff\n      , xn = +x\n      , yn = +y\n      , xl = UINT16 & xn\n      , yl = UINT16 & yn;\n    return 0 | xl * yl + ((UINT16 & xn >>> 16) * yl + xl * (UINT16 & yn >>> 16) << 16 >>> 0);\n  }\n});\n},{\"./_export\":146,\"./_fails\":148}],275:[function(require,module,exports){\n// 20.2.2.21 Math.log10(x)\nvar $export = require('./_export');\n\n$export($export.S, 'Math', {\n  log10: function log10(x){\n    return Math.log(x) / Math.LN10;\n  }\n});\n},{\"./_export\":146}],276:[function(require,module,exports){\n// 20.2.2.20 Math.log1p(x)\nvar $export = require('./_export');\n\n$export($export.S, 'Math', {log1p: require('./_math-log1p')});\n},{\"./_export\":146,\"./_math-log1p\":174}],277:[function(require,module,exports){\n// 20.2.2.22 Math.log2(x)\nvar $export = require('./_export');\n\n$export($export.S, 'Math', {\n  log2: function log2(x){\n    return Math.log(x) / Math.LN2;\n  }\n});\n},{\"./_export\":146}],278:[function(require,module,exports){\n// 20.2.2.28 Math.sign(x)\nvar $export = require('./_export');\n\n$export($export.S, 'Math', {sign: require('./_math-sign')});\n},{\"./_export\":146,\"./_math-sign\":175}],279:[function(require,module,exports){\n// 20.2.2.30 Math.sinh(x)\nvar $export = require('./_export')\n  , expm1   = require('./_math-expm1')\n  , exp     = Math.exp;\n\n// V8 near Chromium 38 has a problem with very small numbers\n$export($export.S + $export.F * require('./_fails')(function(){\n  return !Math.sinh(-2e-17) != -2e-17;\n}), 'Math', {\n  sinh: function sinh(x){\n    return Math.abs(x = +x) < 1\n      ? (expm1(x) - expm1(-x)) / 2\n      : (exp(x - 1) - exp(-x - 1)) * (Math.E / 2);\n  }\n});\n},{\"./_export\":146,\"./_fails\":148,\"./_math-expm1\":173}],280:[function(require,module,exports){\n// 20.2.2.33 Math.tanh(x)\nvar $export = require('./_export')\n  , expm1   = require('./_math-expm1')\n  , exp     = Math.exp;\n\n$export($export.S, 'Math', {\n  tanh: function tanh(x){\n    var a = expm1(x = +x)\n      , b = expm1(-x);\n    return a == Infinity ? 1 : b == Infinity ? -1 : (a - b) / (exp(x) + exp(-x));\n  }\n});\n},{\"./_export\":146,\"./_math-expm1\":173}],281:[function(require,module,exports){\n// 20.2.2.34 Math.trunc(x)\nvar $export = require('./_export');\n\n$export($export.S, 'Math', {\n  trunc: function trunc(it){\n    return (it > 0 ? Math.floor : Math.ceil)(it);\n  }\n});\n},{\"./_export\":146}],282:[function(require,module,exports){\n'use strict';\nvar global            = require('./_global')\n  , has               = require('./_has')\n  , cof               = require('./_cof')\n  , inheritIfRequired = require('./_inherit-if-required')\n  , toPrimitive       = require('./_to-primitive')\n  , fails             = require('./_fails')\n  , gOPN              = require('./_object-gopn').f\n  , gOPD              = require('./_object-gopd').f\n  , dP                = require('./_object-dp').f\n  , $trim             = require('./_string-trim').trim\n  , NUMBER            = 'Number'\n  , $Number           = global[NUMBER]\n  , Base              = $Number\n  , proto             = $Number.prototype\n  // Opera ~12 has broken Object#toString\n  , BROKEN_COF        = cof(require('./_object-create')(proto)) == NUMBER\n  , TRIM              = 'trim' in String.prototype;\n\n// 7.1.3 ToNumber(argument)\nvar toNumber = function(argument){\n  var it = toPrimitive(argument, false);\n  if(typeof it == 'string' && it.length > 2){\n    it = TRIM ? it.trim() : $trim(it, 3);\n    var first = it.charCodeAt(0)\n      , third, radix, maxCode;\n    if(first === 43 || first === 45){\n      third = it.charCodeAt(2);\n      if(third === 88 || third === 120)return NaN; // Number('+0x1') should be NaN, old V8 fix\n    } else if(first === 48){\n      switch(it.charCodeAt(1)){\n        case 66 : case 98  : radix = 2; maxCode = 49; break; // fast equal /^0b[01]+$/i\n        case 79 : case 111 : radix = 8; maxCode = 55; break; // fast equal /^0o[0-7]+$/i\n        default : return +it;\n      }\n      for(var digits = it.slice(2), i = 0, l = digits.length, code; i < l; i++){\n        code = digits.charCodeAt(i);\n        // parseInt parses a string to a first unavailable symbol\n        // but ToNumber should return NaN if a string contains unavailable symbols\n        if(code < 48 || code > maxCode)return NaN;\n      } return parseInt(digits, radix);\n    }\n  } return +it;\n};\n\nif(!$Number(' 0o1') || !$Number('0b1') || $Number('+0x1')){\n  $Number = function Number(value){\n    var it = arguments.length < 1 ? 0 : value\n      , that = this;\n    return that instanceof $Number\n      // check on 1..constructor(foo) case\n      && (BROKEN_COF ? fails(function(){ proto.valueOf.call(that); }) : cof(that) != NUMBER)\n        ? inheritIfRequired(new Base(toNumber(it)), that, $Number) : toNumber(it);\n  };\n  for(var keys = require('./_descriptors') ? gOPN(Base) : (\n    // ES3:\n    'MAX_VALUE,MIN_VALUE,NaN,NEGATIVE_INFINITY,POSITIVE_INFINITY,' +\n    // ES6 (in case, if modules with ES6 Number statics required before):\n    'EPSILON,isFinite,isInteger,isNaN,isSafeInteger,MAX_SAFE_INTEGER,' +\n    'MIN_SAFE_INTEGER,parseFloat,parseInt,isInteger'\n  ).split(','), j = 0, key; keys.length > j; j++){\n    if(has(Base, key = keys[j]) && !has($Number, key)){\n      dP($Number, key, gOPD(Base, key));\n    }\n  }\n  $Number.prototype = proto;\n  proto.constructor = $Number;\n  require('./_redefine')(global, NUMBER, $Number);\n}\n},{\"./_cof\":132,\"./_descriptors\":142,\"./_fails\":148,\"./_global\":152,\"./_has\":153,\"./_inherit-if-required\":157,\"./_object-create\":180,\"./_object-dp\":181,\"./_object-gopd\":184,\"./_object-gopn\":186,\"./_redefine\":201,\"./_string-trim\":216,\"./_to-primitive\":224}],283:[function(require,module,exports){\n// 20.1.2.1 Number.EPSILON\nvar $export = require('./_export');\n\n$export($export.S, 'Number', {EPSILON: Math.pow(2, -52)});\n},{\"./_export\":146}],284:[function(require,module,exports){\n// 20.1.2.2 Number.isFinite(number)\nvar $export   = require('./_export')\n  , _isFinite = require('./_global').isFinite;\n\n$export($export.S, 'Number', {\n  isFinite: function isFinite(it){\n    return typeof it == 'number' && _isFinite(it);\n  }\n});\n},{\"./_export\":146,\"./_global\":152}],285:[function(require,module,exports){\n// 20.1.2.3 Number.isInteger(number)\nvar $export = require('./_export');\n\n$export($export.S, 'Number', {isInteger: require('./_is-integer')});\n},{\"./_export\":146,\"./_is-integer\":162}],286:[function(require,module,exports){\n// 20.1.2.4 Number.isNaN(number)\nvar $export = require('./_export');\n\n$export($export.S, 'Number', {\n  isNaN: function isNaN(number){\n    return number != number;\n  }\n});\n},{\"./_export\":146}],287:[function(require,module,exports){\n// 20.1.2.5 Number.isSafeInteger(number)\nvar $export   = require('./_export')\n  , isInteger = require('./_is-integer')\n  , abs       = Math.abs;\n\n$export($export.S, 'Number', {\n  isSafeInteger: function isSafeInteger(number){\n    return isInteger(number) && abs(number) <= 0x1fffffffffffff;\n  }\n});\n},{\"./_export\":146,\"./_is-integer\":162}],288:[function(require,module,exports){\n// 20.1.2.6 Number.MAX_SAFE_INTEGER\nvar $export = require('./_export');\n\n$export($export.S, 'Number', {MAX_SAFE_INTEGER: 0x1fffffffffffff});\n},{\"./_export\":146}],289:[function(require,module,exports){\n// 20.1.2.10 Number.MIN_SAFE_INTEGER\nvar $export = require('./_export');\n\n$export($export.S, 'Number', {MIN_SAFE_INTEGER: -0x1fffffffffffff});\n},{\"./_export\":146}],290:[function(require,module,exports){\nvar $export     = require('./_export')\n  , $parseFloat = require('./_parse-float');\n// 20.1.2.12 Number.parseFloat(string)\n$export($export.S + $export.F * (Number.parseFloat != $parseFloat), 'Number', {parseFloat: $parseFloat});\n},{\"./_export\":146,\"./_parse-float\":195}],291:[function(require,module,exports){\nvar $export   = require('./_export')\n  , $parseInt = require('./_parse-int');\n// 20.1.2.13 Number.parseInt(string, radix)\n$export($export.S + $export.F * (Number.parseInt != $parseInt), 'Number', {parseInt: $parseInt});\n},{\"./_export\":146,\"./_parse-int\":196}],292:[function(require,module,exports){\n'use strict';\r\nvar $export      = require('./_export')\r\n  , anInstance   = require('./_an-instance')\r\n  , toInteger    = require('./_to-integer')\r\n  , aNumberValue = require('./_a-number-value')\r\n  , repeat       = require('./_string-repeat')\r\n  , $toFixed     = 1..toFixed\r\n  , floor        = Math.floor\r\n  , data         = [0, 0, 0, 0, 0, 0]\r\n  , ERROR        = 'Number.toFixed: incorrect invocation!'\r\n  , ZERO         = '0';\r\n\r\nvar multiply = function(n, c){\r\n  var i  = -1\r\n    , c2 = c;\r\n  while(++i < 6){\r\n    c2 += n * data[i];\r\n    data[i] = c2 % 1e7;\r\n    c2 = floor(c2 / 1e7);\r\n  }\r\n};\r\nvar divide = function(n){\r\n  var i = 6\r\n    , c = 0;\r\n  while(--i >= 0){\r\n    c += data[i];\r\n    data[i] = floor(c / n);\r\n    c = (c % n) * 1e7;\r\n  }\r\n};\r\nvar numToString = function(){\r\n  var i = 6\r\n    , s = '';\r\n  while(--i >= 0){\r\n    if(s !== '' || i === 0 || data[i] !== 0){\r\n      var t = String(data[i]);\r\n      s = s === '' ? t : s + repeat.call(ZERO, 7 - t.length) + t;\r\n    }\r\n  } return s;\r\n};\r\nvar pow = function(x, n, acc){\r\n  return n === 0 ? acc : n % 2 === 1 ? pow(x, n - 1, acc * x) : pow(x * x, n / 2, acc);\r\n};\r\nvar log = function(x){\r\n  var n  = 0\r\n    , x2 = x;\r\n  while(x2 >= 4096){\r\n    n += 12;\r\n    x2 /= 4096;\r\n  }\r\n  while(x2 >= 2){\r\n    n  += 1;\r\n    x2 /= 2;\r\n  } return n;\r\n};\r\n\r\n$export($export.P + $export.F * (!!$toFixed && (\r\n  0.00008.toFixed(3) !== '0.000' ||\r\n  0.9.toFixed(0) !== '1' ||\r\n  1.255.toFixed(2) !== '1.25' ||\r\n  1000000000000000128..toFixed(0) !== '1000000000000000128'\r\n) || !require('./_fails')(function(){\r\n  // V8 ~ Android 4.3-\r\n  $toFixed.call({});\r\n})), 'Number', {\r\n  toFixed: function toFixed(fractionDigits){\r\n    var x = aNumberValue(this, ERROR)\r\n      , f = toInteger(fractionDigits)\r\n      , s = ''\r\n      , m = ZERO\r\n      , e, z, j, k;\r\n    if(f < 0 || f > 20)throw RangeError(ERROR);\r\n    if(x != x)return 'NaN';\r\n    if(x <= -1e21 || x >= 1e21)return String(x);\r\n    if(x < 0){\r\n      s = '-';\r\n      x = -x;\r\n    }\r\n    if(x > 1e-21){\r\n      e = log(x * pow(2, 69, 1)) - 69;\r\n      z = e < 0 ? x * pow(2, -e, 1) : x / pow(2, e, 1);\r\n      z *= 0x10000000000000;\r\n      e = 52 - e;\r\n      if(e > 0){\r\n        multiply(0, z);\r\n        j = f;\r\n        while(j >= 7){\r\n          multiply(1e7, 0);\r\n          j -= 7;\r\n        }\r\n        multiply(pow(10, j, 1), 0);\r\n        j = e - 1;\r\n        while(j >= 23){\r\n          divide(1 << 23);\r\n          j -= 23;\r\n        }\r\n        divide(1 << j);\r\n        multiply(1, 1);\r\n        divide(2);\r\n        m = numToString();\r\n      } else {\r\n        multiply(0, z);\r\n        multiply(1 << -e, 0);\r\n        m = numToString() + repeat.call(ZERO, f);\r\n      }\r\n    }\r\n    if(f > 0){\r\n      k = m.length;\r\n      m = s + (k <= f ? '0.' + repeat.call(ZERO, f - k) + m : m.slice(0, k - f) + '.' + m.slice(k - f));\r\n    } else {\r\n      m = s + m;\r\n    } return m;\r\n  }\r\n});\n},{\"./_a-number-value\":118,\"./_an-instance\":120,\"./_export\":146,\"./_fails\":148,\"./_string-repeat\":215,\"./_to-integer\":220}],293:[function(require,module,exports){\n'use strict';\r\nvar $export      = require('./_export')\r\n  , $fails       = require('./_fails')\r\n  , aNumberValue = require('./_a-number-value')\r\n  , $toPrecision = 1..toPrecision;\r\n\r\n$export($export.P + $export.F * ($fails(function(){\r\n  // IE7-\r\n  return $toPrecision.call(1, undefined) !== '1';\r\n}) || !$fails(function(){\r\n  // V8 ~ Android 4.3-\r\n  $toPrecision.call({});\r\n})), 'Number', {\r\n  toPrecision: function toPrecision(precision){\r\n    var that = aNumberValue(this, 'Number#toPrecision: incorrect invocation!');\r\n    return precision === undefined ? $toPrecision.call(that) : $toPrecision.call(that, precision); \r\n  }\r\n});\n},{\"./_a-number-value\":118,\"./_export\":146,\"./_fails\":148}],294:[function(require,module,exports){\narguments[4][103][0].apply(exports,arguments)\n},{\"./_export\":146,\"./_object-assign\":179,\"dup\":103}],295:[function(require,module,exports){\narguments[4][104][0].apply(exports,arguments)\n},{\"./_export\":146,\"./_object-create\":180,\"dup\":104}],296:[function(require,module,exports){\nvar $export = require('./_export');\r\n// 19.1.2.3 / 15.2.3.7 Object.defineProperties(O, Properties)\r\n$export($export.S + $export.F * !require('./_descriptors'), 'Object', {defineProperties: require('./_object-dps')});\n},{\"./_descriptors\":142,\"./_export\":146,\"./_object-dps\":182}],297:[function(require,module,exports){\narguments[4][105][0].apply(exports,arguments)\n},{\"./_descriptors\":142,\"./_export\":146,\"./_object-dp\":181,\"dup\":105}],298:[function(require,module,exports){\n// 19.1.2.5 Object.freeze(O)\nvar isObject = require('./_is-object')\n  , meta     = require('./_meta').onFreeze;\n\nrequire('./_object-sap')('freeze', function($freeze){\n  return function freeze(it){\n    return $freeze && isObject(it) ? $freeze(meta(it)) : it;\n  };\n});\n},{\"./_is-object\":163,\"./_meta\":176,\"./_object-sap\":192}],299:[function(require,module,exports){\n// 19.1.2.6 Object.getOwnPropertyDescriptor(O, P)\nvar toIObject                 = require('./_to-iobject')\n  , $getOwnPropertyDescriptor = require('./_object-gopd').f;\n\nrequire('./_object-sap')('getOwnPropertyDescriptor', function(){\n  return function getOwnPropertyDescriptor(it, key){\n    return $getOwnPropertyDescriptor(toIObject(it), key);\n  };\n});\n},{\"./_object-gopd\":184,\"./_object-sap\":192,\"./_to-iobject\":221}],300:[function(require,module,exports){\n// 19.1.2.7 Object.getOwnPropertyNames(O)\nrequire('./_object-sap')('getOwnPropertyNames', function(){\n  return require('./_object-gopn-ext').f;\n});\n},{\"./_object-gopn-ext\":185,\"./_object-sap\":192}],301:[function(require,module,exports){\narguments[4][106][0].apply(exports,arguments)\n},{\"./_object-gpo\":188,\"./_object-sap\":192,\"./_to-object\":223,\"dup\":106}],302:[function(require,module,exports){\n// 19.1.2.11 Object.isExtensible(O)\nvar isObject = require('./_is-object');\n\nrequire('./_object-sap')('isExtensible', function($isExtensible){\n  return function isExtensible(it){\n    return isObject(it) ? $isExtensible ? $isExtensible(it) : true : false;\n  };\n});\n},{\"./_is-object\":163,\"./_object-sap\":192}],303:[function(require,module,exports){\narguments[4][107][0].apply(exports,arguments)\n},{\"./_is-object\":163,\"./_object-sap\":192,\"dup\":107}],304:[function(require,module,exports){\n// 19.1.2.13 Object.isSealed(O)\nvar isObject = require('./_is-object');\n\nrequire('./_object-sap')('isSealed', function($isSealed){\n  return function isSealed(it){\n    return isObject(it) ? $isSealed ? $isSealed(it) : false : true;\n  };\n});\n},{\"./_is-object\":163,\"./_object-sap\":192}],305:[function(require,module,exports){\n// 19.1.3.10 Object.is(value1, value2)\nvar $export = require('./_export');\n$export($export.S, 'Object', {is: require('./_same-value')});\n},{\"./_export\":146,\"./_same-value\":203}],306:[function(require,module,exports){\narguments[4][108][0].apply(exports,arguments)\n},{\"./_object-keys\":190,\"./_object-sap\":192,\"./_to-object\":223,\"dup\":108}],307:[function(require,module,exports){\n// 19.1.2.15 Object.preventExtensions(O)\nvar isObject = require('./_is-object')\n  , meta     = require('./_meta').onFreeze;\n\nrequire('./_object-sap')('preventExtensions', function($preventExtensions){\n  return function preventExtensions(it){\n    return $preventExtensions && isObject(it) ? $preventExtensions(meta(it)) : it;\n  };\n});\n},{\"./_is-object\":163,\"./_meta\":176,\"./_object-sap\":192}],308:[function(require,module,exports){\n// 19.1.2.17 Object.seal(O)\nvar isObject = require('./_is-object')\n  , meta     = require('./_meta').onFreeze;\n\nrequire('./_object-sap')('seal', function($seal){\n  return function seal(it){\n    return $seal && isObject(it) ? $seal(meta(it)) : it;\n  };\n});\n},{\"./_is-object\":163,\"./_meta\":176,\"./_object-sap\":192}],309:[function(require,module,exports){\narguments[4][109][0].apply(exports,arguments)\n},{\"./_export\":146,\"./_set-proto\":204,\"dup\":109}],310:[function(require,module,exports){\n'use strict';\n// 19.1.3.6 Object.prototype.toString()\nvar classof = require('./_classof')\n  , test    = {};\ntest[require('./_wks')('toStringTag')] = 'z';\nif(test + '' != '[object z]'){\n  require('./_redefine')(Object.prototype, 'toString', function toString(){\n    return '[object ' + classof(this) + ']';\n  }, true);\n}\n},{\"./_classof\":131,\"./_redefine\":201,\"./_wks\":231}],311:[function(require,module,exports){\nvar $export     = require('./_export')\r\n  , $parseFloat = require('./_parse-float');\r\n// 18.2.4 parseFloat(string)\r\n$export($export.G + $export.F * (parseFloat != $parseFloat), {parseFloat: $parseFloat});\n},{\"./_export\":146,\"./_parse-float\":195}],312:[function(require,module,exports){\nvar $export   = require('./_export')\r\n  , $parseInt = require('./_parse-int');\r\n// 18.2.5 parseInt(string, radix)\r\n$export($export.G + $export.F * (parseInt != $parseInt), {parseInt: $parseInt});\n},{\"./_export\":146,\"./_parse-int\":196}],313:[function(require,module,exports){\narguments[4][111][0].apply(exports,arguments)\n},{\"./_a-function\":117,\"./_an-instance\":120,\"./_an-object\":121,\"./_classof\":131,\"./_core\":137,\"./_ctx\":139,\"./_export\":146,\"./_for-of\":151,\"./_global\":152,\"./_is-object\":163,\"./_iter-detect\":168,\"./_library\":172,\"./_microtask\":178,\"./_redefine-all\":200,\"./_set-proto\":204,\"./_set-species\":205,\"./_set-to-string-tag\":206,\"./_species-constructor\":209,\"./_task\":218,\"./_wks\":231,\"dup\":111}],314:[function(require,module,exports){\n// 26.1.1 Reflect.apply(target, thisArgument, argumentsList)\nvar $export   = require('./_export')\n  , aFunction = require('./_a-function')\n  , anObject  = require('./_an-object')\n  , _apply    = Function.apply;\n\n$export($export.S, 'Reflect', {\n  apply: function apply(target, thisArgument, argumentsList){\n    return _apply.call(aFunction(target), thisArgument, anObject(argumentsList));\n  }\n});\n},{\"./_a-function\":117,\"./_an-object\":121,\"./_export\":146}],315:[function(require,module,exports){\n// 26.1.2 Reflect.construct(target, argumentsList [, newTarget])\nvar $export   = require('./_export')\n  , create    = require('./_object-create')\n  , aFunction = require('./_a-function')\n  , anObject  = require('./_an-object')\n  , isObject  = require('./_is-object')\n  , bind      = require('./_bind');\n\n// MS Edge supports only 2 arguments\n// FF Nightly sets third argument as `new.target`, but does not create `this` from it\n$export($export.S + $export.F * require('./_fails')(function(){\n  function F(){}\n  return !(Reflect.construct(function(){}, [], F) instanceof F);\n}), 'Reflect', {\n  construct: function construct(Target, args /*, newTarget*/){\n    aFunction(Target);\n    anObject(args);\n    var newTarget = arguments.length < 3 ? Target : aFunction(arguments[2]);\n    if(Target == newTarget){\n      // w/o altered newTarget, optimization for 0-4 arguments\n      switch(args.length){\n        case 0: return new Target;\n        case 1: return new Target(args[0]);\n        case 2: return new Target(args[0], args[1]);\n        case 3: return new Target(args[0], args[1], args[2]);\n        case 4: return new Target(args[0], args[1], args[2], args[3]);\n      }\n      // w/o altered newTarget, lot of arguments case\n      var $args = [null];\n      $args.push.apply($args, args);\n      return new (bind.apply(Target, $args));\n    }\n    // with altered newTarget, not support built-in constructors\n    var proto    = newTarget.prototype\n      , instance = create(isObject(proto) ? proto : Object.prototype)\n      , result   = Function.apply.call(Target, instance, args);\n    return isObject(result) ? result : instance;\n  }\n});\n},{\"./_a-function\":117,\"./_an-object\":121,\"./_bind\":130,\"./_export\":146,\"./_fails\":148,\"./_is-object\":163,\"./_object-create\":180}],316:[function(require,module,exports){\n// 26.1.3 Reflect.defineProperty(target, propertyKey, attributes)\nvar dP          = require('./_object-dp')\n  , $export     = require('./_export')\n  , anObject    = require('./_an-object')\n  , toPrimitive = require('./_to-primitive');\n\n// MS Edge has broken Reflect.defineProperty - throwing instead of returning false\n$export($export.S + $export.F * require('./_fails')(function(){\n  Reflect.defineProperty(dP.f({}, 1, {value: 1}), 1, {value: 2});\n}), 'Reflect', {\n  defineProperty: function defineProperty(target, propertyKey, attributes){\n    anObject(target);\n    propertyKey = toPrimitive(propertyKey, true);\n    anObject(attributes);\n    try {\n      dP.f(target, propertyKey, attributes);\n      return true;\n    } catch(e){\n      return false;\n    }\n  }\n});\n},{\"./_an-object\":121,\"./_export\":146,\"./_fails\":148,\"./_object-dp\":181,\"./_to-primitive\":224}],317:[function(require,module,exports){\n// 26.1.4 Reflect.deleteProperty(target, propertyKey)\nvar $export  = require('./_export')\n  , gOPD     = require('./_object-gopd').f\n  , anObject = require('./_an-object');\n\n$export($export.S, 'Reflect', {\n  deleteProperty: function deleteProperty(target, propertyKey){\n    var desc = gOPD(anObject(target), propertyKey);\n    return desc && !desc.configurable ? false : delete target[propertyKey];\n  }\n});\n},{\"./_an-object\":121,\"./_export\":146,\"./_object-gopd\":184}],318:[function(require,module,exports){\n'use strict';\n// 26.1.5 Reflect.enumerate(target)\nvar $export  = require('./_export')\n  , anObject = require('./_an-object');\nvar Enumerate = function(iterated){\n  this._t = anObject(iterated); // target\n  this._i = 0;                  // next index\n  var keys = this._k = []       // keys\n    , key;\n  for(key in iterated)keys.push(key);\n};\nrequire('./_iter-create')(Enumerate, 'Object', function(){\n  var that = this\n    , keys = that._k\n    , key;\n  do {\n    if(that._i >= keys.length)return {value: undefined, done: true};\n  } while(!((key = keys[that._i++]) in that._t));\n  return {value: key, done: false};\n});\n\n$export($export.S, 'Reflect', {\n  enumerate: function enumerate(target){\n    return new Enumerate(target);\n  }\n});\n},{\"./_an-object\":121,\"./_export\":146,\"./_iter-create\":166}],319:[function(require,module,exports){\n// 26.1.7 Reflect.getOwnPropertyDescriptor(target, propertyKey)\nvar gOPD     = require('./_object-gopd')\n  , $export  = require('./_export')\n  , anObject = require('./_an-object');\n\n$export($export.S, 'Reflect', {\n  getOwnPropertyDescriptor: function getOwnPropertyDescriptor(target, propertyKey){\n    return gOPD.f(anObject(target), propertyKey);\n  }\n});\n},{\"./_an-object\":121,\"./_export\":146,\"./_object-gopd\":184}],320:[function(require,module,exports){\n// 26.1.8 Reflect.getPrototypeOf(target)\nvar $export  = require('./_export')\n  , getProto = require('./_object-gpo')\n  , anObject = require('./_an-object');\n\n$export($export.S, 'Reflect', {\n  getPrototypeOf: function getPrototypeOf(target){\n    return getProto(anObject(target));\n  }\n});\n},{\"./_an-object\":121,\"./_export\":146,\"./_object-gpo\":188}],321:[function(require,module,exports){\n// 26.1.6 Reflect.get(target, propertyKey [, receiver])\nvar gOPD           = require('./_object-gopd')\n  , getPrototypeOf = require('./_object-gpo')\n  , has            = require('./_has')\n  , $export        = require('./_export')\n  , isObject       = require('./_is-object')\n  , anObject       = require('./_an-object');\n\nfunction get(target, propertyKey/*, receiver*/){\n  var receiver = arguments.length < 3 ? target : arguments[2]\n    , desc, proto;\n  if(anObject(target) === receiver)return target[propertyKey];\n  if(desc = gOPD.f(target, propertyKey))return has(desc, 'value')\n    ? desc.value\n    : desc.get !== undefined\n      ? desc.get.call(receiver)\n      : undefined;\n  if(isObject(proto = getPrototypeOf(target)))return get(proto, propertyKey, receiver);\n}\n\n$export($export.S, 'Reflect', {get: get});\n},{\"./_an-object\":121,\"./_export\":146,\"./_has\":153,\"./_is-object\":163,\"./_object-gopd\":184,\"./_object-gpo\":188}],322:[function(require,module,exports){\n// 26.1.9 Reflect.has(target, propertyKey)\nvar $export = require('./_export');\n\n$export($export.S, 'Reflect', {\n  has: function has(target, propertyKey){\n    return propertyKey in target;\n  }\n});\n},{\"./_export\":146}],323:[function(require,module,exports){\n// 26.1.10 Reflect.isExtensible(target)\nvar $export       = require('./_export')\n  , anObject      = require('./_an-object')\n  , $isExtensible = Object.isExtensible;\n\n$export($export.S, 'Reflect', {\n  isExtensible: function isExtensible(target){\n    anObject(target);\n    return $isExtensible ? $isExtensible(target) : true;\n  }\n});\n},{\"./_an-object\":121,\"./_export\":146}],324:[function(require,module,exports){\n// 26.1.11 Reflect.ownKeys(target)\nvar $export = require('./_export');\n\n$export($export.S, 'Reflect', {ownKeys: require('./_own-keys')});\n},{\"./_export\":146,\"./_own-keys\":194}],325:[function(require,module,exports){\n// 26.1.12 Reflect.preventExtensions(target)\nvar $export            = require('./_export')\n  , anObject           = require('./_an-object')\n  , $preventExtensions = Object.preventExtensions;\n\n$export($export.S, 'Reflect', {\n  preventExtensions: function preventExtensions(target){\n    anObject(target);\n    try {\n      if($preventExtensions)$preventExtensions(target);\n      return true;\n    } catch(e){\n      return false;\n    }\n  }\n});\n},{\"./_an-object\":121,\"./_export\":146}],326:[function(require,module,exports){\n// 26.1.14 Reflect.setPrototypeOf(target, proto)\nvar $export  = require('./_export')\n  , setProto = require('./_set-proto');\n\nif(setProto)$export($export.S, 'Reflect', {\n  setPrototypeOf: function setPrototypeOf(target, proto){\n    setProto.check(target, proto);\n    try {\n      setProto.set(target, proto);\n      return true;\n    } catch(e){\n      return false;\n    }\n  }\n});\n},{\"./_export\":146,\"./_set-proto\":204}],327:[function(require,module,exports){\n// 26.1.13 Reflect.set(target, propertyKey, V [, receiver])\nvar dP             = require('./_object-dp')\n  , gOPD           = require('./_object-gopd')\n  , getPrototypeOf = require('./_object-gpo')\n  , has            = require('./_has')\n  , $export        = require('./_export')\n  , createDesc     = require('./_property-desc')\n  , anObject       = require('./_an-object')\n  , isObject       = require('./_is-object');\n\nfunction set(target, propertyKey, V/*, receiver*/){\n  var receiver = arguments.length < 4 ? target : arguments[3]\n    , ownDesc  = gOPD.f(anObject(target), propertyKey)\n    , existingDescriptor, proto;\n  if(!ownDesc){\n    if(isObject(proto = getPrototypeOf(target))){\n      return set(proto, propertyKey, V, receiver);\n    }\n    ownDesc = createDesc(0);\n  }\n  if(has(ownDesc, 'value')){\n    if(ownDesc.writable === false || !isObject(receiver))return false;\n    existingDescriptor = gOPD.f(receiver, propertyKey) || createDesc(0);\n    existingDescriptor.value = V;\n    dP.f(receiver, propertyKey, existingDescriptor);\n    return true;\n  }\n  return ownDesc.set === undefined ? false : (ownDesc.set.call(receiver, V), true);\n}\n\n$export($export.S, 'Reflect', {set: set});\n},{\"./_an-object\":121,\"./_export\":146,\"./_has\":153,\"./_is-object\":163,\"./_object-dp\":181,\"./_object-gopd\":184,\"./_object-gpo\":188,\"./_property-desc\":199}],328:[function(require,module,exports){\nvar global            = require('./_global')\n  , inheritIfRequired = require('./_inherit-if-required')\n  , dP                = require('./_object-dp').f\n  , gOPN              = require('./_object-gopn').f\n  , isRegExp          = require('./_is-regexp')\n  , $flags            = require('./_flags')\n  , $RegExp           = global.RegExp\n  , Base              = $RegExp\n  , proto             = $RegExp.prototype\n  , re1               = /a/g\n  , re2               = /a/g\n  // \"new\" creates a new object, old webkit buggy here\n  , CORRECT_NEW       = new $RegExp(re1) !== re1;\n\nif(require('./_descriptors') && (!CORRECT_NEW || require('./_fails')(function(){\n  re2[require('./_wks')('match')] = false;\n  // RegExp constructor can alter flags and IsRegExp works correct with @@match\n  return $RegExp(re1) != re1 || $RegExp(re2) == re2 || $RegExp(re1, 'i') != '/a/i';\n}))){\n  $RegExp = function RegExp(p, f){\n    var tiRE = this instanceof $RegExp\n      , piRE = isRegExp(p)\n      , fiU  = f === undefined;\n    return !tiRE && piRE && p.constructor === $RegExp && fiU ? p\n      : inheritIfRequired(CORRECT_NEW\n        ? new Base(piRE && !fiU ? p.source : p, f)\n        : Base((piRE = p instanceof $RegExp) ? p.source : p, piRE && fiU ? $flags.call(p) : f)\n      , tiRE ? this : proto, $RegExp);\n  };\n  var proxy = function(key){\n    key in $RegExp || dP($RegExp, key, {\n      configurable: true,\n      get: function(){ return Base[key]; },\n      set: function(it){ Base[key] = it; }\n    });\n  };\n  for(var keys = gOPN(Base), i = 0; keys.length > i; )proxy(keys[i++]);\n  proto.constructor = $RegExp;\n  $RegExp.prototype = proto;\n  require('./_redefine')(global, 'RegExp', $RegExp);\n}\n\nrequire('./_set-species')('RegExp');\n},{\"./_descriptors\":142,\"./_fails\":148,\"./_flags\":150,\"./_global\":152,\"./_inherit-if-required\":157,\"./_is-regexp\":164,\"./_object-dp\":181,\"./_object-gopn\":186,\"./_redefine\":201,\"./_set-species\":205,\"./_wks\":231}],329:[function(require,module,exports){\n// 21.2.5.3 get RegExp.prototype.flags()\nif(require('./_descriptors') && /./g.flags != 'g')require('./_object-dp').f(RegExp.prototype, 'flags', {\n  configurable: true,\n  get: require('./_flags')\n});\n},{\"./_descriptors\":142,\"./_flags\":150,\"./_object-dp\":181}],330:[function(require,module,exports){\n// @@match logic\nrequire('./_fix-re-wks')('match', 1, function(defined, MATCH, $match){\n  // 21.1.3.11 String.prototype.match(regexp)\n  return [function match(regexp){\n    'use strict';\n    var O  = defined(this)\n      , fn = regexp == undefined ? undefined : regexp[MATCH];\n    return fn !== undefined ? fn.call(regexp, O) : new RegExp(regexp)[MATCH](String(O));\n  }, $match];\n});\n},{\"./_fix-re-wks\":149}],331:[function(require,module,exports){\n// @@replace logic\nrequire('./_fix-re-wks')('replace', 2, function(defined, REPLACE, $replace){\n  // 21.1.3.14 String.prototype.replace(searchValue, replaceValue)\n  return [function replace(searchValue, replaceValue){\n    'use strict';\n    var O  = defined(this)\n      , fn = searchValue == undefined ? undefined : searchValue[REPLACE];\n    return fn !== undefined\n      ? fn.call(searchValue, O, replaceValue)\n      : $replace.call(String(O), searchValue, replaceValue);\n  }, $replace];\n});\n},{\"./_fix-re-wks\":149}],332:[function(require,module,exports){\n// @@search logic\nrequire('./_fix-re-wks')('search', 1, function(defined, SEARCH, $search){\n  // 21.1.3.15 String.prototype.search(regexp)\n  return [function search(regexp){\n    'use strict';\n    var O  = defined(this)\n      , fn = regexp == undefined ? undefined : regexp[SEARCH];\n    return fn !== undefined ? fn.call(regexp, O) : new RegExp(regexp)[SEARCH](String(O));\n  }, $search];\n});\n},{\"./_fix-re-wks\":149}],333:[function(require,module,exports){\n// @@split logic\nrequire('./_fix-re-wks')('split', 2, function(defined, SPLIT, $split){\n  'use strict';\n  var isRegExp   = require('./_is-regexp')\n    , _split     = $split\n    , $push      = [].push\n    , $SPLIT     = 'split'\n    , LENGTH     = 'length'\n    , LAST_INDEX = 'lastIndex';\n  if(\n    'abbc'[$SPLIT](/(b)*/)[1] == 'c' ||\n    'test'[$SPLIT](/(?:)/, -1)[LENGTH] != 4 ||\n    'ab'[$SPLIT](/(?:ab)*/)[LENGTH] != 2 ||\n    '.'[$SPLIT](/(.?)(.?)/)[LENGTH] != 4 ||\n    '.'[$SPLIT](/()()/)[LENGTH] > 1 ||\n    ''[$SPLIT](/.?/)[LENGTH]\n  ){\n    var NPCG = /()??/.exec('')[1] === undefined; // nonparticipating capturing group\n    // based on es5-shim implementation, need to rework it\n    $split = function(separator, limit){\n      var string = String(this);\n      if(separator === undefined && limit === 0)return [];\n      // If `separator` is not a regex, use native split\n      if(!isRegExp(separator))return _split.call(string, separator, limit);\n      var output = [];\n      var flags = (separator.ignoreCase ? 'i' : '') +\n                  (separator.multiline ? 'm' : '') +\n                  (separator.unicode ? 'u' : '') +\n                  (separator.sticky ? 'y' : '');\n      var lastLastIndex = 0;\n      var splitLimit = limit === undefined ? 4294967295 : limit >>> 0;\n      // Make `global` and avoid `lastIndex` issues by working with a copy\n      var separatorCopy = new RegExp(separator.source, flags + 'g');\n      var separator2, match, lastIndex, lastLength, i;\n      // Doesn't need flags gy, but they don't hurt\n      if(!NPCG)separator2 = new RegExp('^' + separatorCopy.source + '$(?!\\\\s)', flags);\n      while(match = separatorCopy.exec(string)){\n        // `separatorCopy.lastIndex` is not reliable cross-browser\n        lastIndex = match.index + match[0][LENGTH];\n        if(lastIndex > lastLastIndex){\n          output.push(string.slice(lastLastIndex, match.index));\n          // Fix browsers whose `exec` methods don't consistently return `undefined` for NPCG\n          if(!NPCG && match[LENGTH] > 1)match[0].replace(separator2, function(){\n            for(i = 1; i < arguments[LENGTH] - 2; i++)if(arguments[i] === undefined)match[i] = undefined;\n          });\n          if(match[LENGTH] > 1 && match.index < string[LENGTH])$push.apply(output, match.slice(1));\n          lastLength = match[0][LENGTH];\n          lastLastIndex = lastIndex;\n          if(output[LENGTH] >= splitLimit)break;\n        }\n        if(separatorCopy[LAST_INDEX] === match.index)separatorCopy[LAST_INDEX]++; // Avoid an infinite loop\n      }\n      if(lastLastIndex === string[LENGTH]){\n        if(lastLength || !separatorCopy.test(''))output.push('');\n      } else output.push(string.slice(lastLastIndex));\n      return output[LENGTH] > splitLimit ? output.slice(0, splitLimit) : output;\n    };\n  // Chakra, V8\n  } else if('0'[$SPLIT](undefined, 0)[LENGTH]){\n    $split = function(separator, limit){\n      return separator === undefined && limit === 0 ? [] : _split.call(this, separator, limit);\n    };\n  }\n  // 21.1.3.17 String.prototype.split(separator, limit)\n  return [function split(separator, limit){\n    var O  = defined(this)\n      , fn = separator == undefined ? undefined : separator[SPLIT];\n    return fn !== undefined ? fn.call(separator, O, limit) : $split.call(String(O), separator, limit);\n  }, $split];\n});\n},{\"./_fix-re-wks\":149,\"./_is-regexp\":164}],334:[function(require,module,exports){\n'use strict';\r\nrequire('./es6.regexp.flags');\r\nvar anObject    = require('./_an-object')\r\n  , $flags      = require('./_flags')\r\n  , DESCRIPTORS = require('./_descriptors')\r\n  , TO_STRING   = 'toString'\r\n  , $toString   = /./[TO_STRING];\r\n\r\nvar define = function(fn){\r\n  require('./_redefine')(RegExp.prototype, TO_STRING, fn, true);\r\n};\r\n\r\n// 21.2.5.14 RegExp.prototype.toString()\r\nif(require('./_fails')(function(){ return $toString.call({source: 'a', flags: 'b'}) != '/a/b'; })){\r\n  define(function toString(){\r\n    var R = anObject(this);\r\n    return '/'.concat(R.source, '/',\r\n      'flags' in R ? R.flags : !DESCRIPTORS && R instanceof RegExp ? $flags.call(R) : undefined);\r\n  });\r\n// FF44- RegExp#toString has a wrong name\r\n} else if($toString.name != TO_STRING){\r\n  define(function toString(){\r\n    return $toString.call(this);\r\n  });\r\n}\n},{\"./_an-object\":121,\"./_descriptors\":142,\"./_fails\":148,\"./_flags\":150,\"./_redefine\":201,\"./es6.regexp.flags\":329}],335:[function(require,module,exports){\n'use strict';\nvar strong = require('./_collection-strong');\n\n// 23.2 Set Objects\nmodule.exports = require('./_collection')('Set', function(get){\n  return function Set(){ return get(this, arguments.length > 0 ? arguments[0] : undefined); };\n}, {\n  // 23.2.3.1 Set.prototype.add(value)\n  add: function add(value){\n    return strong.def(this, value = value === 0 ? 0 : value, value);\n  }\n}, strong);\n},{\"./_collection\":136,\"./_collection-strong\":133}],336:[function(require,module,exports){\n'use strict';\n// B.2.3.2 String.prototype.anchor(name)\nrequire('./_string-html')('anchor', function(createHTML){\n  return function anchor(name){\n    return createHTML(this, 'a', 'name', name);\n  }\n});\n},{\"./_string-html\":213}],337:[function(require,module,exports){\n'use strict';\n// B.2.3.3 String.prototype.big()\nrequire('./_string-html')('big', function(createHTML){\n  return function big(){\n    return createHTML(this, 'big', '', '');\n  }\n});\n},{\"./_string-html\":213}],338:[function(require,module,exports){\n'use strict';\n// B.2.3.4 String.prototype.blink()\nrequire('./_string-html')('blink', function(createHTML){\n  return function blink(){\n    return createHTML(this, 'blink', '', '');\n  }\n});\n},{\"./_string-html\":213}],339:[function(require,module,exports){\n'use strict';\n// B.2.3.5 String.prototype.bold()\nrequire('./_string-html')('bold', function(createHTML){\n  return function bold(){\n    return createHTML(this, 'b', '', '');\n  }\n});\n},{\"./_string-html\":213}],340:[function(require,module,exports){\n'use strict';\nvar $export = require('./_export')\n  , $at     = require('./_string-at')(false);\n$export($export.P, 'String', {\n  // 21.1.3.3 String.prototype.codePointAt(pos)\n  codePointAt: function codePointAt(pos){\n    return $at(this, pos);\n  }\n});\n},{\"./_export\":146,\"./_string-at\":211}],341:[function(require,module,exports){\n// 21.1.3.6 String.prototype.endsWith(searchString [, endPosition])\n'use strict';\nvar $export   = require('./_export')\n  , toLength  = require('./_to-length')\n  , context   = require('./_string-context')\n  , ENDS_WITH = 'endsWith'\n  , $endsWith = ''[ENDS_WITH];\n\n$export($export.P + $export.F * require('./_fails-is-regexp')(ENDS_WITH), 'String', {\n  endsWith: function endsWith(searchString /*, endPosition = @length */){\n    var that = context(this, searchString, ENDS_WITH)\n      , endPosition = arguments.length > 1 ? arguments[1] : undefined\n      , len    = toLength(that.length)\n      , end    = endPosition === undefined ? len : Math.min(toLength(endPosition), len)\n      , search = String(searchString);\n    return $endsWith\n      ? $endsWith.call(that, search, end)\n      : that.slice(end - search.length, end) === search;\n  }\n});\n},{\"./_export\":146,\"./_fails-is-regexp\":147,\"./_string-context\":212,\"./_to-length\":222}],342:[function(require,module,exports){\n'use strict';\n// B.2.3.6 String.prototype.fixed()\nrequire('./_string-html')('fixed', function(createHTML){\n  return function fixed(){\n    return createHTML(this, 'tt', '', '');\n  }\n});\n},{\"./_string-html\":213}],343:[function(require,module,exports){\n'use strict';\n// B.2.3.7 String.prototype.fontcolor(color)\nrequire('./_string-html')('fontcolor', function(createHTML){\n  return function fontcolor(color){\n    return createHTML(this, 'font', 'color', color);\n  }\n});\n},{\"./_string-html\":213}],344:[function(require,module,exports){\n'use strict';\n// B.2.3.8 String.prototype.fontsize(size)\nrequire('./_string-html')('fontsize', function(createHTML){\n  return function fontsize(size){\n    return createHTML(this, 'font', 'size', size);\n  }\n});\n},{\"./_string-html\":213}],345:[function(require,module,exports){\nvar $export        = require('./_export')\n  , toIndex        = require('./_to-index')\n  , fromCharCode   = String.fromCharCode\n  , $fromCodePoint = String.fromCodePoint;\n\n// length should be 1, old FF problem\n$export($export.S + $export.F * (!!$fromCodePoint && $fromCodePoint.length != 1), 'String', {\n  // 21.1.2.2 String.fromCodePoint(...codePoints)\n  fromCodePoint: function fromCodePoint(x){ // eslint-disable-line no-unused-vars\n    var res  = []\n      , aLen = arguments.length\n      , i    = 0\n      , code;\n    while(aLen > i){\n      code = +arguments[i++];\n      if(toIndex(code, 0x10ffff) !== code)throw RangeError(code + ' is not a valid code point');\n      res.push(code < 0x10000\n        ? fromCharCode(code)\n        : fromCharCode(((code -= 0x10000) >> 10) + 0xd800, code % 0x400 + 0xdc00)\n      );\n    } return res.join('');\n  }\n});\n},{\"./_export\":146,\"./_to-index\":219}],346:[function(require,module,exports){\n// 21.1.3.7 String.prototype.includes(searchString, position = 0)\n'use strict';\nvar $export  = require('./_export')\n  , context  = require('./_string-context')\n  , INCLUDES = 'includes';\n\n$export($export.P + $export.F * require('./_fails-is-regexp')(INCLUDES), 'String', {\n  includes: function includes(searchString /*, position = 0 */){\n    return !!~context(this, searchString, INCLUDES)\n      .indexOf(searchString, arguments.length > 1 ? arguments[1] : undefined);\n  }\n});\n},{\"./_export\":146,\"./_fails-is-regexp\":147,\"./_string-context\":212}],347:[function(require,module,exports){\n'use strict';\n// B.2.3.9 String.prototype.italics()\nrequire('./_string-html')('italics', function(createHTML){\n  return function italics(){\n    return createHTML(this, 'i', '', '');\n  }\n});\n},{\"./_string-html\":213}],348:[function(require,module,exports){\narguments[4][112][0].apply(exports,arguments)\n},{\"./_iter-define\":167,\"./_string-at\":211,\"dup\":112}],349:[function(require,module,exports){\n'use strict';\n// B.2.3.10 String.prototype.link(url)\nrequire('./_string-html')('link', function(createHTML){\n  return function link(url){\n    return createHTML(this, 'a', 'href', url);\n  }\n});\n},{\"./_string-html\":213}],350:[function(require,module,exports){\nvar $export   = require('./_export')\n  , toIObject = require('./_to-iobject')\n  , toLength  = require('./_to-length');\n\n$export($export.S, 'String', {\n  // 21.1.2.4 String.raw(callSite, ...substitutions)\n  raw: function raw(callSite){\n    var tpl  = toIObject(callSite.raw)\n      , len  = toLength(tpl.length)\n      , aLen = arguments.length\n      , res  = []\n      , i    = 0;\n    while(len > i){\n      res.push(String(tpl[i++]));\n      if(i < aLen)res.push(String(arguments[i]));\n    } return res.join('');\n  }\n});\n},{\"./_export\":146,\"./_to-iobject\":221,\"./_to-length\":222}],351:[function(require,module,exports){\nvar $export = require('./_export');\n\n$export($export.P, 'String', {\n  // 21.1.3.13 String.prototype.repeat(count)\n  repeat: require('./_string-repeat')\n});\n},{\"./_export\":146,\"./_string-repeat\":215}],352:[function(require,module,exports){\n'use strict';\n// B.2.3.11 String.prototype.small()\nrequire('./_string-html')('small', function(createHTML){\n  return function small(){\n    return createHTML(this, 'small', '', '');\n  }\n});\n},{\"./_string-html\":213}],353:[function(require,module,exports){\n// 21.1.3.18 String.prototype.startsWith(searchString [, position ])\n'use strict';\nvar $export     = require('./_export')\n  , toLength    = require('./_to-length')\n  , context     = require('./_string-context')\n  , STARTS_WITH = 'startsWith'\n  , $startsWith = ''[STARTS_WITH];\n\n$export($export.P + $export.F * require('./_fails-is-regexp')(STARTS_WITH), 'String', {\n  startsWith: function startsWith(searchString /*, position = 0 */){\n    var that   = context(this, searchString, STARTS_WITH)\n      , index  = toLength(Math.min(arguments.length > 1 ? arguments[1] : undefined, that.length))\n      , search = String(searchString);\n    return $startsWith\n      ? $startsWith.call(that, search, index)\n      : that.slice(index, index + search.length) === search;\n  }\n});\n},{\"./_export\":146,\"./_fails-is-regexp\":147,\"./_string-context\":212,\"./_to-length\":222}],354:[function(require,module,exports){\n'use strict';\n// B.2.3.12 String.prototype.strike()\nrequire('./_string-html')('strike', function(createHTML){\n  return function strike(){\n    return createHTML(this, 'strike', '', '');\n  }\n});\n},{\"./_string-html\":213}],355:[function(require,module,exports){\n'use strict';\n// B.2.3.13 String.prototype.sub()\nrequire('./_string-html')('sub', function(createHTML){\n  return function sub(){\n    return createHTML(this, 'sub', '', '');\n  }\n});\n},{\"./_string-html\":213}],356:[function(require,module,exports){\n'use strict';\n// B.2.3.14 String.prototype.sup()\nrequire('./_string-html')('sup', function(createHTML){\n  return function sup(){\n    return createHTML(this, 'sup', '', '');\n  }\n});\n},{\"./_string-html\":213}],357:[function(require,module,exports){\n'use strict';\n// 21.1.3.25 String.prototype.trim()\nrequire('./_string-trim')('trim', function($trim){\n  return function trim(){\n    return $trim(this, 3);\n  };\n});\n},{\"./_string-trim\":216}],358:[function(require,module,exports){\narguments[4][113][0].apply(exports,arguments)\n},{\"./_an-object\":121,\"./_descriptors\":142,\"./_enum-keys\":145,\"./_export\":146,\"./_fails\":148,\"./_global\":152,\"./_has\":153,\"./_hide\":154,\"./_is-array\":161,\"./_keyof\":171,\"./_library\":172,\"./_meta\":176,\"./_object-create\":180,\"./_object-dp\":181,\"./_object-gopd\":184,\"./_object-gopn\":186,\"./_object-gopn-ext\":185,\"./_object-gops\":187,\"./_object-keys\":190,\"./_object-pie\":191,\"./_property-desc\":199,\"./_redefine\":201,\"./_set-to-string-tag\":206,\"./_shared\":208,\"./_to-iobject\":221,\"./_to-primitive\":224,\"./_uid\":228,\"./_wks\":231,\"./_wks-define\":229,\"./_wks-ext\":230,\"dup\":113}],359:[function(require,module,exports){\n'use strict';\nvar $export      = require('./_export')\n  , $typed       = require('./_typed')\n  , buffer       = require('./_typed-buffer')\n  , anObject     = require('./_an-object')\n  , toIndex      = require('./_to-index')\n  , toLength     = require('./_to-length')\n  , isObject     = require('./_is-object')\n  , TYPED_ARRAY  = require('./_wks')('typed_array')\n  , ArrayBuffer  = require('./_global').ArrayBuffer\n  , speciesConstructor = require('./_species-constructor')\n  , $ArrayBuffer = buffer.ArrayBuffer\n  , $DataView    = buffer.DataView\n  , $isView      = $typed.ABV && ArrayBuffer.isView\n  , $slice       = $ArrayBuffer.prototype.slice\n  , VIEW         = $typed.VIEW\n  , ARRAY_BUFFER = 'ArrayBuffer';\n\n$export($export.G + $export.W + $export.F * (ArrayBuffer !== $ArrayBuffer), {ArrayBuffer: $ArrayBuffer});\n\n$export($export.S + $export.F * !$typed.CONSTR, ARRAY_BUFFER, {\n  // 24.1.3.1 ArrayBuffer.isView(arg)\n  isView: function isView(it){\n    return $isView && $isView(it) || isObject(it) && VIEW in it;\n  }\n});\n\n$export($export.P + $export.U + $export.F * require('./_fails')(function(){\n  return !new $ArrayBuffer(2).slice(1, undefined).byteLength;\n}), ARRAY_BUFFER, {\n  // 24.1.4.3 ArrayBuffer.prototype.slice(start, end)\n  slice: function slice(start, end){\n    if($slice !== undefined && end === undefined)return $slice.call(anObject(this), start); // FF fix\n    var len    = anObject(this).byteLength\n      , first  = toIndex(start, len)\n      , final  = toIndex(end === undefined ? len : end, len)\n      , result = new (speciesConstructor(this, $ArrayBuffer))(toLength(final - first))\n      , viewS  = new $DataView(this)\n      , viewT  = new $DataView(result)\n      , index  = 0;\n    while(first < final){\n      viewT.setUint8(index++, viewS.getUint8(first++));\n    } return result;\n  }\n});\n\nrequire('./_set-species')(ARRAY_BUFFER);\n},{\"./_an-object\":121,\"./_export\":146,\"./_fails\":148,\"./_global\":152,\"./_is-object\":163,\"./_set-species\":205,\"./_species-constructor\":209,\"./_to-index\":219,\"./_to-length\":222,\"./_typed\":227,\"./_typed-buffer\":226,\"./_wks\":231}],360:[function(require,module,exports){\nvar $export = require('./_export');\n$export($export.G + $export.W + $export.F * !require('./_typed').ABV, {\n  DataView: require('./_typed-buffer').DataView\n});\n},{\"./_export\":146,\"./_typed\":227,\"./_typed-buffer\":226}],361:[function(require,module,exports){\nrequire('./_typed-array')('Float32', 4, function(init){\n  return function Float32Array(data, byteOffset, length){\n    return init(this, data, byteOffset, length);\n  };\n});\n},{\"./_typed-array\":225}],362:[function(require,module,exports){\nrequire('./_typed-array')('Float64', 8, function(init){\n  return function Float64Array(data, byteOffset, length){\n    return init(this, data, byteOffset, length);\n  };\n});\n},{\"./_typed-array\":225}],363:[function(require,module,exports){\nrequire('./_typed-array')('Int16', 2, function(init){\n  return function Int16Array(data, byteOffset, length){\n    return init(this, data, byteOffset, length);\n  };\n});\n},{\"./_typed-array\":225}],364:[function(require,module,exports){\nrequire('./_typed-array')('Int32', 4, function(init){\n  return function Int32Array(data, byteOffset, length){\n    return init(this, data, byteOffset, length);\n  };\n});\n},{\"./_typed-array\":225}],365:[function(require,module,exports){\nrequire('./_typed-array')('Int8', 1, function(init){\n  return function Int8Array(data, byteOffset, length){\n    return init(this, data, byteOffset, length);\n  };\n});\n},{\"./_typed-array\":225}],366:[function(require,module,exports){\nrequire('./_typed-array')('Uint16', 2, function(init){\n  return function Uint16Array(data, byteOffset, length){\n    return init(this, data, byteOffset, length);\n  };\n});\n},{\"./_typed-array\":225}],367:[function(require,module,exports){\nrequire('./_typed-array')('Uint32', 4, function(init){\n  return function Uint32Array(data, byteOffset, length){\n    return init(this, data, byteOffset, length);\n  };\n});\n},{\"./_typed-array\":225}],368:[function(require,module,exports){\nrequire('./_typed-array')('Uint8', 1, function(init){\n  return function Uint8Array(data, byteOffset, length){\n    return init(this, data, byteOffset, length);\n  };\n});\n},{\"./_typed-array\":225}],369:[function(require,module,exports){\nrequire('./_typed-array')('Uint8', 1, function(init){\n  return function Uint8ClampedArray(data, byteOffset, length){\n    return init(this, data, byteOffset, length);\n  };\n}, true);\n},{\"./_typed-array\":225}],370:[function(require,module,exports){\n'use strict';\nvar each         = require('./_array-methods')(0)\n  , redefine     = require('./_redefine')\n  , meta         = require('./_meta')\n  , assign       = require('./_object-assign')\n  , weak         = require('./_collection-weak')\n  , isObject     = require('./_is-object')\n  , has          = require('./_has')\n  , getWeak      = meta.getWeak\n  , isExtensible = Object.isExtensible\n  , uncaughtFrozenStore = weak.ufstore\n  , tmp          = {}\n  , InternalMap;\n\nvar wrapper = function(get){\n  return function WeakMap(){\n    return get(this, arguments.length > 0 ? arguments[0] : undefined);\n  };\n};\n\nvar methods = {\n  // 23.3.3.3 WeakMap.prototype.get(key)\n  get: function get(key){\n    if(isObject(key)){\n      var data = getWeak(key);\n      if(data === true)return uncaughtFrozenStore(this).get(key);\n      return data ? data[this._i] : undefined;\n    }\n  },\n  // 23.3.3.5 WeakMap.prototype.set(key, value)\n  set: function set(key, value){\n    return weak.def(this, key, value);\n  }\n};\n\n// 23.3 WeakMap Objects\nvar $WeakMap = module.exports = require('./_collection')('WeakMap', wrapper, methods, weak, true, true);\n\n// IE11 WeakMap frozen keys fix\nif(new $WeakMap().set((Object.freeze || Object)(tmp), 7).get(tmp) != 7){\n  InternalMap = weak.getConstructor(wrapper);\n  assign(InternalMap.prototype, methods);\n  meta.NEED = true;\n  each(['delete', 'has', 'get', 'set'], function(key){\n    var proto  = $WeakMap.prototype\n      , method = proto[key];\n    redefine(proto, key, function(a, b){\n      // store frozen objects on internal weakmap shim\n      if(isObject(a) && !isExtensible(a)){\n        if(!this._f)this._f = new InternalMap;\n        var result = this._f[key](a, b);\n        return key == 'set' ? this : result;\n      // store all the rest on native weakmap\n      } return method.call(this, a, b);\n    });\n  });\n}\n},{\"./_array-methods\":126,\"./_collection\":136,\"./_collection-weak\":135,\"./_has\":153,\"./_is-object\":163,\"./_meta\":176,\"./_object-assign\":179,\"./_redefine\":201}],371:[function(require,module,exports){\n'use strict';\nvar weak = require('./_collection-weak');\n\n// 23.4 WeakSet Objects\nrequire('./_collection')('WeakSet', function(get){\n  return function WeakSet(){ return get(this, arguments.length > 0 ? arguments[0] : undefined); };\n}, {\n  // 23.4.3.1 WeakSet.prototype.add(value)\n  add: function add(value){\n    return weak.def(this, value, true);\n  }\n}, weak, false, true);\n},{\"./_collection\":136,\"./_collection-weak\":135}],372:[function(require,module,exports){\n'use strict';\n// https://github.com/tc39/Array.prototype.includes\nvar $export   = require('./_export')\n  , $includes = require('./_array-includes')(true);\n\n$export($export.P, 'Array', {\n  includes: function includes(el /*, fromIndex = 0 */){\n    return $includes(this, el, arguments.length > 1 ? arguments[1] : undefined);\n  }\n});\n\nrequire('./_add-to-unscopables')('includes');\n},{\"./_add-to-unscopables\":119,\"./_array-includes\":125,\"./_export\":146}],373:[function(require,module,exports){\n// https://github.com/rwaldron/tc39-notes/blob/master/es6/2014-09/sept-25.md#510-globalasap-for-enqueuing-a-microtask\r\nvar $export   = require('./_export')\r\n  , microtask = require('./_microtask')()\r\n  , process   = require('./_global').process\r\n  , isNode    = require('./_cof')(process) == 'process';\r\n\r\n$export($export.G, {\r\n  asap: function asap(fn){\r\n    var domain = isNode && process.domain;\r\n    microtask(domain ? domain.bind(fn) : fn);\r\n  }\r\n});\n},{\"./_cof\":132,\"./_export\":146,\"./_global\":152,\"./_microtask\":178}],374:[function(require,module,exports){\n// https://github.com/ljharb/proposal-is-error\nvar $export = require('./_export')\n  , cof     = require('./_cof');\n\n$export($export.S, 'Error', {\n  isError: function isError(it){\n    return cof(it) === 'Error';\n  }\n});\n},{\"./_cof\":132,\"./_export\":146}],375:[function(require,module,exports){\n// https://github.com/DavidBruant/Map-Set.prototype.toJSON\nvar $export  = require('./_export');\n\n$export($export.P + $export.R, 'Map', {toJSON: require('./_collection-to-json')('Map')});\n},{\"./_collection-to-json\":134,\"./_export\":146}],376:[function(require,module,exports){\n// https://gist.github.com/BrendanEich/4294d5c212a6d2254703\nvar $export = require('./_export');\n\n$export($export.S, 'Math', {\n  iaddh: function iaddh(x0, x1, y0, y1){\n    var $x0 = x0 >>> 0\n      , $x1 = x1 >>> 0\n      , $y0 = y0 >>> 0;\n    return $x1 + (y1 >>> 0) + (($x0 & $y0 | ($x0 | $y0) & ~($x0 + $y0 >>> 0)) >>> 31) | 0;\n  }\n});\n},{\"./_export\":146}],377:[function(require,module,exports){\n// https://gist.github.com/BrendanEich/4294d5c212a6d2254703\nvar $export = require('./_export');\n\n$export($export.S, 'Math', {\n  imulh: function imulh(u, v){\n    var UINT16 = 0xffff\n      , $u = +u\n      , $v = +v\n      , u0 = $u & UINT16\n      , v0 = $v & UINT16\n      , u1 = $u >> 16\n      , v1 = $v >> 16\n      , t  = (u1 * v0 >>> 0) + (u0 * v0 >>> 16);\n    return u1 * v1 + (t >> 16) + ((u0 * v1 >>> 0) + (t & UINT16) >> 16);\n  }\n});\n},{\"./_export\":146}],378:[function(require,module,exports){\n// https://gist.github.com/BrendanEich/4294d5c212a6d2254703\nvar $export = require('./_export');\n\n$export($export.S, 'Math', {\n  isubh: function isubh(x0, x1, y0, y1){\n    var $x0 = x0 >>> 0\n      , $x1 = x1 >>> 0\n      , $y0 = y0 >>> 0;\n    return $x1 - (y1 >>> 0) - ((~$x0 & $y0 | ~($x0 ^ $y0) & $x0 - $y0 >>> 0) >>> 31) | 0;\n  }\n});\n},{\"./_export\":146}],379:[function(require,module,exports){\n// https://gist.github.com/BrendanEich/4294d5c212a6d2254703\nvar $export = require('./_export');\n\n$export($export.S, 'Math', {\n  umulh: function umulh(u, v){\n    var UINT16 = 0xffff\n      , $u = +u\n      , $v = +v\n      , u0 = $u & UINT16\n      , v0 = $v & UINT16\n      , u1 = $u >>> 16\n      , v1 = $v >>> 16\n      , t  = (u1 * v0 >>> 0) + (u0 * v0 >>> 16);\n    return u1 * v1 + (t >>> 16) + ((u0 * v1 >>> 0) + (t & UINT16) >>> 16);\n  }\n});\n},{\"./_export\":146}],380:[function(require,module,exports){\n'use strict';\r\nvar $export         = require('./_export')\r\n  , toObject        = require('./_to-object')\r\n  , aFunction       = require('./_a-function')\r\n  , $defineProperty = require('./_object-dp');\r\n\r\n// B.2.2.2 Object.prototype.__defineGetter__(P, getter)\r\nrequire('./_descriptors') && $export($export.P + require('./_object-forced-pam'), 'Object', {\r\n  __defineGetter__: function __defineGetter__(P, getter){\r\n    $defineProperty.f(toObject(this), P, {get: aFunction(getter), enumerable: true, configurable: true});\r\n  }\r\n});\n},{\"./_a-function\":117,\"./_descriptors\":142,\"./_export\":146,\"./_object-dp\":181,\"./_object-forced-pam\":183,\"./_to-object\":223}],381:[function(require,module,exports){\n'use strict';\r\nvar $export         = require('./_export')\r\n  , toObject        = require('./_to-object')\r\n  , aFunction       = require('./_a-function')\r\n  , $defineProperty = require('./_object-dp');\r\n\r\n// B.2.2.3 Object.prototype.__defineSetter__(P, setter)\r\nrequire('./_descriptors') && $export($export.P + require('./_object-forced-pam'), 'Object', {\r\n  __defineSetter__: function __defineSetter__(P, setter){\r\n    $defineProperty.f(toObject(this), P, {set: aFunction(setter), enumerable: true, configurable: true});\r\n  }\r\n});\n},{\"./_a-function\":117,\"./_descriptors\":142,\"./_export\":146,\"./_object-dp\":181,\"./_object-forced-pam\":183,\"./_to-object\":223}],382:[function(require,module,exports){\n// https://github.com/tc39/proposal-object-values-entries\nvar $export  = require('./_export')\n  , $entries = require('./_object-to-array')(true);\n\n$export($export.S, 'Object', {\n  entries: function entries(it){\n    return $entries(it);\n  }\n});\n},{\"./_export\":146,\"./_object-to-array\":193}],383:[function(require,module,exports){\n// https://github.com/tc39/proposal-object-getownpropertydescriptors\nvar $export        = require('./_export')\n  , ownKeys        = require('./_own-keys')\n  , toIObject      = require('./_to-iobject')\n  , gOPD           = require('./_object-gopd')\n  , createProperty = require('./_create-property');\n\n$export($export.S, 'Object', {\n  getOwnPropertyDescriptors: function getOwnPropertyDescriptors(object){\n    var O       = toIObject(object)\n      , getDesc = gOPD.f\n      , keys    = ownKeys(O)\n      , result  = {}\n      , i       = 0\n      , key, D;\n    while(keys.length > i)createProperty(result, key = keys[i++], getDesc(O, key));\n    return result;\n  }\n});\n},{\"./_create-property\":138,\"./_export\":146,\"./_object-gopd\":184,\"./_own-keys\":194,\"./_to-iobject\":221}],384:[function(require,module,exports){\n'use strict';\r\nvar $export                  = require('./_export')\r\n  , toObject                 = require('./_to-object')\r\n  , toPrimitive              = require('./_to-primitive')\r\n  , getPrototypeOf           = require('./_object-gpo')\r\n  , getOwnPropertyDescriptor = require('./_object-gopd').f;\r\n\r\n// B.2.2.4 Object.prototype.__lookupGetter__(P)\r\nrequire('./_descriptors') && $export($export.P + require('./_object-forced-pam'), 'Object', {\r\n  __lookupGetter__: function __lookupGetter__(P){\r\n    var O = toObject(this)\r\n      , K = toPrimitive(P, true)\r\n      , D;\r\n    do {\r\n      if(D = getOwnPropertyDescriptor(O, K))return D.get;\r\n    } while(O = getPrototypeOf(O));\r\n  }\r\n});\n},{\"./_descriptors\":142,\"./_export\":146,\"./_object-forced-pam\":183,\"./_object-gopd\":184,\"./_object-gpo\":188,\"./_to-object\":223,\"./_to-primitive\":224}],385:[function(require,module,exports){\n'use strict';\r\nvar $export                  = require('./_export')\r\n  , toObject                 = require('./_to-object')\r\n  , toPrimitive              = require('./_to-primitive')\r\n  , getPrototypeOf           = require('./_object-gpo')\r\n  , getOwnPropertyDescriptor = require('./_object-gopd').f;\r\n\r\n// B.2.2.5 Object.prototype.__lookupSetter__(P)\r\nrequire('./_descriptors') && $export($export.P + require('./_object-forced-pam'), 'Object', {\r\n  __lookupSetter__: function __lookupSetter__(P){\r\n    var O = toObject(this)\r\n      , K = toPrimitive(P, true)\r\n      , D;\r\n    do {\r\n      if(D = getOwnPropertyDescriptor(O, K))return D.set;\r\n    } while(O = getPrototypeOf(O));\r\n  }\r\n});\n},{\"./_descriptors\":142,\"./_export\":146,\"./_object-forced-pam\":183,\"./_object-gopd\":184,\"./_object-gpo\":188,\"./_to-object\":223,\"./_to-primitive\":224}],386:[function(require,module,exports){\n// https://github.com/tc39/proposal-object-values-entries\nvar $export = require('./_export')\n  , $values = require('./_object-to-array')(false);\n\n$export($export.S, 'Object', {\n  values: function values(it){\n    return $values(it);\n  }\n});\n},{\"./_export\":146,\"./_object-to-array\":193}],387:[function(require,module,exports){\n'use strict';\r\n// https://github.com/zenparsing/es-observable\r\nvar $export     = require('./_export')\r\n  , global      = require('./_global')\r\n  , core        = require('./_core')\r\n  , microtask   = require('./_microtask')()\r\n  , OBSERVABLE  = require('./_wks')('observable')\r\n  , aFunction   = require('./_a-function')\r\n  , anObject    = require('./_an-object')\r\n  , anInstance  = require('./_an-instance')\r\n  , redefineAll = require('./_redefine-all')\r\n  , hide        = require('./_hide')\r\n  , forOf       = require('./_for-of')\r\n  , RETURN      = forOf.RETURN;\r\n\r\nvar getMethod = function(fn){\r\n  return fn == null ? undefined : aFunction(fn);\r\n};\r\n\r\nvar cleanupSubscription = function(subscription){\r\n  var cleanup = subscription._c;\r\n  if(cleanup){\r\n    subscription._c = undefined;\r\n    cleanup();\r\n  }\r\n};\r\n\r\nvar subscriptionClosed = function(subscription){\r\n  return subscription._o === undefined;\r\n};\r\n\r\nvar closeSubscription = function(subscription){\r\n  if(!subscriptionClosed(subscription)){\r\n    subscription._o = undefined;\r\n    cleanupSubscription(subscription);\r\n  }\r\n};\r\n\r\nvar Subscription = function(observer, subscriber){\r\n  anObject(observer);\r\n  this._c = undefined;\r\n  this._o = observer;\r\n  observer = new SubscriptionObserver(this);\r\n  try {\r\n    var cleanup      = subscriber(observer)\r\n      , subscription = cleanup;\r\n    if(cleanup != null){\r\n      if(typeof cleanup.unsubscribe === 'function')cleanup = function(){ subscription.unsubscribe(); };\r\n      else aFunction(cleanup);\r\n      this._c = cleanup;\r\n    }\r\n  } catch(e){\r\n    observer.error(e);\r\n    return;\r\n  } if(subscriptionClosed(this))cleanupSubscription(this);\r\n};\r\n\r\nSubscription.prototype = redefineAll({}, {\r\n  unsubscribe: function unsubscribe(){ closeSubscription(this); }\r\n});\r\n\r\nvar SubscriptionObserver = function(subscription){\r\n  this._s = subscription;\r\n};\r\n\r\nSubscriptionObserver.prototype = redefineAll({}, {\r\n  next: function next(value){\r\n    var subscription = this._s;\r\n    if(!subscriptionClosed(subscription)){\r\n      var observer = subscription._o;\r\n      try {\r\n        var m = getMethod(observer.next);\r\n        if(m)return m.call(observer, value);\r\n      } catch(e){\r\n        try {\r\n          closeSubscription(subscription);\r\n        } finally {\r\n          throw e;\r\n        }\r\n      }\r\n    }\r\n  },\r\n  error: function error(value){\r\n    var subscription = this._s;\r\n    if(subscriptionClosed(subscription))throw value;\r\n    var observer = subscription._o;\r\n    subscription._o = undefined;\r\n    try {\r\n      var m = getMethod(observer.error);\r\n      if(!m)throw value;\r\n      value = m.call(observer, value);\r\n    } catch(e){\r\n      try {\r\n        cleanupSubscription(subscription);\r\n      } finally {\r\n        throw e;\r\n      }\r\n    } cleanupSubscription(subscription);\r\n    return value;\r\n  },\r\n  complete: function complete(value){\r\n    var subscription = this._s;\r\n    if(!subscriptionClosed(subscription)){\r\n      var observer = subscription._o;\r\n      subscription._o = undefined;\r\n      try {\r\n        var m = getMethod(observer.complete);\r\n        value = m ? m.call(observer, value) : undefined;\r\n      } catch(e){\r\n        try {\r\n          cleanupSubscription(subscription);\r\n        } finally {\r\n          throw e;\r\n        }\r\n      } cleanupSubscription(subscription);\r\n      return value;\r\n    }\r\n  }\r\n});\r\n\r\nvar $Observable = function Observable(subscriber){\r\n  anInstance(this, $Observable, 'Observable', '_f')._f = aFunction(subscriber);\r\n};\r\n\r\nredefineAll($Observable.prototype, {\r\n  subscribe: function subscribe(observer){\r\n    return new Subscription(observer, this._f);\r\n  },\r\n  forEach: function forEach(fn){\r\n    var that = this;\r\n    return new (core.Promise || global.Promise)(function(resolve, reject){\r\n      aFunction(fn);\r\n      var subscription = that.subscribe({\r\n        next : function(value){\r\n          try {\r\n            return fn(value);\r\n          } catch(e){\r\n            reject(e);\r\n            subscription.unsubscribe();\r\n          }\r\n        },\r\n        error: reject,\r\n        complete: resolve\r\n      });\r\n    });\r\n  }\r\n});\r\n\r\nredefineAll($Observable, {\r\n  from: function from(x){\r\n    var C = typeof this === 'function' ? this : $Observable;\r\n    var method = getMethod(anObject(x)[OBSERVABLE]);\r\n    if(method){\r\n      var observable = anObject(method.call(x));\r\n      return observable.constructor === C ? observable : new C(function(observer){\r\n        return observable.subscribe(observer);\r\n      });\r\n    }\r\n    return new C(function(observer){\r\n      var done = false;\r\n      microtask(function(){\r\n        if(!done){\r\n          try {\r\n            if(forOf(x, false, function(it){\r\n              observer.next(it);\r\n              if(done)return RETURN;\r\n            }) === RETURN)return;\r\n          } catch(e){\r\n            if(done)throw e;\r\n            observer.error(e);\r\n            return;\r\n          } observer.complete();\r\n        }\r\n      });\r\n      return function(){ done = true; };\r\n    });\r\n  },\r\n  of: function of(){\r\n    for(var i = 0, l = arguments.length, items = Array(l); i < l;)items[i] = arguments[i++];\r\n    return new (typeof this === 'function' ? this : $Observable)(function(observer){\r\n      var done = false;\r\n      microtask(function(){\r\n        if(!done){\r\n          for(var i = 0; i < items.length; ++i){\r\n            observer.next(items[i]);\r\n            if(done)return;\r\n          } observer.complete();\r\n        }\r\n      });\r\n      return function(){ done = true; };\r\n    });\r\n  }\r\n});\r\n\r\nhide($Observable.prototype, OBSERVABLE, function(){ return this; });\r\n\r\n$export($export.G, {Observable: $Observable});\r\n\r\nrequire('./_set-species')('Observable');\n},{\"./_a-function\":117,\"./_an-instance\":120,\"./_an-object\":121,\"./_core\":137,\"./_export\":146,\"./_for-of\":151,\"./_global\":152,\"./_hide\":154,\"./_microtask\":178,\"./_redefine-all\":200,\"./_set-species\":205,\"./_wks\":231}],388:[function(require,module,exports){\nvar metadata                  = require('./_metadata')\n  , anObject                  = require('./_an-object')\n  , toMetaKey                 = metadata.key\n  , ordinaryDefineOwnMetadata = metadata.set;\n\nmetadata.exp({defineMetadata: function defineMetadata(metadataKey, metadataValue, target, targetKey){\n  ordinaryDefineOwnMetadata(metadataKey, metadataValue, anObject(target), toMetaKey(targetKey));\n}});\n},{\"./_an-object\":121,\"./_metadata\":177}],389:[function(require,module,exports){\nvar metadata               = require('./_metadata')\n  , anObject               = require('./_an-object')\n  , toMetaKey              = metadata.key\n  , getOrCreateMetadataMap = metadata.map\n  , store                  = metadata.store;\n\nmetadata.exp({deleteMetadata: function deleteMetadata(metadataKey, target /*, targetKey */){\n  var targetKey   = arguments.length < 3 ? undefined : toMetaKey(arguments[2])\n    , metadataMap = getOrCreateMetadataMap(anObject(target), targetKey, false);\n  if(metadataMap === undefined || !metadataMap['delete'](metadataKey))return false;\n  if(metadataMap.size)return true;\n  var targetMetadata = store.get(target);\n  targetMetadata['delete'](targetKey);\n  return !!targetMetadata.size || store['delete'](target);\n}});\n},{\"./_an-object\":121,\"./_metadata\":177}],390:[function(require,module,exports){\nvar Set                     = require('./es6.set')\n  , from                    = require('./_array-from-iterable')\n  , metadata                = require('./_metadata')\n  , anObject                = require('./_an-object')\n  , getPrototypeOf          = require('./_object-gpo')\n  , ordinaryOwnMetadataKeys = metadata.keys\n  , toMetaKey               = metadata.key;\n\nvar ordinaryMetadataKeys = function(O, P){\n  var oKeys  = ordinaryOwnMetadataKeys(O, P)\n    , parent = getPrototypeOf(O);\n  if(parent === null)return oKeys;\n  var pKeys  = ordinaryMetadataKeys(parent, P);\n  return pKeys.length ? oKeys.length ? from(new Set(oKeys.concat(pKeys))) : pKeys : oKeys;\n};\n\nmetadata.exp({getMetadataKeys: function getMetadataKeys(target /*, targetKey */){\n  return ordinaryMetadataKeys(anObject(target), arguments.length < 2 ? undefined : toMetaKey(arguments[1]));\n}});\n},{\"./_an-object\":121,\"./_array-from-iterable\":124,\"./_metadata\":177,\"./_object-gpo\":188,\"./es6.set\":335}],391:[function(require,module,exports){\nvar metadata               = require('./_metadata')\n  , anObject               = require('./_an-object')\n  , getPrototypeOf         = require('./_object-gpo')\n  , ordinaryHasOwnMetadata = metadata.has\n  , ordinaryGetOwnMetadata = metadata.get\n  , toMetaKey              = metadata.key;\n\nvar ordinaryGetMetadata = function(MetadataKey, O, P){\n  var hasOwn = ordinaryHasOwnMetadata(MetadataKey, O, P);\n  if(hasOwn)return ordinaryGetOwnMetadata(MetadataKey, O, P);\n  var parent = getPrototypeOf(O);\n  return parent !== null ? ordinaryGetMetadata(MetadataKey, parent, P) : undefined;\n};\n\nmetadata.exp({getMetadata: function getMetadata(metadataKey, target /*, targetKey */){\n  return ordinaryGetMetadata(metadataKey, anObject(target), arguments.length < 3 ? undefined : toMetaKey(arguments[2]));\n}});\n},{\"./_an-object\":121,\"./_metadata\":177,\"./_object-gpo\":188}],392:[function(require,module,exports){\nvar metadata                = require('./_metadata')\n  , anObject                = require('./_an-object')\n  , ordinaryOwnMetadataKeys = metadata.keys\n  , toMetaKey               = metadata.key;\n\nmetadata.exp({getOwnMetadataKeys: function getOwnMetadataKeys(target /*, targetKey */){\n  return ordinaryOwnMetadataKeys(anObject(target), arguments.length < 2 ? undefined : toMetaKey(arguments[1]));\n}});\n},{\"./_an-object\":121,\"./_metadata\":177}],393:[function(require,module,exports){\nvar metadata               = require('./_metadata')\n  , anObject               = require('./_an-object')\n  , ordinaryGetOwnMetadata = metadata.get\n  , toMetaKey              = metadata.key;\n\nmetadata.exp({getOwnMetadata: function getOwnMetadata(metadataKey, target /*, targetKey */){\n  return ordinaryGetOwnMetadata(metadataKey, anObject(target)\n    , arguments.length < 3 ? undefined : toMetaKey(arguments[2]));\n}});\n},{\"./_an-object\":121,\"./_metadata\":177}],394:[function(require,module,exports){\nvar metadata               = require('./_metadata')\n  , anObject               = require('./_an-object')\n  , getPrototypeOf         = require('./_object-gpo')\n  , ordinaryHasOwnMetadata = metadata.has\n  , toMetaKey              = metadata.key;\n\nvar ordinaryHasMetadata = function(MetadataKey, O, P){\n  var hasOwn = ordinaryHasOwnMetadata(MetadataKey, O, P);\n  if(hasOwn)return true;\n  var parent = getPrototypeOf(O);\n  return parent !== null ? ordinaryHasMetadata(MetadataKey, parent, P) : false;\n};\n\nmetadata.exp({hasMetadata: function hasMetadata(metadataKey, target /*, targetKey */){\n  return ordinaryHasMetadata(metadataKey, anObject(target), arguments.length < 3 ? undefined : toMetaKey(arguments[2]));\n}});\n},{\"./_an-object\":121,\"./_metadata\":177,\"./_object-gpo\":188}],395:[function(require,module,exports){\nvar metadata               = require('./_metadata')\n  , anObject               = require('./_an-object')\n  , ordinaryHasOwnMetadata = metadata.has\n  , toMetaKey              = metadata.key;\n\nmetadata.exp({hasOwnMetadata: function hasOwnMetadata(metadataKey, target /*, targetKey */){\n  return ordinaryHasOwnMetadata(metadataKey, anObject(target)\n    , arguments.length < 3 ? undefined : toMetaKey(arguments[2]));\n}});\n},{\"./_an-object\":121,\"./_metadata\":177}],396:[function(require,module,exports){\nvar metadata                  = require('./_metadata')\n  , anObject                  = require('./_an-object')\n  , aFunction                 = require('./_a-function')\n  , toMetaKey                 = metadata.key\n  , ordinaryDefineOwnMetadata = metadata.set;\n\nmetadata.exp({metadata: function metadata(metadataKey, metadataValue){\n  return function decorator(target, targetKey){\n    ordinaryDefineOwnMetadata(\n      metadataKey, metadataValue,\n      (targetKey !== undefined ? anObject : aFunction)(target),\n      toMetaKey(targetKey)\n    );\n  };\n}});\n},{\"./_a-function\":117,\"./_an-object\":121,\"./_metadata\":177}],397:[function(require,module,exports){\n// https://github.com/DavidBruant/Map-Set.prototype.toJSON\nvar $export  = require('./_export');\n\n$export($export.P + $export.R, 'Set', {toJSON: require('./_collection-to-json')('Set')});\n},{\"./_collection-to-json\":134,\"./_export\":146}],398:[function(require,module,exports){\n'use strict';\n// https://github.com/mathiasbynens/String.prototype.at\nvar $export = require('./_export')\n  , $at     = require('./_string-at')(true);\n\n$export($export.P, 'String', {\n  at: function at(pos){\n    return $at(this, pos);\n  }\n});\n},{\"./_export\":146,\"./_string-at\":211}],399:[function(require,module,exports){\n'use strict';\r\n// https://tc39.github.io/String.prototype.matchAll/\r\nvar $export     = require('./_export')\r\n  , defined     = require('./_defined')\r\n  , toLength    = require('./_to-length')\r\n  , isRegExp    = require('./_is-regexp')\r\n  , getFlags    = require('./_flags')\r\n  , RegExpProto = RegExp.prototype;\r\n\r\nvar $RegExpStringIterator = function(regexp, string){\r\n  this._r = regexp;\r\n  this._s = string;\r\n};\r\n\r\nrequire('./_iter-create')($RegExpStringIterator, 'RegExp String', function next(){\r\n  var match = this._r.exec(this._s);\r\n  return {value: match, done: match === null};\r\n});\r\n\r\n$export($export.P, 'String', {\r\n  matchAll: function matchAll(regexp){\r\n    defined(this);\r\n    if(!isRegExp(regexp))throw TypeError(regexp + ' is not a regexp!');\r\n    var S     = String(this)\r\n      , flags = 'flags' in RegExpProto ? String(regexp.flags) : getFlags.call(regexp)\r\n      , rx    = new RegExp(regexp.source, ~flags.indexOf('g') ? flags : 'g' + flags);\r\n    rx.lastIndex = toLength(regexp.lastIndex);\r\n    return new $RegExpStringIterator(rx, S);\r\n  }\r\n});\n},{\"./_defined\":141,\"./_export\":146,\"./_flags\":150,\"./_is-regexp\":164,\"./_iter-create\":166,\"./_to-length\":222}],400:[function(require,module,exports){\n'use strict';\n// https://github.com/tc39/proposal-string-pad-start-end\nvar $export = require('./_export')\n  , $pad    = require('./_string-pad');\n\n$export($export.P, 'String', {\n  padEnd: function padEnd(maxLength /*, fillString = ' ' */){\n    return $pad(this, maxLength, arguments.length > 1 ? arguments[1] : undefined, false);\n  }\n});\n},{\"./_export\":146,\"./_string-pad\":214}],401:[function(require,module,exports){\n'use strict';\n// https://github.com/tc39/proposal-string-pad-start-end\nvar $export = require('./_export')\n  , $pad    = require('./_string-pad');\n\n$export($export.P, 'String', {\n  padStart: function padStart(maxLength /*, fillString = ' ' */){\n    return $pad(this, maxLength, arguments.length > 1 ? arguments[1] : undefined, true);\n  }\n});\n},{\"./_export\":146,\"./_string-pad\":214}],402:[function(require,module,exports){\n'use strict';\n// https://github.com/sebmarkbage/ecmascript-string-left-right-trim\nrequire('./_string-trim')('trimLeft', function($trim){\n  return function trimLeft(){\n    return $trim(this, 1);\n  };\n}, 'trimStart');\n},{\"./_string-trim\":216}],403:[function(require,module,exports){\n'use strict';\n// https://github.com/sebmarkbage/ecmascript-string-left-right-trim\nrequire('./_string-trim')('trimRight', function($trim){\n  return function trimRight(){\n    return $trim(this, 2);\n  };\n}, 'trimEnd');\n},{\"./_string-trim\":216}],404:[function(require,module,exports){\narguments[4][114][0].apply(exports,arguments)\n},{\"./_wks-define\":229,\"dup\":114}],405:[function(require,module,exports){\narguments[4][115][0].apply(exports,arguments)\n},{\"./_wks-define\":229,\"dup\":115}],406:[function(require,module,exports){\n// https://github.com/ljharb/proposal-global\nvar $export = require('./_export');\n\n$export($export.S, 'System', {global: require('./_global')});\n},{\"./_export\":146,\"./_global\":152}],407:[function(require,module,exports){\nvar $iterators    = require('./es6.array.iterator')\n  , redefine      = require('./_redefine')\n  , global        = require('./_global')\n  , hide          = require('./_hide')\n  , Iterators     = require('./_iterators')\n  , wks           = require('./_wks')\n  , ITERATOR      = wks('iterator')\n  , TO_STRING_TAG = wks('toStringTag')\n  , ArrayValues   = Iterators.Array;\n\nfor(var collections = ['NodeList', 'DOMTokenList', 'MediaList', 'StyleSheetList', 'CSSRuleList'], i = 0; i < 5; i++){\n  var NAME       = collections[i]\n    , Collection = global[NAME]\n    , proto      = Collection && Collection.prototype\n    , key;\n  if(proto){\n    if(!proto[ITERATOR])hide(proto, ITERATOR, ArrayValues);\n    if(!proto[TO_STRING_TAG])hide(proto, TO_STRING_TAG, NAME);\n    Iterators[NAME] = ArrayValues;\n    for(key in $iterators)if(!proto[key])redefine(proto, key, $iterators[key], true);\n  }\n}\n},{\"./_global\":152,\"./_hide\":154,\"./_iterators\":170,\"./_redefine\":201,\"./_wks\":231,\"./es6.array.iterator\":245}],408:[function(require,module,exports){\nvar $export = require('./_export')\n  , $task   = require('./_task');\n$export($export.G + $export.B, {\n  setImmediate:   $task.set,\n  clearImmediate: $task.clear\n});\n},{\"./_export\":146,\"./_task\":218}],409:[function(require,module,exports){\n// ie9- setTimeout & setInterval additional parameters fix\nvar global     = require('./_global')\n  , $export    = require('./_export')\n  , invoke     = require('./_invoke')\n  , partial    = require('./_partial')\n  , navigator  = global.navigator\n  , MSIE       = !!navigator && /MSIE .\\./.test(navigator.userAgent); // <- dirty ie9- check\nvar wrap = function(set){\n  return MSIE ? function(fn, time /*, ...args */){\n    return set(invoke(\n      partial,\n      [].slice.call(arguments, 2),\n      typeof fn == 'function' ? fn : Function(fn)\n    ), time);\n  } : set;\n};\n$export($export.G + $export.B + $export.F * MSIE, {\n  setTimeout:  wrap(global.setTimeout),\n  setInterval: wrap(global.setInterval)\n});\n},{\"./_export\":146,\"./_global\":152,\"./_invoke\":158,\"./_partial\":197}],410:[function(require,module,exports){\nrequire('./modules/es6.symbol');\nrequire('./modules/es6.object.create');\nrequire('./modules/es6.object.define-property');\nrequire('./modules/es6.object.define-properties');\nrequire('./modules/es6.object.get-own-property-descriptor');\nrequire('./modules/es6.object.get-prototype-of');\nrequire('./modules/es6.object.keys');\nrequire('./modules/es6.object.get-own-property-names');\nrequire('./modules/es6.object.freeze');\nrequire('./modules/es6.object.seal');\nrequire('./modules/es6.object.prevent-extensions');\nrequire('./modules/es6.object.is-frozen');\nrequire('./modules/es6.object.is-sealed');\nrequire('./modules/es6.object.is-extensible');\nrequire('./modules/es6.object.assign');\nrequire('./modules/es6.object.is');\nrequire('./modules/es6.object.set-prototype-of');\nrequire('./modules/es6.object.to-string');\nrequire('./modules/es6.function.bind');\nrequire('./modules/es6.function.name');\nrequire('./modules/es6.function.has-instance');\nrequire('./modules/es6.parse-int');\nrequire('./modules/es6.parse-float');\nrequire('./modules/es6.number.constructor');\nrequire('./modules/es6.number.to-fixed');\nrequire('./modules/es6.number.to-precision');\nrequire('./modules/es6.number.epsilon');\nrequire('./modules/es6.number.is-finite');\nrequire('./modules/es6.number.is-integer');\nrequire('./modules/es6.number.is-nan');\nrequire('./modules/es6.number.is-safe-integer');\nrequire('./modules/es6.number.max-safe-integer');\nrequire('./modules/es6.number.min-safe-integer');\nrequire('./modules/es6.number.parse-float');\nrequire('./modules/es6.number.parse-int');\nrequire('./modules/es6.math.acosh');\nrequire('./modules/es6.math.asinh');\nrequire('./modules/es6.math.atanh');\nrequire('./modules/es6.math.cbrt');\nrequire('./modules/es6.math.clz32');\nrequire('./modules/es6.math.cosh');\nrequire('./modules/es6.math.expm1');\nrequire('./modules/es6.math.fround');\nrequire('./modules/es6.math.hypot');\nrequire('./modules/es6.math.imul');\nrequire('./modules/es6.math.log10');\nrequire('./modules/es6.math.log1p');\nrequire('./modules/es6.math.log2');\nrequire('./modules/es6.math.sign');\nrequire('./modules/es6.math.sinh');\nrequire('./modules/es6.math.tanh');\nrequire('./modules/es6.math.trunc');\nrequire('./modules/es6.string.from-code-point');\nrequire('./modules/es6.string.raw');\nrequire('./modules/es6.string.trim');\nrequire('./modules/es6.string.iterator');\nrequire('./modules/es6.string.code-point-at');\nrequire('./modules/es6.string.ends-with');\nrequire('./modules/es6.string.includes');\nrequire('./modules/es6.string.repeat');\nrequire('./modules/es6.string.starts-with');\nrequire('./modules/es6.string.anchor');\nrequire('./modules/es6.string.big');\nrequire('./modules/es6.string.blink');\nrequire('./modules/es6.string.bold');\nrequire('./modules/es6.string.fixed');\nrequire('./modules/es6.string.fontcolor');\nrequire('./modules/es6.string.fontsize');\nrequire('./modules/es6.string.italics');\nrequire('./modules/es6.string.link');\nrequire('./modules/es6.string.small');\nrequire('./modules/es6.string.strike');\nrequire('./modules/es6.string.sub');\nrequire('./modules/es6.string.sup');\nrequire('./modules/es6.date.now');\nrequire('./modules/es6.date.to-json');\nrequire('./modules/es6.date.to-iso-string');\nrequire('./modules/es6.date.to-string');\nrequire('./modules/es6.date.to-primitive');\nrequire('./modules/es6.array.is-array');\nrequire('./modules/es6.array.from');\nrequire('./modules/es6.array.of');\nrequire('./modules/es6.array.join');\nrequire('./modules/es6.array.slice');\nrequire('./modules/es6.array.sort');\nrequire('./modules/es6.array.for-each');\nrequire('./modules/es6.array.map');\nrequire('./modules/es6.array.filter');\nrequire('./modules/es6.array.some');\nrequire('./modules/es6.array.every');\nrequire('./modules/es6.array.reduce');\nrequire('./modules/es6.array.reduce-right');\nrequire('./modules/es6.array.index-of');\nrequire('./modules/es6.array.last-index-of');\nrequire('./modules/es6.array.copy-within');\nrequire('./modules/es6.array.fill');\nrequire('./modules/es6.array.find');\nrequire('./modules/es6.array.find-index');\nrequire('./modules/es6.array.species');\nrequire('./modules/es6.array.iterator');\nrequire('./modules/es6.regexp.constructor');\nrequire('./modules/es6.regexp.to-string');\nrequire('./modules/es6.regexp.flags');\nrequire('./modules/es6.regexp.match');\nrequire('./modules/es6.regexp.replace');\nrequire('./modules/es6.regexp.search');\nrequire('./modules/es6.regexp.split');\nrequire('./modules/es6.promise');\nrequire('./modules/es6.map');\nrequire('./modules/es6.set');\nrequire('./modules/es6.weak-map');\nrequire('./modules/es6.weak-set');\nrequire('./modules/es6.typed.array-buffer');\nrequire('./modules/es6.typed.data-view');\nrequire('./modules/es6.typed.int8-array');\nrequire('./modules/es6.typed.uint8-array');\nrequire('./modules/es6.typed.uint8-clamped-array');\nrequire('./modules/es6.typed.int16-array');\nrequire('./modules/es6.typed.uint16-array');\nrequire('./modules/es6.typed.int32-array');\nrequire('./modules/es6.typed.uint32-array');\nrequire('./modules/es6.typed.float32-array');\nrequire('./modules/es6.typed.float64-array');\nrequire('./modules/es6.reflect.apply');\nrequire('./modules/es6.reflect.construct');\nrequire('./modules/es6.reflect.define-property');\nrequire('./modules/es6.reflect.delete-property');\nrequire('./modules/es6.reflect.enumerate');\nrequire('./modules/es6.reflect.get');\nrequire('./modules/es6.reflect.get-own-property-descriptor');\nrequire('./modules/es6.reflect.get-prototype-of');\nrequire('./modules/es6.reflect.has');\nrequire('./modules/es6.reflect.is-extensible');\nrequire('./modules/es6.reflect.own-keys');\nrequire('./modules/es6.reflect.prevent-extensions');\nrequire('./modules/es6.reflect.set');\nrequire('./modules/es6.reflect.set-prototype-of');\nrequire('./modules/es7.array.includes');\nrequire('./modules/es7.string.at');\nrequire('./modules/es7.string.pad-start');\nrequire('./modules/es7.string.pad-end');\nrequire('./modules/es7.string.trim-left');\nrequire('./modules/es7.string.trim-right');\nrequire('./modules/es7.string.match-all');\nrequire('./modules/es7.symbol.async-iterator');\nrequire('./modules/es7.symbol.observable');\nrequire('./modules/es7.object.get-own-property-descriptors');\nrequire('./modules/es7.object.values');\nrequire('./modules/es7.object.entries');\nrequire('./modules/es7.object.define-getter');\nrequire('./modules/es7.object.define-setter');\nrequire('./modules/es7.object.lookup-getter');\nrequire('./modules/es7.object.lookup-setter');\nrequire('./modules/es7.map.to-json');\nrequire('./modules/es7.set.to-json');\nrequire('./modules/es7.system.global');\nrequire('./modules/es7.error.is-error');\nrequire('./modules/es7.math.iaddh');\nrequire('./modules/es7.math.isubh');\nrequire('./modules/es7.math.imulh');\nrequire('./modules/es7.math.umulh');\nrequire('./modules/es7.reflect.define-metadata');\nrequire('./modules/es7.reflect.delete-metadata');\nrequire('./modules/es7.reflect.get-metadata');\nrequire('./modules/es7.reflect.get-metadata-keys');\nrequire('./modules/es7.reflect.get-own-metadata');\nrequire('./modules/es7.reflect.get-own-metadata-keys');\nrequire('./modules/es7.reflect.has-metadata');\nrequire('./modules/es7.reflect.has-own-metadata');\nrequire('./modules/es7.reflect.metadata');\nrequire('./modules/es7.asap');\nrequire('./modules/es7.observable');\nrequire('./modules/web.timers');\nrequire('./modules/web.immediate');\nrequire('./modules/web.dom.iterable');\nmodule.exports = require('./modules/_core');\n},{\"./modules/_core\":137,\"./modules/es6.array.copy-within\":235,\"./modules/es6.array.every\":236,\"./modules/es6.array.fill\":237,\"./modules/es6.array.filter\":238,\"./modules/es6.array.find\":240,\"./modules/es6.array.find-index\":239,\"./modules/es6.array.for-each\":241,\"./modules/es6.array.from\":242,\"./modules/es6.array.index-of\":243,\"./modules/es6.array.is-array\":244,\"./modules/es6.array.iterator\":245,\"./modules/es6.array.join\":246,\"./modules/es6.array.last-index-of\":247,\"./modules/es6.array.map\":248,\"./modules/es6.array.of\":249,\"./modules/es6.array.reduce\":251,\"./modules/es6.array.reduce-right\":250,\"./modules/es6.array.slice\":252,\"./modules/es6.array.some\":253,\"./modules/es6.array.sort\":254,\"./modules/es6.array.species\":255,\"./modules/es6.date.now\":256,\"./modules/es6.date.to-iso-string\":257,\"./modules/es6.date.to-json\":258,\"./modules/es6.date.to-primitive\":259,\"./modules/es6.date.to-string\":260,\"./modules/es6.function.bind\":261,\"./modules/es6.function.has-instance\":262,\"./modules/es6.function.name\":263,\"./modules/es6.map\":264,\"./modules/es6.math.acosh\":265,\"./modules/es6.math.asinh\":266,\"./modules/es6.math.atanh\":267,\"./modules/es6.math.cbrt\":268,\"./modules/es6.math.clz32\":269,\"./modules/es6.math.cosh\":270,\"./modules/es6.math.expm1\":271,\"./modules/es6.math.fround\":272,\"./modules/es6.math.hypot\":273,\"./modules/es6.math.imul\":274,\"./modules/es6.math.log10\":275,\"./modules/es6.math.log1p\":276,\"./modules/es6.math.log2\":277,\"./modules/es6.math.sign\":278,\"./modules/es6.math.sinh\":279,\"./modules/es6.math.tanh\":280,\"./modules/es6.math.trunc\":281,\"./modules/es6.number.constructor\":282,\"./modules/es6.number.epsilon\":283,\"./modules/es6.number.is-finite\":284,\"./modules/es6.number.is-integer\":285,\"./modules/es6.number.is-nan\":286,\"./modules/es6.number.is-safe-integer\":287,\"./modules/es6.number.max-safe-integer\":288,\"./modules/es6.number.min-safe-integer\":289,\"./modules/es6.number.parse-float\":290,\"./modules/es6.number.parse-int\":291,\"./modules/es6.number.to-fixed\":292,\"./modules/es6.number.to-precision\":293,\"./modules/es6.object.assign\":294,\"./modules/es6.object.create\":295,\"./modules/es6.object.define-properties\":296,\"./modules/es6.object.define-property\":297,\"./modules/es6.object.freeze\":298,\"./modules/es6.object.get-own-property-descriptor\":299,\"./modules/es6.object.get-own-property-names\":300,\"./modules/es6.object.get-prototype-of\":301,\"./modules/es6.object.is\":305,\"./modules/es6.object.is-extensible\":302,\"./modules/es6.object.is-frozen\":303,\"./modules/es6.object.is-sealed\":304,\"./modules/es6.object.keys\":306,\"./modules/es6.object.prevent-extensions\":307,\"./modules/es6.object.seal\":308,\"./modules/es6.object.set-prototype-of\":309,\"./modules/es6.object.to-string\":310,\"./modules/es6.parse-float\":311,\"./modules/es6.parse-int\":312,\"./modules/es6.promise\":313,\"./modules/es6.reflect.apply\":314,\"./modules/es6.reflect.construct\":315,\"./modules/es6.reflect.define-property\":316,\"./modules/es6.reflect.delete-property\":317,\"./modules/es6.reflect.enumerate\":318,\"./modules/es6.reflect.get\":321,\"./modules/es6.reflect.get-own-property-descriptor\":319,\"./modules/es6.reflect.get-prototype-of\":320,\"./modules/es6.reflect.has\":322,\"./modules/es6.reflect.is-extensible\":323,\"./modules/es6.reflect.own-keys\":324,\"./modules/es6.reflect.prevent-extensions\":325,\"./modules/es6.reflect.set\":327,\"./modules/es6.reflect.set-prototype-of\":326,\"./modules/es6.regexp.constructor\":328,\"./modules/es6.regexp.flags\":329,\"./modules/es6.regexp.match\":330,\"./modules/es6.regexp.replace\":331,\"./modules/es6.regexp.search\":332,\"./modules/es6.regexp.split\":333,\"./modules/es6.regexp.to-string\":334,\"./modules/es6.set\":335,\"./modules/es6.string.anchor\":336,\"./modules/es6.string.big\":337,\"./modules/es6.string.blink\":338,\"./modules/es6.string.bold\":339,\"./modules/es6.string.code-point-at\":340,\"./modules/es6.string.ends-with\":341,\"./modules/es6.string.fixed\":342,\"./modules/es6.string.fontcolor\":343,\"./modules/es6.string.fontsize\":344,\"./modules/es6.string.from-code-point\":345,\"./modules/es6.string.includes\":346,\"./modules/es6.string.italics\":347,\"./modules/es6.string.iterator\":348,\"./modules/es6.string.link\":349,\"./modules/es6.string.raw\":350,\"./modules/es6.string.repeat\":351,\"./modules/es6.string.small\":352,\"./modules/es6.string.starts-with\":353,\"./modules/es6.string.strike\":354,\"./modules/es6.string.sub\":355,\"./modules/es6.string.sup\":356,\"./modules/es6.string.trim\":357,\"./modules/es6.symbol\":358,\"./modules/es6.typed.array-buffer\":359,\"./modules/es6.typed.data-view\":360,\"./modules/es6.typed.float32-array\":361,\"./modules/es6.typed.float64-array\":362,\"./modules/es6.typed.int16-array\":363,\"./modules/es6.typed.int32-array\":364,\"./modules/es6.typed.int8-array\":365,\"./modules/es6.typed.uint16-array\":366,\"./modules/es6.typed.uint32-array\":367,\"./modules/es6.typed.uint8-array\":368,\"./modules/es6.typed.uint8-clamped-array\":369,\"./modules/es6.weak-map\":370,\"./modules/es6.weak-set\":371,\"./modules/es7.array.includes\":372,\"./modules/es7.asap\":373,\"./modules/es7.error.is-error\":374,\"./modules/es7.map.to-json\":375,\"./modules/es7.math.iaddh\":376,\"./modules/es7.math.imulh\":377,\"./modules/es7.math.isubh\":378,\"./modules/es7.math.umulh\":379,\"./modules/es7.object.define-getter\":380,\"./modules/es7.object.define-setter\":381,\"./modules/es7.object.entries\":382,\"./modules/es7.object.get-own-property-descriptors\":383,\"./modules/es7.object.lookup-getter\":384,\"./modules/es7.object.lookup-setter\":385,\"./modules/es7.object.values\":386,\"./modules/es7.observable\":387,\"./modules/es7.reflect.define-metadata\":388,\"./modules/es7.reflect.delete-metadata\":389,\"./modules/es7.reflect.get-metadata\":391,\"./modules/es7.reflect.get-metadata-keys\":390,\"./modules/es7.reflect.get-own-metadata\":393,\"./modules/es7.reflect.get-own-metadata-keys\":392,\"./modules/es7.reflect.has-metadata\":394,\"./modules/es7.reflect.has-own-metadata\":395,\"./modules/es7.reflect.metadata\":396,\"./modules/es7.set.to-json\":397,\"./modules/es7.string.at\":398,\"./modules/es7.string.match-all\":399,\"./modules/es7.string.pad-end\":400,\"./modules/es7.string.pad-start\":401,\"./modules/es7.string.trim-left\":402,\"./modules/es7.string.trim-right\":403,\"./modules/es7.symbol.async-iterator\":404,\"./modules/es7.symbol.observable\":405,\"./modules/es7.system.global\":406,\"./modules/web.dom.iterable\":407,\"./modules/web.immediate\":408,\"./modules/web.timers\":409}],411:[function(require,module,exports){\n// shim for using process in browser\n\nvar process = module.exports = {};\n\n// cached from whatever global is present so that test runners that stub it\n// don't break things.  But we need to wrap it in a try catch in case it is\n// wrapped in strict mode code which doesn't define any globals.  It's inside a\n// function because try/catches deoptimize in certain engines.\n\nvar cachedSetTimeout;\nvar cachedClearTimeout;\n\n(function () {\n  try {\n    cachedSetTimeout = setTimeout;\n  } catch (e) {\n    cachedSetTimeout = function () {\n      throw new Error('setTimeout is not defined');\n    }\n  }\n  try {\n    cachedClearTimeout = clearTimeout;\n  } catch (e) {\n    cachedClearTimeout = function () {\n      throw new Error('clearTimeout is not defined');\n    }\n  }\n} ())\nvar queue = [];\nvar draining = false;\nvar currentQueue;\nvar queueIndex = -1;\n\nfunction cleanUpNextTick() {\n    if (!draining || !currentQueue) {\n        return;\n    }\n    draining = false;\n    if (currentQueue.length) {\n        queue = currentQueue.concat(queue);\n    } else {\n        queueIndex = -1;\n    }\n    if (queue.length) {\n        drainQueue();\n    }\n}\n\nfunction drainQueue() {\n    if (draining) {\n        return;\n    }\n    var timeout = cachedSetTimeout(cleanUpNextTick);\n    draining = true;\n\n    var len = queue.length;\n    while(len) {\n        currentQueue = queue;\n        queue = [];\n        while (++queueIndex < len) {\n            if (currentQueue) {\n                currentQueue[queueIndex].run();\n            }\n        }\n        queueIndex = -1;\n        len = queue.length;\n    }\n    currentQueue = null;\n    draining = false;\n    cachedClearTimeout(timeout);\n}\n\nprocess.nextTick = function (fun) {\n    var args = new Array(arguments.length - 1);\n    if (arguments.length > 1) {\n        for (var i = 1; i < arguments.length; i++) {\n            args[i - 1] = arguments[i];\n        }\n    }\n    queue.push(new Item(fun, args));\n    if (queue.length === 1 && !draining) {\n        cachedSetTimeout(drainQueue, 0);\n    }\n};\n\n// v8 likes predictible objects\nfunction Item(fun, array) {\n    this.fun = fun;\n    this.array = array;\n}\nItem.prototype.run = function () {\n    this.fun.apply(null, this.array);\n};\nprocess.title = 'browser';\nprocess.browser = true;\nprocess.env = {};\nprocess.argv = [];\nprocess.version = ''; // empty string to avoid regexp issues\nprocess.versions = {};\n\nfunction noop() {}\n\nprocess.on = noop;\nprocess.addListener = noop;\nprocess.once = noop;\nprocess.off = noop;\nprocess.removeListener = noop;\nprocess.removeAllListeners = noop;\nprocess.emit = noop;\n\nprocess.binding = function (name) {\n    throw new Error('process.binding is not supported');\n};\n\nprocess.cwd = function () { return '/' };\nprocess.chdir = function (dir) {\n    throw new Error('process.chdir is not supported');\n};\nprocess.umask = function() { return 0; };\n\n},{}],412:[function(require,module,exports){\n(function (process,global){\n/**\n * Copyright (c) 2014, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * https://raw.github.com/facebook/regenerator/master/LICENSE file. An\n * additional grant of patent rights can be found in the PATENTS file in\n * the same directory.\n */\n\n!(function(global) {\n  \"use strict\";\n\n  var hasOwn = Object.prototype.hasOwnProperty;\n  var undefined; // More compressible than void 0.\n  var $Symbol = typeof Symbol === \"function\" ? Symbol : {};\n  var iteratorSymbol = $Symbol.iterator || \"@@iterator\";\n  var toStringTagSymbol = $Symbol.toStringTag || \"@@toStringTag\";\n\n  var inModule = typeof module === \"object\";\n  var runtime = global.regeneratorRuntime;\n  if (runtime) {\n    if (inModule) {\n      // If regeneratorRuntime is defined globally and we're in a module,\n      // make the exports object identical to regeneratorRuntime.\n      module.exports = runtime;\n    }\n    // Don't bother evaluating the rest of this file if the runtime was\n    // already defined globally.\n    return;\n  }\n\n  // Define the runtime globally (as expected by generated code) as either\n  // module.exports (if we're in a module) or a new, empty object.\n  runtime = global.regeneratorRuntime = inModule ? module.exports : {};\n\n  function wrap(innerFn, outerFn, self, tryLocsList) {\n    // If outerFn provided, then outerFn.prototype instanceof Generator.\n    var generator = Object.create((outerFn || Generator).prototype);\n    var context = new Context(tryLocsList || []);\n\n    // The ._invoke method unifies the implementations of the .next,\n    // .throw, and .return methods.\n    generator._invoke = makeInvokeMethod(innerFn, self, context);\n\n    return generator;\n  }\n  runtime.wrap = wrap;\n\n  // Try/catch helper to minimize deoptimizations. Returns a completion\n  // record like context.tryEntries[i].completion. This interface could\n  // have been (and was previously) designed to take a closure to be\n  // invoked without arguments, but in all the cases we care about we\n  // already have an existing method we want to call, so there's no need\n  // to create a new function object. We can even get away with assuming\n  // the method takes exactly one argument, since that happens to be true\n  // in every case, so we don't have to touch the arguments object. The\n  // only additional allocation required is the completion record, which\n  // has a stable shape and so hopefully should be cheap to allocate.\n  function tryCatch(fn, obj, arg) {\n    try {\n      return { type: \"normal\", arg: fn.call(obj, arg) };\n    } catch (err) {\n      return { type: \"throw\", arg: err };\n    }\n  }\n\n  var GenStateSuspendedStart = \"suspendedStart\";\n  var GenStateSuspendedYield = \"suspendedYield\";\n  var GenStateExecuting = \"executing\";\n  var GenStateCompleted = \"completed\";\n\n  // Returning this object from the innerFn has the same effect as\n  // breaking out of the dispatch switch statement.\n  var ContinueSentinel = {};\n\n  // Dummy constructor functions that we use as the .constructor and\n  // .constructor.prototype properties for functions that return Generator\n  // objects. For full spec compliance, you may wish to configure your\n  // minifier not to mangle the names of these two functions.\n  function Generator() {}\n  function GeneratorFunction() {}\n  function GeneratorFunctionPrototype() {}\n\n  var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype;\n  GeneratorFunction.prototype = Gp.constructor = GeneratorFunctionPrototype;\n  GeneratorFunctionPrototype.constructor = GeneratorFunction;\n  GeneratorFunctionPrototype[toStringTagSymbol] = GeneratorFunction.displayName = \"GeneratorFunction\";\n\n  // Helper for defining the .next, .throw, and .return methods of the\n  // Iterator interface in terms of a single ._invoke method.\n  function defineIteratorMethods(prototype) {\n    [\"next\", \"throw\", \"return\"].forEach(function(method) {\n      prototype[method] = function(arg) {\n        return this._invoke(method, arg);\n      };\n    });\n  }\n\n  runtime.isGeneratorFunction = function(genFun) {\n    var ctor = typeof genFun === \"function\" && genFun.constructor;\n    return ctor\n      ? ctor === GeneratorFunction ||\n        // For the native GeneratorFunction constructor, the best we can\n        // do is to check its .name property.\n        (ctor.displayName || ctor.name) === \"GeneratorFunction\"\n      : false;\n  };\n\n  runtime.mark = function(genFun) {\n    if (Object.setPrototypeOf) {\n      Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);\n    } else {\n      genFun.__proto__ = GeneratorFunctionPrototype;\n      if (!(toStringTagSymbol in genFun)) {\n        genFun[toStringTagSymbol] = \"GeneratorFunction\";\n      }\n    }\n    genFun.prototype = Object.create(Gp);\n    return genFun;\n  };\n\n  // Within the body of any async function, `await x` is transformed to\n  // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test\n  // `value instanceof AwaitArgument` to determine if the yielded value is\n  // meant to be awaited. Some may consider the name of this method too\n  // cutesy, but they are curmudgeons.\n  runtime.awrap = function(arg) {\n    return new AwaitArgument(arg);\n  };\n\n  function AwaitArgument(arg) {\n    this.arg = arg;\n  }\n\n  function AsyncIterator(generator) {\n    function invoke(method, arg, resolve, reject) {\n      var record = tryCatch(generator[method], generator, arg);\n      if (record.type === \"throw\") {\n        reject(record.arg);\n      } else {\n        var result = record.arg;\n        var value = result.value;\n        if (value instanceof AwaitArgument) {\n          return Promise.resolve(value.arg).then(function(value) {\n            invoke(\"next\", value, resolve, reject);\n          }, function(err) {\n            invoke(\"throw\", err, resolve, reject);\n          });\n        }\n\n        return Promise.resolve(value).then(function(unwrapped) {\n          // When a yielded Promise is resolved, its final value becomes\n          // the .value of the Promise<{value,done}> result for the\n          // current iteration. If the Promise is rejected, however, the\n          // result for this iteration will be rejected with the same\n          // reason. Note that rejections of yielded Promises are not\n          // thrown back into the generator function, as is the case\n          // when an awaited Promise is rejected. This difference in\n          // behavior between yield and await is important, because it\n          // allows the consumer to decide what to do with the yielded\n          // rejection (swallow it and continue, manually .throw it back\n          // into the generator, abandon iteration, whatever). With\n          // await, by contrast, there is no opportunity to examine the\n          // rejection reason outside the generator function, so the\n          // only option is to throw it from the await expression, and\n          // let the generator function handle the exception.\n          result.value = unwrapped;\n          resolve(result);\n        }, reject);\n      }\n    }\n\n    if (typeof process === \"object\" && process.domain) {\n      invoke = process.domain.bind(invoke);\n    }\n\n    var previousPromise;\n\n    function enqueue(method, arg) {\n      function callInvokeWithMethodAndArg() {\n        return new Promise(function(resolve, reject) {\n          invoke(method, arg, resolve, reject);\n        });\n      }\n\n      return previousPromise =\n        // If enqueue has been called before, then we want to wait until\n        // all previous Promises have been resolved before calling invoke,\n        // so that results are always delivered in the correct order. If\n        // enqueue has not been called before, then it is important to\n        // call invoke immediately, without waiting on a callback to fire,\n        // so that the async generator function has the opportunity to do\n        // any necessary setup in a predictable way. This predictability\n        // is why the Promise constructor synchronously invokes its\n        // executor callback, and why async functions synchronously\n        // execute code before the first await. Since we implement simple\n        // async functions in terms of async generators, it is especially\n        // important to get this right, even though it requires care.\n        previousPromise ? previousPromise.then(\n          callInvokeWithMethodAndArg,\n          // Avoid propagating failures to Promises returned by later\n          // invocations of the iterator.\n          callInvokeWithMethodAndArg\n        ) : callInvokeWithMethodAndArg();\n    }\n\n    // Define the unified helper method that is used to implement .next,\n    // .throw, and .return (see defineIteratorMethods).\n    this._invoke = enqueue;\n  }\n\n  defineIteratorMethods(AsyncIterator.prototype);\n\n  // Note that simple async functions are implemented on top of\n  // AsyncIterator objects; they just return a Promise for the value of\n  // the final result produced by the iterator.\n  runtime.async = function(innerFn, outerFn, self, tryLocsList) {\n    var iter = new AsyncIterator(\n      wrap(innerFn, outerFn, self, tryLocsList)\n    );\n\n    return runtime.isGeneratorFunction(outerFn)\n      ? iter // If outerFn is a generator, return the full iterator.\n      : iter.next().then(function(result) {\n          return result.done ? result.value : iter.next();\n        });\n  };\n\n  function makeInvokeMethod(innerFn, self, context) {\n    var state = GenStateSuspendedStart;\n\n    return function invoke(method, arg) {\n      if (state === GenStateExecuting) {\n        throw new Error(\"Generator is already running\");\n      }\n\n      if (state === GenStateCompleted) {\n        if (method === \"throw\") {\n          throw arg;\n        }\n\n        // Be forgiving, per 25.3.3.3.3 of the spec:\n        // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume\n        return doneResult();\n      }\n\n      while (true) {\n        var delegate = context.delegate;\n        if (delegate) {\n          if (method === \"return\" ||\n              (method === \"throw\" && delegate.iterator[method] === undefined)) {\n            // A return or throw (when the delegate iterator has no throw\n            // method) always terminates the yield* loop.\n            context.delegate = null;\n\n            // If the delegate iterator has a return method, give it a\n            // chance to clean up.\n            var returnMethod = delegate.iterator[\"return\"];\n            if (returnMethod) {\n              var record = tryCatch(returnMethod, delegate.iterator, arg);\n              if (record.type === \"throw\") {\n                // If the return method threw an exception, let that\n                // exception prevail over the original return or throw.\n                method = \"throw\";\n                arg = record.arg;\n                continue;\n              }\n            }\n\n            if (method === \"return\") {\n              // Continue with the outer return, now that the delegate\n              // iterator has been terminated.\n              continue;\n            }\n          }\n\n          var record = tryCatch(\n            delegate.iterator[method],\n            delegate.iterator,\n            arg\n          );\n\n          if (record.type === \"throw\") {\n            context.delegate = null;\n\n            // Like returning generator.throw(uncaught), but without the\n            // overhead of an extra function call.\n            method = \"throw\";\n            arg = record.arg;\n            continue;\n          }\n\n          // Delegate generator ran and handled its own exceptions so\n          // regardless of what the method was, we continue as if it is\n          // \"next\" with an undefined arg.\n          method = \"next\";\n          arg = undefined;\n\n          var info = record.arg;\n          if (info.done) {\n            context[delegate.resultName] = info.value;\n            context.next = delegate.nextLoc;\n          } else {\n            state = GenStateSuspendedYield;\n            return info;\n          }\n\n          context.delegate = null;\n        }\n\n        if (method === \"next\") {\n          // Setting context._sent for legacy support of Babel's\n          // function.sent implementation.\n          context.sent = context._sent = arg;\n\n        } else if (method === \"throw\") {\n          if (state === GenStateSuspendedStart) {\n            state = GenStateCompleted;\n            throw arg;\n          }\n\n          if (context.dispatchException(arg)) {\n            // If the dispatched exception was caught by a catch block,\n            // then let that catch block handle the exception normally.\n            method = \"next\";\n            arg = undefined;\n          }\n\n        } else if (method === \"return\") {\n          context.abrupt(\"return\", arg);\n        }\n\n        state = GenStateExecuting;\n\n        var record = tryCatch(innerFn, self, context);\n        if (record.type === \"normal\") {\n          // If an exception is thrown from innerFn, we leave state ===\n          // GenStateExecuting and loop back for another invocation.\n          state = context.done\n            ? GenStateCompleted\n            : GenStateSuspendedYield;\n\n          var info = {\n            value: record.arg,\n            done: context.done\n          };\n\n          if (record.arg === ContinueSentinel) {\n            if (context.delegate && method === \"next\") {\n              // Deliberately forget the last sent value so that we don't\n              // accidentally pass it on to the delegate.\n              arg = undefined;\n            }\n          } else {\n            return info;\n          }\n\n        } else if (record.type === \"throw\") {\n          state = GenStateCompleted;\n          // Dispatch the exception by looping back around to the\n          // context.dispatchException(arg) call above.\n          method = \"throw\";\n          arg = record.arg;\n        }\n      }\n    };\n  }\n\n  // Define Generator.prototype.{next,throw,return} in terms of the\n  // unified ._invoke helper method.\n  defineIteratorMethods(Gp);\n\n  Gp[iteratorSymbol] = function() {\n    return this;\n  };\n\n  Gp[toStringTagSymbol] = \"Generator\";\n\n  Gp.toString = function() {\n    return \"[object Generator]\";\n  };\n\n  function pushTryEntry(locs) {\n    var entry = { tryLoc: locs[0] };\n\n    if (1 in locs) {\n      entry.catchLoc = locs[1];\n    }\n\n    if (2 in locs) {\n      entry.finallyLoc = locs[2];\n      entry.afterLoc = locs[3];\n    }\n\n    this.tryEntries.push(entry);\n  }\n\n  function resetTryEntry(entry) {\n    var record = entry.completion || {};\n    record.type = \"normal\";\n    delete record.arg;\n    entry.completion = record;\n  }\n\n  function Context(tryLocsList) {\n    // The root entry object (effectively a try statement without a catch\n    // or a finally block) gives us a place to store values thrown from\n    // locations where there is no enclosing try statement.\n    this.tryEntries = [{ tryLoc: \"root\" }];\n    tryLocsList.forEach(pushTryEntry, this);\n    this.reset(true);\n  }\n\n  runtime.keys = function(object) {\n    var keys = [];\n    for (var key in object) {\n      keys.push(key);\n    }\n    keys.reverse();\n\n    // Rather than returning an object with a next method, we keep\n    // things simple and return the next function itself.\n    return function next() {\n      while (keys.length) {\n        var key = keys.pop();\n        if (key in object) {\n          next.value = key;\n          next.done = false;\n          return next;\n        }\n      }\n\n      // To avoid creating an additional object, we just hang the .value\n      // and .done properties off the next function object itself. This\n      // also ensures that the minifier will not anonymize the function.\n      next.done = true;\n      return next;\n    };\n  };\n\n  function values(iterable) {\n    if (iterable) {\n      var iteratorMethod = iterable[iteratorSymbol];\n      if (iteratorMethod) {\n        return iteratorMethod.call(iterable);\n      }\n\n      if (typeof iterable.next === \"function\") {\n        return iterable;\n      }\n\n      if (!isNaN(iterable.length)) {\n        var i = -1, next = function next() {\n          while (++i < iterable.length) {\n            if (hasOwn.call(iterable, i)) {\n              next.value = iterable[i];\n              next.done = false;\n              return next;\n            }\n          }\n\n          next.value = undefined;\n          next.done = true;\n\n          return next;\n        };\n\n        return next.next = next;\n      }\n    }\n\n    // Return an iterator with no values.\n    return { next: doneResult };\n  }\n  runtime.values = values;\n\n  function doneResult() {\n    return { value: undefined, done: true };\n  }\n\n  Context.prototype = {\n    constructor: Context,\n\n    reset: function(skipTempReset) {\n      this.prev = 0;\n      this.next = 0;\n      // Resetting context._sent for legacy support of Babel's\n      // function.sent implementation.\n      this.sent = this._sent = undefined;\n      this.done = false;\n      this.delegate = null;\n\n      this.tryEntries.forEach(resetTryEntry);\n\n      if (!skipTempReset) {\n        for (var name in this) {\n          // Not sure about the optimal order of these conditions:\n          if (name.charAt(0) === \"t\" &&\n              hasOwn.call(this, name) &&\n              !isNaN(+name.slice(1))) {\n            this[name] = undefined;\n          }\n        }\n      }\n    },\n\n    stop: function() {\n      this.done = true;\n\n      var rootEntry = this.tryEntries[0];\n      var rootRecord = rootEntry.completion;\n      if (rootRecord.type === \"throw\") {\n        throw rootRecord.arg;\n      }\n\n      return this.rval;\n    },\n\n    dispatchException: function(exception) {\n      if (this.done) {\n        throw exception;\n      }\n\n      var context = this;\n      function handle(loc, caught) {\n        record.type = \"throw\";\n        record.arg = exception;\n        context.next = loc;\n        return !!caught;\n      }\n\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        var record = entry.completion;\n\n        if (entry.tryLoc === \"root\") {\n          // Exception thrown outside of any try block that could handle\n          // it, so set the completion value of the entire function to\n          // throw the exception.\n          return handle(\"end\");\n        }\n\n        if (entry.tryLoc <= this.prev) {\n          var hasCatch = hasOwn.call(entry, \"catchLoc\");\n          var hasFinally = hasOwn.call(entry, \"finallyLoc\");\n\n          if (hasCatch && hasFinally) {\n            if (this.prev < entry.catchLoc) {\n              return handle(entry.catchLoc, true);\n            } else if (this.prev < entry.finallyLoc) {\n              return handle(entry.finallyLoc);\n            }\n\n          } else if (hasCatch) {\n            if (this.prev < entry.catchLoc) {\n              return handle(entry.catchLoc, true);\n            }\n\n          } else if (hasFinally) {\n            if (this.prev < entry.finallyLoc) {\n              return handle(entry.finallyLoc);\n            }\n\n          } else {\n            throw new Error(\"try statement without catch or finally\");\n          }\n        }\n      }\n    },\n\n    abrupt: function(type, arg) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.tryLoc <= this.prev &&\n            hasOwn.call(entry, \"finallyLoc\") &&\n            this.prev < entry.finallyLoc) {\n          var finallyEntry = entry;\n          break;\n        }\n      }\n\n      if (finallyEntry &&\n          (type === \"break\" ||\n           type === \"continue\") &&\n          finallyEntry.tryLoc <= arg &&\n          arg <= finallyEntry.finallyLoc) {\n        // Ignore the finally entry if control is not jumping to a\n        // location outside the try/catch block.\n        finallyEntry = null;\n      }\n\n      var record = finallyEntry ? finallyEntry.completion : {};\n      record.type = type;\n      record.arg = arg;\n\n      if (finallyEntry) {\n        this.next = finallyEntry.finallyLoc;\n      } else {\n        this.complete(record);\n      }\n\n      return ContinueSentinel;\n    },\n\n    complete: function(record, afterLoc) {\n      if (record.type === \"throw\") {\n        throw record.arg;\n      }\n\n      if (record.type === \"break\" ||\n          record.type === \"continue\") {\n        this.next = record.arg;\n      } else if (record.type === \"return\") {\n        this.rval = record.arg;\n        this.next = \"end\";\n      } else if (record.type === \"normal\" && afterLoc) {\n        this.next = afterLoc;\n      }\n    },\n\n    finish: function(finallyLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.finallyLoc === finallyLoc) {\n          this.complete(entry.completion, entry.afterLoc);\n          resetTryEntry(entry);\n          return ContinueSentinel;\n        }\n      }\n    },\n\n    \"catch\": function(tryLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.tryLoc === tryLoc) {\n          var record = entry.completion;\n          if (record.type === \"throw\") {\n            var thrown = record.arg;\n            resetTryEntry(entry);\n          }\n          return thrown;\n        }\n      }\n\n      // The context.catch method must only be called with a location\n      // argument that corresponds to a known catch block.\n      throw new Error(\"illegal catch attempt\");\n    },\n\n    delegateYield: function(iterable, resultName, nextLoc) {\n      this.delegate = {\n        iterator: values(iterable),\n        resultName: resultName,\n        nextLoc: nextLoc\n      };\n\n      return ContinueSentinel;\n    }\n  };\n})(\n  // Among the various tricks for obtaining a reference to the global\n  // object, this seems to be the most reliable technique that does not\n  // use indirect eval (which violates Content Security Policy).\n  typeof global === \"object\" ? global :\n  typeof window === \"object\" ? window :\n  typeof self === \"object\" ? self : this\n);\n\n}).call(this,require('_process'),typeof global !== \"undefined\" ? global : typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {})\n\n},{\"_process\":411}],413:[function(require,module,exports){\n(function (process,global){\n/**\n* Copyright 2016 PT Inovação e Sistemas SA\n* Copyright 2016 INESC-ID\n* Copyright 2016 QUOBIS NETWORKS SL\n* Copyright 2016 FRAUNHOFER-GESELLSCHAFT ZUR FOERDERUNG DER ANGEWANDTEN FORSCHUNG E.V\n* Copyright 2016 ORANGE SA\n* Copyright 2016 Deutsche Telekom AG\n* Copyright 2016 Apizee\n* Copyright 2016 TECHNISCHE UNIVERSITAT BERLIN\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n**/\n\n// Distribution file for MessageFactory.js \n// version: 0.3.0\n// Last build: Wed Jun 29 2016 18:18:32 GMT+0100 (WEST)\n\n!function(e){if(\"object\"==typeof exports&&\"undefined\"!=typeof module)module.exports=e();else if(\"function\"==typeof define&&define.amd)define([],e);else{var t;t=\"undefined\"!=typeof window?window:\"undefined\"!=typeof global?global:\"undefined\"!=typeof self?self:this,t.MessageFactory=e()}}(function(){var e;return function t(e,r,n){function o(a,s){if(!r[a]){if(!e[a]){var u=\"function\"==typeof require&&require;if(!s&&u)return u(a,!0);if(i)return i(a,!0);var l=new Error(\"Cannot find module '\"+a+\"'\");throw l.code=\"MODULE_NOT_FOUND\",l}var c=r[a]={exports:{}};e[a][0].call(c.exports,function(t){var r=e[a][1][t];return o(r?r:t)},c,c.exports,t,e,r,n)}return r[a].exports}for(var i=\"function\"==typeof require&&require,a=0;a<n.length;a++)o(n[a]);return o}({1:[function(e,t,r){t.exports={\"default\":e(\"core-js/library/fn/object/create\"),__esModule:!0}},{\"core-js/library/fn/object/create\":17}],2:[function(e,t,r){t.exports={\"default\":e(\"core-js/library/fn/object/define-property\"),__esModule:!0}},{\"core-js/library/fn/object/define-property\":18}],3:[function(e,t,r){t.exports={\"default\":e(\"core-js/library/fn/object/freeze\"),__esModule:!0}},{\"core-js/library/fn/object/freeze\":19}],4:[function(e,t,r){t.exports={\"default\":e(\"core-js/library/fn/object/get-own-property-descriptor\"),__esModule:!0}},{\"core-js/library/fn/object/get-own-property-descriptor\":20}],5:[function(e,t,r){t.exports={\"default\":e(\"core-js/library/fn/object/get-prototype-of\"),__esModule:!0}},{\"core-js/library/fn/object/get-prototype-of\":21}],6:[function(e,t,r){t.exports={\"default\":e(\"core-js/library/fn/object/keys\"),__esModule:!0}},{\"core-js/library/fn/object/keys\":22}],7:[function(e,t,r){t.exports={\"default\":e(\"core-js/library/fn/object/set-prototype-of\"),__esModule:!0}},{\"core-js/library/fn/object/set-prototype-of\":23}],8:[function(e,t,r){t.exports={\"default\":e(\"core-js/library/fn/symbol\"),__esModule:!0}},{\"core-js/library/fn/symbol\":24}],9:[function(e,t,r){t.exports={\"default\":e(\"core-js/library/fn/symbol/iterator\"),__esModule:!0}},{\"core-js/library/fn/symbol/iterator\":25}],10:[function(e,t,r){\"use strict\";r.__esModule=!0,r[\"default\"]=function(e,t){if(!(e instanceof t))throw new TypeError(\"Cannot call a class as a function\")}},{}],11:[function(e,t,r){\"use strict\";function n(e){return e&&e.__esModule?e:{\"default\":e}}r.__esModule=!0;var o=e(\"../core-js/object/define-property\"),i=n(o);r[\"default\"]=function(){function e(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,\"value\"in n&&(n.writable=!0),(0,i[\"default\"])(e,n.key,n)}}return function(t,r,n){return r&&e(t.prototype,r),n&&e(t,n),t}}()},{\"../core-js/object/define-property\":2}],12:[function(e,t,r){\"use strict\";function n(e){return e&&e.__esModule?e:{\"default\":e}}r.__esModule=!0;var o=e(\"../core-js/object/get-prototype-of\"),i=n(o),a=e(\"../core-js/object/get-own-property-descriptor\"),s=n(a);r[\"default\"]=function u(e,t,r){null===e&&(e=Function.prototype);var n=(0,s[\"default\"])(e,t);if(void 0===n){var o=(0,i[\"default\"])(e);return null===o?void 0:u(o,t,r)}if(\"value\"in n)return n.value;var a=n.get;if(void 0!==a)return a.call(r)}},{\"../core-js/object/get-own-property-descriptor\":4,\"../core-js/object/get-prototype-of\":5}],13:[function(e,t,r){\"use strict\";function n(e){return e&&e.__esModule?e:{\"default\":e}}r.__esModule=!0;var o=e(\"../core-js/object/set-prototype-of\"),i=n(o),a=e(\"../core-js/object/create\"),s=n(a),u=e(\"../helpers/typeof\"),l=n(u);r[\"default\"]=function(e,t){if(\"function\"!=typeof t&&null!==t)throw new TypeError(\"Super expression must either be null or a function, not \"+(\"undefined\"==typeof t?\"undefined\":(0,l[\"default\"])(t)));e.prototype=(0,s[\"default\"])(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(i[\"default\"]?(0,i[\"default\"])(e,t):e.__proto__=t)}},{\"../core-js/object/create\":1,\"../core-js/object/set-prototype-of\":7,\"../helpers/typeof\":15}],14:[function(e,t,r){\"use strict\";function n(e){return e&&e.__esModule?e:{\"default\":e}}r.__esModule=!0;var o=e(\"../helpers/typeof\"),i=n(o);r[\"default\"]=function(e,t){if(!e)throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");return!t||\"object\"!==(\"undefined\"==typeof t?\"undefined\":(0,i[\"default\"])(t))&&\"function\"!=typeof t?e:t}},{\"../helpers/typeof\":15}],15:[function(e,t,r){\"use strict\";function n(e){return e&&e.__esModule?e:{\"default\":e}}r.__esModule=!0;var o=e(\"../core-js/symbol/iterator\"),i=n(o),a=e(\"../core-js/symbol\"),s=n(a),u=\"function\"==typeof s[\"default\"]&&\"symbol\"==typeof i[\"default\"]?function(e){return typeof e}:function(e){return e&&\"function\"==typeof s[\"default\"]&&e.constructor===s[\"default\"]?\"symbol\":typeof e};r[\"default\"]=\"function\"==typeof s[\"default\"]&&\"symbol\"===u(i[\"default\"])?function(e){return\"undefined\"==typeof e?\"undefined\":u(e)}:function(e){return e&&\"function\"==typeof s[\"default\"]&&e.constructor===s[\"default\"]?\"symbol\":\"undefined\"==typeof e?\"undefined\":u(e)}},{\"../core-js/symbol\":8,\"../core-js/symbol/iterator\":9}],16:[function(e,t,r){t.exports=e(\"regenerator-runtime\")},{\"regenerator-runtime\":98}],17:[function(e,t,r){e(\"../../modules/es6.object.create\");var n=e(\"../../modules/_core\").Object;t.exports=function(e,t){return n.create(e,t)}},{\"../../modules/_core\":31,\"../../modules/es6.object.create\":85}],18:[function(e,t,r){e(\"../../modules/es6.object.define-property\");var n=e(\"../../modules/_core\").Object;t.exports=function(e,t,r){return n.defineProperty(e,t,r)}},{\"../../modules/_core\":31,\"../../modules/es6.object.define-property\":86}],19:[function(e,t,r){e(\"../../modules/es6.object.freeze\"),t.exports=e(\"../../modules/_core\").Object.freeze},{\"../../modules/_core\":31,\"../../modules/es6.object.freeze\":87}],20:[function(e,t,r){e(\"../../modules/es6.object.get-own-property-descriptor\");var n=e(\"../../modules/_core\").Object;t.exports=function(e,t){return n.getOwnPropertyDescriptor(e,t)}},{\"../../modules/_core\":31,\"../../modules/es6.object.get-own-property-descriptor\":88}],21:[function(e,t,r){e(\"../../modules/es6.object.get-prototype-of\"),t.exports=e(\"../../modules/_core\").Object.getPrototypeOf},{\"../../modules/_core\":31,\"../../modules/es6.object.get-prototype-of\":89}],22:[function(e,t,r){e(\"../../modules/es6.object.keys\"),t.exports=e(\"../../modules/_core\").Object.keys},{\"../../modules/_core\":31,\"../../modules/es6.object.keys\":90}],23:[function(e,t,r){e(\"../../modules/es6.object.set-prototype-of\"),t.exports=e(\"../../modules/_core\").Object.setPrototypeOf},{\"../../modules/_core\":31,\"../../modules/es6.object.set-prototype-of\":91}],24:[function(e,t,r){e(\"../../modules/es6.symbol\"),e(\"../../modules/es6.object.to-string\"),e(\"../../modules/es7.symbol.async-iterator\"),e(\"../../modules/es7.symbol.observable\"),t.exports=e(\"../../modules/_core\").Symbol},{\"../../modules/_core\":31,\"../../modules/es6.object.to-string\":92,\"../../modules/es6.symbol\":94,\"../../modules/es7.symbol.async-iterator\":95,\"../../modules/es7.symbol.observable\":96}],25:[function(e,t,r){e(\"../../modules/es6.string.iterator\"),e(\"../../modules/web.dom.iterable\"),t.exports=e(\"../../modules/_wks-ext\").f(\"iterator\")},{\"../../modules/_wks-ext\":82,\"../../modules/es6.string.iterator\":93,\"../../modules/web.dom.iterable\":97}],26:[function(e,t,r){t.exports=function(e){if(\"function\"!=typeof e)throw TypeError(e+\" is not a function!\");return e}},{}],27:[function(e,t,r){t.exports=function(){}},{}],28:[function(e,t,r){var n=e(\"./_is-object\");t.exports=function(e){if(!n(e))throw TypeError(e+\" is not an object!\");return e}},{\"./_is-object\":47}],29:[function(e,t,r){var n=e(\"./_to-iobject\"),o=e(\"./_to-length\"),i=e(\"./_to-index\");t.exports=function(e){return function(t,r,a){var s,u=n(t),l=o(u.length),c=i(a,l);if(e&&r!=r){for(;l>c;)if(s=u[c++],s!=s)return!0}else for(;l>c;c++)if((e||c in u)&&u[c]===r)return e||c||0;return!e&&-1}}},{\"./_to-index\":74,\"./_to-iobject\":76,\"./_to-length\":77}],30:[function(e,t,r){var n={}.toString;t.exports=function(e){return n.call(e).slice(8,-1)}},{}],31:[function(e,t,r){var n=t.exports={version:\"2.4.0\"};\"number\"==typeof __e&&(__e=n)},{}],32:[function(e,t,r){var n=e(\"./_a-function\");t.exports=function(e,t,r){if(n(e),void 0===t)return e;switch(r){case 1:return function(r){return e.call(t,r)};case 2:return function(r,n){return e.call(t,r,n)};case 3:return function(r,n,o){return e.call(t,r,n,o)}}return function(){return e.apply(t,arguments)}}},{\"./_a-function\":26}],33:[function(e,t,r){t.exports=function(e){if(void 0==e)throw TypeError(\"Can't call method on  \"+e);return e}},{}],34:[function(e,t,r){t.exports=!e(\"./_fails\")(function(){return 7!=Object.defineProperty({},\"a\",{get:function(){return 7}}).a})},{\"./_fails\":39}],35:[function(e,t,r){var n=e(\"./_is-object\"),o=e(\"./_global\").document,i=n(o)&&n(o.createElement);t.exports=function(e){return i?o.createElement(e):{}}},{\"./_global\":40,\"./_is-object\":47}],36:[function(e,t,r){t.exports=\"constructor,hasOwnProperty,isPrototypeOf,propertyIsEnumerable,toLocaleString,toString,valueOf\".split(\",\")},{}],37:[function(e,t,r){var n=e(\"./_object-keys\"),o=e(\"./_object-gops\"),i=e(\"./_object-pie\");t.exports=function(e){var t=n(e),r=o.f;if(r)for(var a,s=r(e),u=i.f,l=0;s.length>l;)u.call(e,a=s[l++])&&t.push(a);return t}},{\"./_object-gops\":61,\"./_object-keys\":64,\"./_object-pie\":65}],38:[function(e,t,r){var n=e(\"./_global\"),o=e(\"./_core\"),i=e(\"./_ctx\"),a=e(\"./_hide\"),s=\"prototype\",u=function(e,t,r){var l,c,f,p=e&u.F,d=e&u.G,h=e&u.S,y=e&u.P,m=e&u.B,v=e&u.W,_=d?o:o[t]||(o[t]={}),b=_[s],g=d?n:h?n[t]:(n[t]||{})[s];d&&(r=t);for(l in r)c=!p&&g&&void 0!==g[l],c&&l in _||(f=c?g[l]:r[l],_[l]=d&&\"function\"!=typeof g[l]?r[l]:m&&c?i(f,n):v&&g[l]==f?function(e){var t=function(t,r,n){if(this instanceof e){switch(arguments.length){case 0:return new e;case 1:return new e(t);case 2:return new e(t,r)}return new e(t,r,n)}return e.apply(this,arguments)};return t[s]=e[s],t}(f):y&&\"function\"==typeof f?i(Function.call,f):f,y&&((_.virtual||(_.virtual={}))[l]=f,e&u.R&&b&&!b[l]&&a(b,l,f)))};u.F=1,u.G=2,u.S=4,u.P=8,u.B=16,u.W=32,u.U=64,u.R=128,t.exports=u},{\"./_core\":31,\"./_ctx\":32,\"./_global\":40,\"./_hide\":42}],39:[function(e,t,r){t.exports=function(e){try{return!!e()}catch(t){return!0}}},{}],40:[function(e,t,r){var n=t.exports=\"undefined\"!=typeof window&&window.Math==Math?window:\"undefined\"!=typeof self&&self.Math==Math?self:Function(\"return this\")();\"number\"==typeof __g&&(__g=n)},{}],41:[function(e,t,r){var n={}.hasOwnProperty;t.exports=function(e,t){return n.call(e,t)}},{}],42:[function(e,t,r){var n=e(\"./_object-dp\"),o=e(\"./_property-desc\");t.exports=e(\"./_descriptors\")?function(e,t,r){return n.f(e,t,o(1,r))}:function(e,t,r){return e[t]=r,e}},{\"./_descriptors\":34,\"./_object-dp\":56,\"./_property-desc\":67}],43:[function(e,t,r){t.exports=e(\"./_global\").document&&document.documentElement},{\"./_global\":40}],44:[function(e,t,r){t.exports=!e(\"./_descriptors\")&&!e(\"./_fails\")(function(){return 7!=Object.defineProperty(e(\"./_dom-create\")(\"div\"),\"a\",{get:function(){return 7}}).a})},{\"./_descriptors\":34,\"./_dom-create\":35,\"./_fails\":39}],45:[function(e,t,r){var n=e(\"./_cof\");t.exports=Object(\"z\").propertyIsEnumerable(0)?Object:function(e){return\"String\"==n(e)?e.split(\"\"):Object(e)}},{\"./_cof\":30}],46:[function(e,t,r){var n=e(\"./_cof\");t.exports=Array.isArray||function(e){return\"Array\"==n(e)}},{\"./_cof\":30}],47:[function(e,t,r){t.exports=function(e){return\"object\"==typeof e?null!==e:\"function\"==typeof e}},{}],48:[function(e,t,r){\"use strict\";var n=e(\"./_object-create\"),o=e(\"./_property-desc\"),i=e(\"./_set-to-string-tag\"),a={};e(\"./_hide\")(a,e(\"./_wks\")(\"iterator\"),function(){return this}),t.exports=function(e,t,r){e.prototype=n(a,{next:o(1,r)}),i(e,t+\" Iterator\")}},{\"./_hide\":42,\"./_object-create\":55,\"./_property-desc\":67,\"./_set-to-string-tag\":70,\"./_wks\":83}],49:[function(e,t,r){\"use strict\";var n=e(\"./_library\"),o=e(\"./_export\"),i=e(\"./_redefine\"),a=e(\"./_hide\"),s=e(\"./_has\"),u=e(\"./_iterators\"),l=e(\"./_iter-create\"),c=e(\"./_set-to-string-tag\"),f=e(\"./_object-gpo\"),p=e(\"./_wks\")(\"iterator\"),d=!([].keys&&\"next\"in[].keys()),h=\"@@iterator\",y=\"keys\",m=\"values\",v=function(){return this};t.exports=function(e,t,r,_,b,g,E){l(r,t,_);var j,w,O,M=function(e){if(!d&&e in R)return R[e];switch(e){case y:return function(){return new r(this,e)};case m:return function(){return new r(this,e)}}return function(){return new r(this,e)}},x=t+\" Iterator\",P=b==m,k=!1,R=e.prototype,S=R[p]||R[h]||b&&R[b],A=S||M(b),T=b?P?M(\"entries\"):A:void 0,N=\"Array\"==t?R.entries||S:S;if(N&&(O=f(N.call(new e)),O!==Object.prototype&&(c(O,x,!0),n||s(O,p)||a(O,p,v))),P&&S&&S.name!==m&&(k=!0,A=function(){return S.call(this)}),n&&!E||!d&&!k&&R[p]||a(R,p,A),u[t]=A,u[x]=v,b)if(j={values:P?A:M(m),keys:g?A:M(y),entries:T},E)for(w in j)w in R||i(R,w,j[w]);else o(o.P+o.F*(d||k),t,j);return j}},{\"./_export\":38,\"./_has\":41,\"./_hide\":42,\"./_iter-create\":48,\"./_iterators\":51,\"./_library\":53,\"./_object-gpo\":62,\"./_redefine\":68,\"./_set-to-string-tag\":70,\"./_wks\":83}],50:[function(e,t,r){t.exports=function(e,t){return{value:t,done:!!e}}},{}],51:[function(e,t,r){t.exports={}},{}],52:[function(e,t,r){var n=e(\"./_object-keys\"),o=e(\"./_to-iobject\");t.exports=function(e,t){for(var r,i=o(e),a=n(i),s=a.length,u=0;s>u;)if(i[r=a[u++]]===t)return r}},{\"./_object-keys\":64,\"./_to-iobject\":76}],53:[function(e,t,r){t.exports=!0},{}],54:[function(e,t,r){var n=e(\"./_uid\")(\"meta\"),o=e(\"./_is-object\"),i=e(\"./_has\"),a=e(\"./_object-dp\").f,s=0,u=Object.isExtensible||function(){return!0},l=!e(\"./_fails\")(function(){return u(Object.preventExtensions({}))}),c=function(e){a(e,n,{value:{i:\"O\"+ ++s,w:{}}})},f=function(e,t){if(!o(e))return\"symbol\"==typeof e?e:(\"string\"==typeof e?\"S\":\"P\")+e;if(!i(e,n)){if(!u(e))return\"F\";if(!t)return\"E\";c(e)}return e[n].i},p=function(e,t){if(!i(e,n)){if(!u(e))return!0;if(!t)return!1;c(e)}return e[n].w},d=function(e){return l&&h.NEED&&u(e)&&!i(e,n)&&c(e),e},h=t.exports={KEY:n,NEED:!1,fastKey:f,getWeak:p,onFreeze:d}},{\"./_fails\":39,\"./_has\":41,\"./_is-object\":47,\"./_object-dp\":56,\"./_uid\":80}],55:[function(e,t,r){var n=e(\"./_an-object\"),o=e(\"./_object-dps\"),i=e(\"./_enum-bug-keys\"),a=e(\"./_shared-key\")(\"IE_PROTO\"),s=function(){},u=\"prototype\",l=function(){var t,r=e(\"./_dom-create\")(\"iframe\"),n=i.length,o=\">\";for(r.style.display=\"none\",e(\"./_html\").appendChild(r),r.src=\"javascript:\",t=r.contentWindow.document,t.open(),t.write(\"<script>document.F=Object</script\"+o),t.close(),l=t.F;n--;)delete l[u][i[n]];return l()};t.exports=Object.create||function(e,t){var r;return null!==e?(s[u]=n(e),r=new s,s[u]=null,r[a]=e):r=l(),void 0===t?r:o(r,t)}},{\"./_an-object\":28,\"./_dom-create\":35,\"./_enum-bug-keys\":36,\"./_html\":43,\"./_object-dps\":57,\"./_shared-key\":71}],56:[function(e,t,r){var n=e(\"./_an-object\"),o=e(\"./_ie8-dom-define\"),i=e(\"./_to-primitive\"),a=Object.defineProperty;r.f=e(\"./_descriptors\")?Object.defineProperty:function(e,t,r){if(n(e),t=i(t,!0),n(r),o)try{return a(e,t,r)}catch(s){}if(\"get\"in r||\"set\"in r)throw TypeError(\"Accessors not supported!\");return\"value\"in r&&(e[t]=r.value),e}},{\"./_an-object\":28,\"./_descriptors\":34,\"./_ie8-dom-define\":44,\"./_to-primitive\":79}],57:[function(e,t,r){var n=e(\"./_object-dp\"),o=e(\"./_an-object\"),i=e(\"./_object-keys\");t.exports=e(\"./_descriptors\")?Object.defineProperties:function(e,t){o(e);for(var r,a=i(t),s=a.length,u=0;s>u;)n.f(e,r=a[u++],t[r]);return e}},{\"./_an-object\":28,\"./_descriptors\":34,\"./_object-dp\":56,\"./_object-keys\":64}],58:[function(e,t,r){var n=e(\"./_object-pie\"),o=e(\"./_property-desc\"),i=e(\"./_to-iobject\"),a=e(\"./_to-primitive\"),s=e(\"./_has\"),u=e(\"./_ie8-dom-define\"),l=Object.getOwnPropertyDescriptor;r.f=e(\"./_descriptors\")?l:function(e,t){if(e=i(e),t=a(t,!0),u)try{return l(e,t)}catch(r){}if(s(e,t))return o(!n.f.call(e,t),e[t])}},{\"./_descriptors\":34,\"./_has\":41,\"./_ie8-dom-define\":44,\"./_object-pie\":65,\"./_property-desc\":67,\"./_to-iobject\":76,\"./_to-primitive\":79}],59:[function(e,t,r){var n=e(\"./_to-iobject\"),o=e(\"./_object-gopn\").f,i={}.toString,a=\"object\"==typeof window&&window&&Object.getOwnPropertyNames?Object.getOwnPropertyNames(window):[],s=function(e){try{return o(e)}catch(t){return a.slice()}};t.exports.f=function(e){return a&&\"[object Window]\"==i.call(e)?s(e):o(n(e))}},{\"./_object-gopn\":60,\"./_to-iobject\":76}],60:[function(e,t,r){var n=e(\"./_object-keys-internal\"),o=e(\"./_enum-bug-keys\").concat(\"length\",\"prototype\");r.f=Object.getOwnPropertyNames||function(e){return n(e,o)}},{\"./_enum-bug-keys\":36,\"./_object-keys-internal\":63}],61:[function(e,t,r){r.f=Object.getOwnPropertySymbols},{}],62:[function(e,t,r){var n=e(\"./_has\"),o=e(\"./_to-object\"),i=e(\"./_shared-key\")(\"IE_PROTO\"),a=Object.prototype;t.exports=Object.getPrototypeOf||function(e){return e=o(e),n(e,i)?e[i]:\"function\"==typeof e.constructor&&e instanceof e.constructor?e.constructor.prototype:e instanceof Object?a:null}},{\"./_has\":41,\"./_shared-key\":71,\"./_to-object\":78}],63:[function(e,t,r){var n=e(\"./_has\"),o=e(\"./_to-iobject\"),i=e(\"./_array-includes\")(!1),a=e(\"./_shared-key\")(\"IE_PROTO\");t.exports=function(e,t){var r,s=o(e),u=0,l=[];for(r in s)r!=a&&n(s,r)&&l.push(r);for(;t.length>u;)n(s,r=t[u++])&&(~i(l,r)||l.push(r));return l}},{\"./_array-includes\":29,\"./_has\":41,\"./_shared-key\":71,\"./_to-iobject\":76}],64:[function(e,t,r){var n=e(\"./_object-keys-internal\"),o=e(\"./_enum-bug-keys\");t.exports=Object.keys||function(e){return n(e,o)}},{\"./_enum-bug-keys\":36,\"./_object-keys-internal\":63}],65:[function(e,t,r){r.f={}.propertyIsEnumerable},{}],66:[function(e,t,r){var n=e(\"./_export\"),o=e(\"./_core\"),i=e(\"./_fails\");t.exports=function(e,t){var r=(o.Object||{})[e]||Object[e],a={};a[e]=t(r),n(n.S+n.F*i(function(){r(1)}),\"Object\",a)}},{\"./_core\":31,\"./_export\":38,\"./_fails\":39}],67:[function(e,t,r){t.exports=function(e,t){return{enumerable:!(1&e),configurable:!(2&e),writable:!(4&e),value:t}}},{}],68:[function(e,t,r){t.exports=e(\"./_hide\")},{\"./_hide\":42}],69:[function(e,t,r){var n=e(\"./_is-object\"),o=e(\"./_an-object\"),i=function(e,t){if(o(e),!n(t)&&null!==t)throw TypeError(t+\": can't set as prototype!\")};t.exports={set:Object.setPrototypeOf||(\"__proto__\"in{}?function(t,r,n){try{n=e(\"./_ctx\")(Function.call,e(\"./_object-gopd\").f(Object.prototype,\"__proto__\").set,2),n(t,[]),r=!(t instanceof Array)}catch(o){r=!0}return function(e,t){return i(e,t),r?e.__proto__=t:n(e,t),e}}({},!1):void 0),check:i}},{\"./_an-object\":28,\"./_ctx\":32,\"./_is-object\":47,\"./_object-gopd\":58}],70:[function(e,t,r){var n=e(\"./_object-dp\").f,o=e(\"./_has\"),i=e(\"./_wks\")(\"toStringTag\");t.exports=function(e,t,r){e&&!o(e=r?e:e.prototype,i)&&n(e,i,{configurable:!0,value:t})}},{\"./_has\":41,\"./_object-dp\":56,\"./_wks\":83}],71:[function(e,t,r){var n=e(\"./_shared\")(\"keys\"),o=e(\"./_uid\");t.exports=function(e){return n[e]||(n[e]=o(e))}},{\"./_shared\":72,\"./_uid\":80}],72:[function(e,t,r){var n=e(\"./_global\"),o=\"__core-js_shared__\",i=n[o]||(n[o]={});t.exports=function(e){return i[e]||(i[e]={})}},{\"./_global\":40}],73:[function(e,t,r){var n=e(\"./_to-integer\"),o=e(\"./_defined\");t.exports=function(e){return function(t,r){var i,a,s=String(o(t)),u=n(r),l=s.length;return u<0||u>=l?e?\"\":void 0:(i=s.charCodeAt(u),i<55296||i>56319||u+1===l||(a=s.charCodeAt(u+1))<56320||a>57343?e?s.charAt(u):i:e?s.slice(u,u+2):(i-55296<<10)+(a-56320)+65536)}}},{\"./_defined\":33,\"./_to-integer\":75}],74:[function(e,t,r){var n=e(\"./_to-integer\"),o=Math.max,i=Math.min;t.exports=function(e,t){return e=n(e),e<0?o(e+t,0):i(e,t)}},{\"./_to-integer\":75}],75:[function(e,t,r){var n=Math.ceil,o=Math.floor;t.exports=function(e){return isNaN(e=+e)?0:(e>0?o:n)(e)}},{}],76:[function(e,t,r){var n=e(\"./_iobject\"),o=e(\"./_defined\");t.exports=function(e){return n(o(e))}},{\"./_defined\":33,\"./_iobject\":45}],77:[function(e,t,r){var n=e(\"./_to-integer\"),o=Math.min;t.exports=function(e){return e>0?o(n(e),9007199254740991):0}},{\"./_to-integer\":75}],78:[function(e,t,r){var n=e(\"./_defined\");t.exports=function(e){return Object(n(e))}},{\"./_defined\":33}],79:[function(e,t,r){var n=e(\"./_is-object\");t.exports=function(e,t){if(!n(e))return e;var r,o;if(t&&\"function\"==typeof(r=e.toString)&&!n(o=r.call(e)))return o;if(\"function\"==typeof(r=e.valueOf)&&!n(o=r.call(e)))return o;if(!t&&\"function\"==typeof(r=e.toString)&&!n(o=r.call(e)))return o;throw TypeError(\"Can't convert object to primitive value\")}},{\"./_is-object\":47}],80:[function(e,t,r){var n=0,o=Math.random();t.exports=function(e){return\"Symbol(\".concat(void 0===e?\"\":e,\")_\",(++n+o).toString(36))}},{}],81:[function(e,t,r){var n=e(\"./_global\"),o=e(\"./_core\"),i=e(\"./_library\"),a=e(\"./_wks-ext\"),s=e(\"./_object-dp\").f;t.exports=function(e){var t=o.Symbol||(o.Symbol=i?{}:n.Symbol||{});\"_\"==e.charAt(0)||e in t||s(t,e,{value:a.f(e)})}},{\"./_core\":31,\"./_global\":40,\"./_library\":53,\"./_object-dp\":56,\"./_wks-ext\":82}],82:[function(e,t,r){r.f=e(\"./_wks\")},{\"./_wks\":83}],83:[function(e,t,r){var n=e(\"./_shared\")(\"wks\"),o=e(\"./_uid\"),i=e(\"./_global\").Symbol,a=\"function\"==typeof i,s=t.exports=function(e){return n[e]||(n[e]=a&&i[e]||(a?i:o)(\"Symbol.\"+e))};s.store=n},{\"./_global\":40,\"./_shared\":72,\"./_uid\":80}],84:[function(e,t,r){\"use strict\";var n=e(\"./_add-to-unscopables\"),o=e(\"./_iter-step\"),i=e(\"./_iterators\"),a=e(\"./_to-iobject\");t.exports=e(\"./_iter-define\")(Array,\"Array\",function(e,t){this._t=a(e),this._i=0,this._k=t},function(){var e=this._t,t=this._k,r=this._i++;return!e||r>=e.length?(this._t=void 0,o(1)):\"keys\"==t?o(0,r):\"values\"==t?o(0,e[r]):o(0,[r,e[r]])},\"values\"),i.Arguments=i.Array,n(\"keys\"),n(\"values\"),n(\"entries\")},{\"./_add-to-unscopables\":27,\"./_iter-define\":49,\"./_iter-step\":50,\"./_iterators\":51,\"./_to-iobject\":76}],85:[function(e,t,r){var n=e(\"./_export\");n(n.S,\"Object\",{create:e(\"./_object-create\")})},{\"./_export\":38,\"./_object-create\":55}],86:[function(e,t,r){var n=e(\"./_export\");n(n.S+n.F*!e(\"./_descriptors\"),\"Object\",{defineProperty:e(\"./_object-dp\").f})},{\"./_descriptors\":34,\"./_export\":38,\"./_object-dp\":56}],87:[function(e,t,r){var n=e(\"./_is-object\"),o=e(\"./_meta\").onFreeze;e(\"./_object-sap\")(\"freeze\",function(e){return function(t){return e&&n(t)?e(o(t)):t}})},{\"./_is-object\":47,\"./_meta\":54,\"./_object-sap\":66}],88:[function(e,t,r){var n=e(\"./_to-iobject\"),o=e(\"./_object-gopd\").f;e(\"./_object-sap\")(\"getOwnPropertyDescriptor\",function(){return function(e,t){return o(n(e),t)}})},{\"./_object-gopd\":58,\"./_object-sap\":66,\"./_to-iobject\":76}],89:[function(e,t,r){var n=e(\"./_to-object\"),o=e(\"./_object-gpo\");e(\"./_object-sap\")(\"getPrototypeOf\",function(){return function(e){return o(n(e))}})},{\"./_object-gpo\":62,\"./_object-sap\":66,\"./_to-object\":78}],90:[function(e,t,r){var n=e(\"./_to-object\"),o=e(\"./_object-keys\");e(\"./_object-sap\")(\"keys\",function(){return function(e){return o(n(e))}})},{\"./_object-keys\":64,\"./_object-sap\":66,\"./_to-object\":78}],91:[function(e,t,r){var n=e(\"./_export\");n(n.S,\"Object\",{setPrototypeOf:e(\"./_set-proto\").set})},{\"./_export\":38,\"./_set-proto\":69}],92:[function(e,t,r){},{}],93:[function(e,t,r){\"use strict\";var n=e(\"./_string-at\")(!0);e(\"./_iter-define\")(String,\"String\",function(e){this._t=String(e),this._i=0},function(){var e,t=this._t,r=this._i;return r>=t.length?{value:void 0,done:!0}:(e=n(t,r),this._i+=e.length,{value:e,done:!1})})},{\"./_iter-define\":49,\"./_string-at\":73}],94:[function(e,t,r){\"use strict\";var n=e(\"./_global\"),o=e(\"./_has\"),i=e(\"./_descriptors\"),a=e(\"./_export\"),s=e(\"./_redefine\"),u=e(\"./_meta\").KEY,l=e(\"./_fails\"),c=e(\"./_shared\"),f=e(\"./_set-to-string-tag\"),p=e(\"./_uid\"),d=e(\"./_wks\"),h=e(\"./_wks-ext\"),y=e(\"./_wks-define\"),m=e(\"./_keyof\"),v=e(\"./_enum-keys\"),_=e(\"./_is-array\"),b=e(\"./_an-object\"),g=e(\"./_to-iobject\"),E=e(\"./_to-primitive\"),j=e(\"./_property-desc\"),w=e(\"./_object-create\"),O=e(\"./_object-gopn-ext\"),M=e(\"./_object-gopd\"),x=e(\"./_object-dp\"),P=e(\"./_object-keys\"),k=M.f,R=x.f,S=O.f,A=n.Symbol,T=n.JSON,N=T&&T.stringify,I=\"prototype\",U=d(\"_hidden\"),C=d(\"toPrimitive\"),L={}.propertyIsEnumerable,F=c(\"symbol-registry\"),B=c(\"symbols\"),D=c(\"op-symbols\"),G=Object[I],K=\"function\"==typeof A,Y=n.QObject,q=!Y||!Y[I]||!Y[I].findChild,z=i&&l(function(){return 7!=w(R({},\"a\",{get:function(){return R(this,\"a\",{value:7}).a}})).a})?function(e,t,r){var n=k(G,t);n&&delete G[t],R(e,t,r),n&&e!==G&&R(G,t,n)}:R,W=function(e){var t=B[e]=w(A[I]);return t._k=e,t},H=K&&\"symbol\"==typeof A.iterator?function(e){return\"symbol\"==typeof e}:function(e){return e instanceof A},V=function(e,t,r){return e===G&&V(D,t,r),b(e),t=E(t,!0),b(r),o(B,t)?(r.enumerable?(o(e,U)&&e[U][t]&&(e[U][t]=!1),r=w(r,{enumerable:j(0,!1)})):(o(e,U)||R(e,U,j(1,{})),e[U][t]=!0),z(e,t,r)):R(e,t,r)},J=function(e,t){b(e);for(var r,n=v(t=g(t)),o=0,i=n.length;i>o;)V(e,r=n[o++],t[r]);return e},$=function(e,t){return void 0===t?w(e):J(w(e),t)},X=function(e){var t=L.call(this,e=E(e,!0));return!(this===G&&o(B,e)&&!o(D,e))&&(!(t||!o(this,e)||!o(B,e)||o(this,U)&&this[U][e])||t)},Q=function(e,t){if(e=g(e),t=E(t,!0),e!==G||!o(B,t)||o(D,t)){var r=k(e,t);return!r||!o(B,t)||o(e,U)&&e[U][t]||(r.enumerable=!0),r}},Z=function(e){for(var t,r=S(g(e)),n=[],i=0;r.length>i;)o(B,t=r[i++])||t==U||t==u||n.push(t);return n},ee=function(e){for(var t,r=e===G,n=S(r?D:g(e)),i=[],a=0;n.length>a;)!o(B,t=n[a++])||r&&!o(G,t)||i.push(B[t]);return i};K||(A=function(){if(this instanceof A)throw TypeError(\"Symbol is not a constructor!\");var e=p(arguments.length>0?arguments[0]:void 0),t=function(r){this===G&&t.call(D,r),o(this,U)&&o(this[U],e)&&(this[U][e]=!1),z(this,e,j(1,r))};return i&&q&&z(G,e,{configurable:!0,set:t}),W(e)},s(A[I],\"toString\",function(){return this._k}),M.f=Q,x.f=V,e(\"./_object-gopn\").f=O.f=Z,e(\"./_object-pie\").f=X,e(\"./_object-gops\").f=ee,i&&!e(\"./_library\")&&s(G,\"propertyIsEnumerable\",X,!0),h.f=function(e){return W(d(e))}),a(a.G+a.W+a.F*!K,{Symbol:A});for(var te=\"hasInstance,isConcatSpreadable,iterator,match,replace,search,species,split,toPrimitive,toStringTag,unscopables\".split(\",\"),re=0;te.length>re;)d(te[re++]);for(var te=P(d.store),re=0;te.length>re;)y(te[re++]);a(a.S+a.F*!K,\"Symbol\",{\"for\":function(e){return o(F,e+=\"\")?F[e]:F[e]=A(e)},keyFor:function(e){if(H(e))return m(F,e);throw TypeError(e+\" is not a symbol!\")},useSetter:function(){q=!0},useSimple:function(){q=!1}}),a(a.S+a.F*!K,\"Object\",{create:$,defineProperty:V,defineProperties:J,getOwnPropertyDescriptor:Q,getOwnPropertyNames:Z,getOwnPropertySymbols:ee}),T&&a(a.S+a.F*(!K||l(function(){var e=A();return\"[null]\"!=N([e])||\"{}\"!=N({a:e})||\"{}\"!=N(Object(e))})),\"JSON\",{stringify:function(e){if(void 0!==e&&!H(e)){for(var t,r,n=[e],o=1;arguments.length>o;)n.push(arguments[o++]);return t=n[1],\"function\"==typeof t&&(r=t),!r&&_(t)||(t=function(e,t){if(r&&(t=r.call(this,e,t)),!H(t))return t}),n[1]=t,N.apply(T,n)}}}),A[I][C]||e(\"./_hide\")(A[I],C,A[I].valueOf),f(A,\"Symbol\"),f(Math,\"Math\",!0),f(n.JSON,\"JSON\",!0)},{\"./_an-object\":28,\"./_descriptors\":34,\"./_enum-keys\":37,\"./_export\":38,\"./_fails\":39,\"./_global\":40,\"./_has\":41,\"./_hide\":42,\"./_is-array\":46,\"./_keyof\":52,\"./_library\":53,\"./_meta\":54,\"./_object-create\":55,\"./_object-dp\":56,\"./_object-gopd\":58,\"./_object-gopn\":60,\"./_object-gopn-ext\":59,\"./_object-gops\":61,\"./_object-keys\":64,\"./_object-pie\":65,\"./_property-desc\":67,\"./_redefine\":68,\"./_set-to-string-tag\":70,\"./_shared\":72,\"./_to-iobject\":76,\"./_to-primitive\":79,\"./_uid\":80,\"./_wks\":83,\"./_wks-define\":81,\"./_wks-ext\":82}],95:[function(e,t,r){e(\"./_wks-define\")(\"asyncIterator\")},{\"./_wks-define\":81}],96:[function(e,t,r){e(\"./_wks-define\")(\"observable\")},{\"./_wks-define\":81}],97:[function(e,t,r){e(\"./es6.array.iterator\");for(var n=e(\"./_global\"),o=e(\"./_hide\"),i=e(\"./_iterators\"),a=e(\"./_wks\")(\"toStringTag\"),s=[\"NodeList\",\"DOMTokenList\",\"MediaList\",\"StyleSheetList\",\"CSSRuleList\"],u=0;u<5;u++){var l=s[u],c=n[l],f=c&&c.prototype;f&&!f[a]&&o(f,a,l),i[l]=i.Array}},{\"./_global\":40,\"./_hide\":42,\"./_iterators\":51,\"./_wks\":83,\"./es6.array.iterator\":84}],98:[function(e,t,r){(function(r){var n=\"object\"==typeof r?r:\"object\"==typeof window?window:\"object\"==typeof self?self:this,o=n.regeneratorRuntime&&Object.getOwnPropertyNames(n).indexOf(\"regeneratorRuntime\")>=0,i=o&&n.regeneratorRuntime;if(n.regeneratorRuntime=void 0,t.exports=e(\"./runtime\"),o)n.regeneratorRuntime=i;else try{delete n.regeneratorRuntime}catch(a){n.regeneratorRuntime=void 0}}).call(this,\"undefined\"!=typeof global?global:\"undefined\"!=typeof self?self:\"undefined\"!=typeof window?window:{})},{\"./runtime\":99}],99:[function(e,t,r){(function(e){!function(e){\"use strict\";function r(e,t,r,n){var i=Object.create((t||o).prototype),a=new d(n||[]);return i._invoke=c(e,r,a),i}function n(e,t,r){try{return{type:\"normal\",arg:e.call(t,r)}}catch(n){return{type:\"throw\",arg:n}}}function o(){}function i(){}function a(){}function s(e){[\"next\",\"throw\",\"return\"].forEach(function(t){e[t]=function(e){return this._invoke(t,e)}})}function u(e){this.arg=e}function l(e){function t(r,o,i,a){var s=n(e[r],e,o);if(\"throw\"!==s.type){var l=s.arg,c=l.value;return c instanceof u?Promise.resolve(c.arg).then(function(e){t(\"next\",e,i,a)},function(e){t(\"throw\",e,i,a)}):Promise.resolve(c).then(function(e){l.value=e,i(l)},a)}a(s.arg)}function r(e,r){function n(){return new Promise(function(n,o){t(e,r,n,o)})}return o=o?o.then(n,n):n()}\"object\"==typeof process&&process.domain&&(t=process.domain.bind(t));var o;this._invoke=r}function c(e,t,r){var o=w;return function(i,a){if(o===M)throw new Error(\"Generator is already running\");if(o===x){if(\"throw\"===i)throw a;return y()}for(;;){var s=r.delegate;if(s){if(\"return\"===i||\"throw\"===i&&s.iterator[i]===m){r.delegate=null;var u=s.iterator[\"return\"];if(u){var l=n(u,s.iterator,a);if(\"throw\"===l.type){i=\"throw\",a=l.arg;continue}}if(\"return\"===i)continue}var l=n(s.iterator[i],s.iterator,a);if(\"throw\"===l.type){r.delegate=null,i=\"throw\",a=l.arg;continue}i=\"next\",a=m;var c=l.arg;if(!c.done)return o=O,c;r[s.resultName]=c.value,r.next=s.nextLoc,r.delegate=null}if(\"next\"===i)r.sent=r._sent=a;else if(\"throw\"===i){if(o===w)throw o=x,a;r.dispatchException(a)&&(i=\"next\",a=m)}else\"return\"===i&&r.abrupt(\"return\",a);o=M;var l=n(e,t,r);if(\"normal\"===l.type){o=r.done?x:O;var c={value:l.arg,done:r.done};if(l.arg!==P)return c;r.delegate&&\"next\"===i&&(a=m)}else\"throw\"===l.type&&(o=x,i=\"throw\",a=l.arg)}}}function f(e){var t={tryLoc:e[0]};1 in e&&(t.catchLoc=e[1]),2 in e&&(t.finallyLoc=e[2],t.afterLoc=e[3]),this.tryEntries.push(t)}function p(e){var t=e.completion||{};t.type=\"normal\",delete t.arg,e.completion=t}function d(e){this.tryEntries=[{tryLoc:\"root\"}],e.forEach(f,this),this.reset(!0)}function h(e){if(e){var t=e[b];if(t)return t.call(e);if(\"function\"==typeof e.next)return e;if(!isNaN(e.length)){var r=-1,n=function o(){for(;++r<e.length;)if(v.call(e,r))return o.value=e[r],o.done=!1,o;return o.value=m,o.done=!0,o};return n.next=n}}return{next:y}}function y(){return{value:m,done:!0}}var m,v=Object.prototype.hasOwnProperty,_=\"function\"==typeof Symbol?Symbol:{},b=_.iterator||\"@@iterator\",g=_.toStringTag||\"@@toStringTag\",E=\"object\"==typeof t,j=e.regeneratorRuntime;if(j)return void(E&&(t.exports=j));j=e.regeneratorRuntime=E?t.exports:{},j.wrap=r;var w=\"suspendedStart\",O=\"suspendedYield\",M=\"executing\",x=\"completed\",P={},k=a.prototype=o.prototype;i.prototype=k.constructor=a,a.constructor=i,a[g]=i.displayName=\"GeneratorFunction\",j.isGeneratorFunction=function(e){var t=\"function\"==typeof e&&e.constructor;return!!t&&(t===i||\"GeneratorFunction\"===(t.displayName||t.name))},j.mark=function(e){return Object.setPrototypeOf?Object.setPrototypeOf(e,a):(e.__proto__=a,g in e||(e[g]=\"GeneratorFunction\")),e.prototype=Object.create(k),e},j.awrap=function(e){return new u(e)},s(l.prototype),j.async=function(e,t,n,o){var i=new l(r(e,t,n,o));return j.isGeneratorFunction(t)?i:i.next().then(function(e){return e.done?e.value:i.next()})},s(k),k[b]=function(){return this},k[g]=\"Generator\",k.toString=function(){return\"[object Generator]\"},j.keys=function(e){var t=[];for(var r in e)t.push(r);return t.reverse(),function n(){for(;t.length;){var r=t.pop();if(r in e)return n.value=r,n.done=!1,n}return n.done=!0,n}},j.values=h,d.prototype={constructor:d,reset:function(e){if(this.prev=0,this.next=0,this.sent=this._sent=m,this.done=!1,this.delegate=null,this.tryEntries.forEach(p),!e)for(var t in this)\"t\"===t.charAt(0)&&v.call(this,t)&&!isNaN(+t.slice(1))&&(this[t]=m);\n},stop:function(){this.done=!0;var e=this.tryEntries[0],t=e.completion;if(\"throw\"===t.type)throw t.arg;return this.rval},dispatchException:function(e){function t(t,n){return i.type=\"throw\",i.arg=e,r.next=t,!!n}if(this.done)throw e;for(var r=this,n=this.tryEntries.length-1;n>=0;--n){var o=this.tryEntries[n],i=o.completion;if(\"root\"===o.tryLoc)return t(\"end\");if(o.tryLoc<=this.prev){var a=v.call(o,\"catchLoc\"),s=v.call(o,\"finallyLoc\");if(a&&s){if(this.prev<o.catchLoc)return t(o.catchLoc,!0);if(this.prev<o.finallyLoc)return t(o.finallyLoc)}else if(a){if(this.prev<o.catchLoc)return t(o.catchLoc,!0)}else{if(!s)throw new Error(\"try statement without catch or finally\");if(this.prev<o.finallyLoc)return t(o.finallyLoc)}}}},abrupt:function(e,t){for(var r=this.tryEntries.length-1;r>=0;--r){var n=this.tryEntries[r];if(n.tryLoc<=this.prev&&v.call(n,\"finallyLoc\")&&this.prev<n.finallyLoc){var o=n;break}}o&&(\"break\"===e||\"continue\"===e)&&o.tryLoc<=t&&t<=o.finallyLoc&&(o=null);var i=o?o.completion:{};return i.type=e,i.arg=t,o?this.next=o.finallyLoc:this.complete(i),P},complete:function(e,t){if(\"throw\"===e.type)throw e.arg;\"break\"===e.type||\"continue\"===e.type?this.next=e.arg:\"return\"===e.type?(this.rval=e.arg,this.next=\"end\"):\"normal\"===e.type&&t&&(this.next=t)},finish:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var r=this.tryEntries[t];if(r.finallyLoc===e)return this.complete(r.completion,r.afterLoc),p(r),P}},\"catch\":function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var r=this.tryEntries[t];if(r.tryLoc===e){var n=r.completion;if(\"throw\"===n.type){var o=n.arg;p(r)}return o}}throw new Error(\"illegal catch attempt\")},delegateYield:function(e,t,r){return this.delegate={iterator:h(e),resultName:t,nextLoc:r},P}}}(\"object\"==typeof e?e:\"object\"==typeof window?window:\"object\"==typeof self?self:this)}).call(this,\"undefined\"!=typeof global?global:\"undefined\"!=typeof self?self:\"undefined\"!=typeof window?window:{})},{}],100:[function(t,r,n){!function(t,n){\"function\"==typeof e&&e.amd?e([],n):\"undefined\"!=typeof r&&r.exports?r.exports=n():t.tv4=n()}(this,function(){function e(e){return encodeURI(e).replace(/%25[0-9][0-9]/g,function(e){return\"%\"+e.substring(3)})}function t(t){var r=\"\";p[t.charAt(0)]&&(r=t.charAt(0),t=t.substring(1));var n=\"\",o=\"\",i=!0,a=!1,s=!1;\"+\"===r?i=!1:\".\"===r?(o=\".\",n=\".\"):\"/\"===r?(o=\"/\",n=\"/\"):\"#\"===r?(o=\"#\",i=!1):\";\"===r?(o=\";\",n=\";\",a=!0,s=!0):\"?\"===r?(o=\"?\",n=\"&\",a=!0):\"&\"===r&&(o=\"&\",n=\"&\",a=!0);for(var u=[],l=t.split(\",\"),c=[],f={},h=0;h<l.length;h++){var y=l[h],m=null;if(y.indexOf(\":\")!==-1){var v=y.split(\":\");y=v[0],m=parseInt(v[1],10)}for(var _={};d[y.charAt(y.length-1)];)_[y.charAt(y.length-1)]=!0,y=y.substring(0,y.length-1);var b={truncate:m,name:y,suffices:_};c.push(b),f[y]=b,u.push(y)}var g=function(t){for(var r=\"\",u=0,l=0;l<c.length;l++){var f=c[l],p=t(f.name);if(null===p||void 0===p||Array.isArray(p)&&0===p.length||\"object\"==typeof p&&0===Object.keys(p).length)u++;else if(r+=l===u?o:n||\",\",Array.isArray(p)){a&&(r+=f.name+\"=\");for(var d=0;d<p.length;d++)d>0&&(r+=f.suffices[\"*\"]?n||\",\":\",\",f.suffices[\"*\"]&&a&&(r+=f.name+\"=\")),r+=i?encodeURIComponent(p[d]).replace(/!/g,\"%21\"):e(p[d])}else if(\"object\"==typeof p){a&&!f.suffices[\"*\"]&&(r+=f.name+\"=\");var h=!0;for(var y in p)h||(r+=f.suffices[\"*\"]?n||\",\":\",\"),h=!1,r+=i?encodeURIComponent(y).replace(/!/g,\"%21\"):e(y),r+=f.suffices[\"*\"]?\"=\":\",\",r+=i?encodeURIComponent(p[y]).replace(/!/g,\"%21\"):e(p[y])}else a&&(r+=f.name,s&&\"\"===p||(r+=\"=\")),null!=f.truncate&&(p=p.substring(0,f.truncate)),r+=i?encodeURIComponent(p).replace(/!/g,\"%21\"):e(p)}return r};return g.varNames=u,{prefix:o,substitution:g}}function r(e){if(!(this instanceof r))return new r(e);for(var n=e.split(\"{\"),o=[n.shift()],i=[],a=[],s=[];n.length>0;){var u=n.shift(),l=u.split(\"}\")[0],c=u.substring(l.length+1),f=t(l);a.push(f.substitution),i.push(f.prefix),o.push(c),s=s.concat(f.substitution.varNames)}this.fill=function(e){for(var t=o[0],r=0;r<a.length;r++){var n=a[r];t+=n(e),t+=o[r+1]}return t},this.varNames=s,this.template=e}function n(e,t){if(e===t)return!0;if(e&&t&&\"object\"==typeof e&&\"object\"==typeof t){if(Array.isArray(e)!==Array.isArray(t))return!1;if(Array.isArray(e)){if(e.length!==t.length)return!1;for(var r=0;r<e.length;r++)if(!n(e[r],t[r]))return!1}else{var o;for(o in e)if(void 0===t[o]&&void 0!==e[o])return!1;for(o in t)if(void 0===e[o]&&void 0!==t[o])return!1;for(o in e)if(!n(e[o],t[o]))return!1}return!0}return!1}function o(e){var t=String(e).replace(/^\\s+|\\s+$/g,\"\").match(/^([^:\\/?#]+:)?(\\/\\/(?:[^:@]*(?::[^:@]*)?@)?(([^:\\/?#]*)(?::(\\d*))?))?([^?#]*)(\\?[^#]*)?(#[\\s\\S]*)?/);return t?{href:t[0]||\"\",protocol:t[1]||\"\",authority:t[2]||\"\",host:t[3]||\"\",hostname:t[4]||\"\",port:t[5]||\"\",pathname:t[6]||\"\",search:t[7]||\"\",hash:t[8]||\"\"}:null}function i(e,t){function r(e){var t=[];return e.replace(/^(\\.\\.?(\\/|$))+/,\"\").replace(/\\/(\\.(\\/|$))+/g,\"/\").replace(/\\/\\.\\.$/,\"/../\").replace(/\\/?[^\\/]*/g,function(e){\"/..\"===e?t.pop():t.push(e)}),t.join(\"\").replace(/^\\//,\"/\"===e.charAt(0)?\"/\":\"\")}return t=o(t||\"\"),e=o(e||\"\"),t&&e?(t.protocol||e.protocol)+(t.protocol||t.authority?t.authority:e.authority)+r(t.protocol||t.authority||\"/\"===t.pathname.charAt(0)?t.pathname:t.pathname?(e.authority&&!e.pathname?\"/\":\"\")+e.pathname.slice(0,e.pathname.lastIndexOf(\"/\")+1)+t.pathname:e.pathname)+(t.protocol||t.authority||t.pathname?t.search:t.search||e.search)+t.hash:null}function a(e){return e.split(\"#\")[0]}function s(e,t){if(e&&\"object\"==typeof e)if(void 0===t?t=e.id:\"string\"==typeof e.id&&(t=i(t,e.id),e.id=t),Array.isArray(e))for(var r=0;r<e.length;r++)s(e[r],t);else{\"string\"==typeof e.$ref&&(e.$ref=i(t,e.$ref));for(var n in e)\"enum\"!==n&&s(e[n],t)}}function u(e){e=e||\"en\";var t=E[e];return function(e){var r=t[e.code]||g[e.code];if(\"string\"!=typeof r)return\"Unknown error code \"+e.code+\": \"+JSON.stringify(e.messageParams);var n=e.params;return r.replace(/\\{([^{}]*)\\}/g,function(e,t){var r=n[t];return\"string\"==typeof r||\"number\"==typeof r?r:e})}}function l(e,t,r,n,o){if(Error.call(this),void 0===e)throw new Error(\"No error code supplied: \"+n);this.message=\"\",this.params=t,this.code=e,this.dataPath=r||\"\",this.schemaPath=n||\"\",this.subErrors=o||null;var i=new Error(this.message);if(this.stack=i.stack||i.stacktrace,!this.stack)try{throw i}catch(i){this.stack=i.stack||i.stacktrace}}function c(e,t){if(t.substring(0,e.length)===e){var r=t.substring(e.length);if(t.length>0&&\"/\"===t.charAt(e.length-1)||\"#\"===r.charAt(0)||\"?\"===r.charAt(0))return!0}return!1}function f(e){var t,r,n=new h,o={setErrorReporter:function(e){return\"string\"==typeof e?this.language(e):(r=e,!0)},addFormat:function(){n.addFormat.apply(n,arguments)},language:function(e){return e?(E[e]||(e=e.split(\"-\")[0]),!!E[e]&&(t=e,e)):t},addLanguage:function(e,t){var r;for(r in v)t[r]&&!t[v[r]]&&(t[v[r]]=t[r]);var n=e.split(\"-\")[0];if(E[n]){E[e]=Object.create(E[n]);for(r in t)\"undefined\"==typeof E[n][r]&&(E[n][r]=t[r]),E[e][r]=t[r]}else E[e]=t,E[n]=t;return this},freshApi:function(e){var t=f();return e&&t.language(e),t},validate:function(e,o,i,a){var s=u(t),l=r?function(e,t,n){return r(e,t,n)||s(e,t,n)}:s,c=new h(n,(!1),l,i,a);\"string\"==typeof o&&(o={$ref:o}),c.addSchema(\"\",o);var f=c.validateAll(e,o,null,null,\"\");return!f&&a&&(f=c.banUnknownProperties(e,o)),this.error=f,this.missing=c.missing,this.valid=null===f,this.valid},validateResult:function(){var e={};return this.validate.apply(e,arguments),e},validateMultiple:function(e,o,i,a){var s=u(t),l=r?function(e,t,n){return r(e,t,n)||s(e,t,n)}:s,c=new h(n,(!0),l,i,a);\"string\"==typeof o&&(o={$ref:o}),c.addSchema(\"\",o),c.validateAll(e,o,null,null,\"\"),a&&c.banUnknownProperties(e,o);var f={};return f.errors=c.errors,f.missing=c.missing,f.valid=0===f.errors.length,f},addSchema:function(){return n.addSchema.apply(n,arguments)},getSchema:function(){return n.getSchema.apply(n,arguments)},getSchemaMap:function(){return n.getSchemaMap.apply(n,arguments)},getSchemaUris:function(){return n.getSchemaUris.apply(n,arguments)},getMissingUris:function(){return n.getMissingUris.apply(n,arguments)},dropSchemas:function(){n.dropSchemas.apply(n,arguments)},defineKeyword:function(){n.defineKeyword.apply(n,arguments)},defineError:function(e,t,r){if(\"string\"!=typeof e||!/^[A-Z]+(_[A-Z]+)*$/.test(e))throw new Error(\"Code name must be a string in UPPER_CASE_WITH_UNDERSCORES\");if(\"number\"!=typeof t||t%1!==0||t<1e4)throw new Error(\"Code number must be an integer > 10000\");if(\"undefined\"!=typeof v[e])throw new Error(\"Error already defined: \"+e+\" as \"+v[e]);if(\"undefined\"!=typeof _[t])throw new Error(\"Error code already used: \"+_[t]+\" as \"+t);v[e]=t,_[t]=e,g[e]=g[t]=r;for(var n in E){var o=E[n];o[e]&&(o[t]=o[t]||o[e])}},reset:function(){n.reset(),this.error=null,this.missing=[],this.valid=!0},missing:[],error:null,valid:!0,normSchema:s,resolveUrl:i,getDocumentUri:a,errorCodes:v};return o.language(e||\"en\"),o}Object.keys||(Object.keys=function(){var e=Object.prototype.hasOwnProperty,t=!{toString:null}.propertyIsEnumerable(\"toString\"),r=[\"toString\",\"toLocaleString\",\"valueOf\",\"hasOwnProperty\",\"isPrototypeOf\",\"propertyIsEnumerable\",\"constructor\"],n=r.length;return function(o){if(\"object\"!=typeof o&&\"function\"!=typeof o||null===o)throw new TypeError(\"Object.keys called on non-object\");var i=[];for(var a in o)e.call(o,a)&&i.push(a);if(t)for(var s=0;s<n;s++)e.call(o,r[s])&&i.push(r[s]);return i}}()),Object.create||(Object.create=function(){function e(){}return function(t){if(1!==arguments.length)throw new Error(\"Object.create implementation only accepts one parameter.\");return e.prototype=t,new e}}()),Array.isArray||(Array.isArray=function(e){return\"[object Array]\"===Object.prototype.toString.call(e)}),Array.prototype.indexOf||(Array.prototype.indexOf=function(e){if(null===this)throw new TypeError;var t=Object(this),r=t.length>>>0;if(0===r)return-1;var n=0;if(arguments.length>1&&(n=Number(arguments[1]),n!==n?n=0:0!==n&&n!==1/0&&n!==-(1/0)&&(n=(n>0||-1)*Math.floor(Math.abs(n)))),n>=r)return-1;for(var o=n>=0?n:Math.max(r-Math.abs(n),0);o<r;o++)if(o in t&&t[o]===e)return o;return-1}),Object.isFrozen||(Object.isFrozen=function(e){for(var t=\"tv4_test_frozen_key\";e.hasOwnProperty(t);)t+=Math.random();try{return e[t]=!0,delete e[t],!1}catch(r){return!0}});var p={\"+\":!0,\"#\":!0,\".\":!0,\"/\":!0,\";\":!0,\"?\":!0,\"&\":!0},d={\"*\":!0};r.prototype={toString:function(){return this.template},fillFromObject:function(e){return this.fill(function(t){return e[t]})}};var h=function(e,t,r,n,o){if(this.missing=[],this.missingMap={},this.formatValidators=e?Object.create(e.formatValidators):{},this.schemas=e?Object.create(e.schemas):{},this.collectMultiple=t,this.errors=[],this.handleError=t?this.collectError:this.returnError,n&&(this.checkRecursive=!0,this.scanned=[],this.scannedFrozen=[],this.scannedFrozenSchemas=[],this.scannedFrozenValidationErrors=[],this.validatedSchemasKey=\"tv4_validation_id\",this.validationErrorsKey=\"tv4_validation_errors_id\"),o&&(this.trackUnknownProperties=!0,this.knownPropertyPaths={},this.unknownPropertyPaths={}),this.errorReporter=r||u(\"en\"),\"string\"==typeof this.errorReporter)throw new Error(\"debug\");if(this.definedKeywords={},e)for(var i in e.definedKeywords)this.definedKeywords[i]=e.definedKeywords[i].slice(0)};h.prototype.defineKeyword=function(e,t){this.definedKeywords[e]=this.definedKeywords[e]||[],this.definedKeywords[e].push(t)},h.prototype.createError=function(e,t,r,n,o,i,a){var s=new l(e,t,r,n,o);return s.message=this.errorReporter(s,i,a),s},h.prototype.returnError=function(e){return e},h.prototype.collectError=function(e){return e&&this.errors.push(e),null},h.prototype.prefixErrors=function(e,t,r){for(var n=e;n<this.errors.length;n++)this.errors[n]=this.errors[n].prefixWith(t,r);return this},h.prototype.banUnknownProperties=function(e,t){for(var r in this.unknownPropertyPaths){var n=this.createError(v.UNKNOWN_PROPERTY,{path:r},r,\"\",null,e,t),o=this.handleError(n);if(o)return o}return null},h.prototype.addFormat=function(e,t){if(\"object\"==typeof e){for(var r in e)this.addFormat(r,e[r]);return this}this.formatValidators[e]=t},h.prototype.resolveRefs=function(e,t){if(void 0!==e.$ref){if(t=t||{},t[e.$ref])return this.createError(v.CIRCULAR_REFERENCE,{urls:Object.keys(t).join(\", \")},\"\",\"\",null,void 0,e);t[e.$ref]=!0,e=this.getSchema(e.$ref,t)}return e},h.prototype.getSchema=function(e,t){var r;if(void 0!==this.schemas[e])return r=this.schemas[e],this.resolveRefs(r,t);var n=e,o=\"\";if(e.indexOf(\"#\")!==-1&&(o=e.substring(e.indexOf(\"#\")+1),n=e.substring(0,e.indexOf(\"#\"))),\"object\"==typeof this.schemas[n]){r=this.schemas[n];var i=decodeURIComponent(o);if(\"\"===i)return this.resolveRefs(r,t);if(\"/\"!==i.charAt(0))return;for(var a=i.split(\"/\").slice(1),s=0;s<a.length;s++){var u=a[s].replace(/~1/g,\"/\").replace(/~0/g,\"~\");if(void 0===r[u]){r=void 0;break}r=r[u]}if(void 0!==r)return this.resolveRefs(r,t)}void 0===this.missing[n]&&(this.missing.push(n),this.missing[n]=n,this.missingMap[n]=n)},h.prototype.searchSchemas=function(e,t){if(Array.isArray(e))for(var r=0;r<e.length;r++)this.searchSchemas(e[r],t);else if(e&&\"object\"==typeof e){\"string\"==typeof e.id&&c(t,e.id)&&void 0===this.schemas[e.id]&&(this.schemas[e.id]=e);for(var n in e)if(\"enum\"!==n)if(\"object\"==typeof e[n])this.searchSchemas(e[n],t);else if(\"$ref\"===n){var o=a(e[n]);o&&void 0===this.schemas[o]&&void 0===this.missingMap[o]&&(this.missingMap[o]=o)}}},h.prototype.addSchema=function(e,t){if(\"string\"!=typeof e||\"undefined\"==typeof t){if(\"object\"!=typeof e||\"string\"!=typeof e.id)return;t=e,e=t.id}e===a(e)+\"#\"&&(e=a(e)),this.schemas[e]=t,delete this.missingMap[e],s(t,e),this.searchSchemas(t,e)},h.prototype.getSchemaMap=function(){var e={};for(var t in this.schemas)e[t]=this.schemas[t];return e},h.prototype.getSchemaUris=function(e){var t=[];for(var r in this.schemas)e&&!e.test(r)||t.push(r);return t},h.prototype.getMissingUris=function(e){var t=[];for(var r in this.missingMap)e&&!e.test(r)||t.push(r);return t},h.prototype.dropSchemas=function(){this.schemas={},this.reset()},h.prototype.reset=function(){this.missing=[],this.missingMap={},this.errors=[]},h.prototype.validateAll=function(e,t,r,n,o){var i;if(t=this.resolveRefs(t),!t)return null;if(t instanceof l)return this.errors.push(t),t;var a,s=this.errors.length,u=null,c=null;if(this.checkRecursive&&e&&\"object\"==typeof e){if(i=!this.scanned.length,e[this.validatedSchemasKey]){var f=e[this.validatedSchemasKey].indexOf(t);if(f!==-1)return this.errors=this.errors.concat(e[this.validationErrorsKey][f]),null}if(Object.isFrozen(e)&&(a=this.scannedFrozen.indexOf(e),a!==-1)){var p=this.scannedFrozenSchemas[a].indexOf(t);if(p!==-1)return this.errors=this.errors.concat(this.scannedFrozenValidationErrors[a][p]),null}if(this.scanned.push(e),Object.isFrozen(e))a===-1&&(a=this.scannedFrozen.length,this.scannedFrozen.push(e),this.scannedFrozenSchemas.push([])),u=this.scannedFrozenSchemas[a].length,this.scannedFrozenSchemas[a][u]=t,this.scannedFrozenValidationErrors[a][u]=[];else{if(!e[this.validatedSchemasKey])try{Object.defineProperty(e,this.validatedSchemasKey,{value:[],configurable:!0}),Object.defineProperty(e,this.validationErrorsKey,{value:[],configurable:!0})}catch(d){e[this.validatedSchemasKey]=[],e[this.validationErrorsKey]=[]}c=e[this.validatedSchemasKey].length,e[this.validatedSchemasKey][c]=t,e[this.validationErrorsKey][c]=[]}}var h=this.errors.length,y=this.validateBasic(e,t,o)||this.validateNumeric(e,t,o)||this.validateString(e,t,o)||this.validateArray(e,t,o)||this.validateObject(e,t,o)||this.validateCombinations(e,t,o)||this.validateHypermedia(e,t,o)||this.validateFormat(e,t,o)||this.validateDefinedKeywords(e,t,o)||null;if(i){for(;this.scanned.length;){var m=this.scanned.pop();delete m[this.validatedSchemasKey]}this.scannedFrozen=[],this.scannedFrozenSchemas=[]}if(y||h!==this.errors.length)for(;r&&r.length||n&&n.length;){var v=r&&r.length?\"\"+r.pop():null,_=n&&n.length?\"\"+n.pop():null;y&&(y=y.prefixWith(v,_)),this.prefixErrors(h,v,_)}return null!==u?this.scannedFrozenValidationErrors[a][u]=this.errors.slice(s):null!==c&&(e[this.validationErrorsKey][c]=this.errors.slice(s)),this.handleError(y)},h.prototype.validateFormat=function(e,t){if(\"string\"!=typeof t.format||!this.formatValidators[t.format])return null;var r=this.formatValidators[t.format].call(null,e,t);return\"string\"==typeof r||\"number\"==typeof r?this.createError(v.FORMAT_CUSTOM,{message:r},\"\",\"/format\",null,e,t):r&&\"object\"==typeof r?this.createError(v.FORMAT_CUSTOM,{message:r.message||\"?\"},r.dataPath||\"\",r.schemaPath||\"/format\",null,e,t):null},h.prototype.validateDefinedKeywords=function(e,t,r){for(var n in this.definedKeywords)if(\"undefined\"!=typeof t[n])for(var o=this.definedKeywords[n],i=0;i<o.length;i++){var a=o[i],s=a(e,t[n],t,r);if(\"string\"==typeof s||\"number\"==typeof s)return this.createError(v.KEYWORD_CUSTOM,{key:n,message:s},\"\",\"\",null,e,t).prefixWith(null,n);if(s&&\"object\"==typeof s){var u=s.code;if(\"string\"==typeof u){if(!v[u])throw new Error(\"Undefined error code (use defineError): \"+u);u=v[u]}else\"number\"!=typeof u&&(u=v.KEYWORD_CUSTOM);var l=\"object\"==typeof s.message?s.message:{key:n,message:s.message||\"?\"},c=s.schemaPath||\"/\"+n.replace(/~/g,\"~0\").replace(/\\//g,\"~1\");return this.createError(u,l,s.dataPath||null,c,null,e,t)}}return null},h.prototype.validateBasic=function(e,t,r){var n;return(n=this.validateType(e,t,r))?n.prefixWith(null,\"type\"):(n=this.validateEnum(e,t,r))?n.prefixWith(null,\"type\"):null},h.prototype.validateType=function(e,t){if(void 0===t.type)return null;var r=typeof e;null===e?r=\"null\":Array.isArray(e)&&(r=\"array\");var n=t.type;Array.isArray(n)||(n=[n]);for(var o=0;o<n.length;o++){var i=n[o];if(i===r||\"integer\"===i&&\"number\"===r&&e%1===0)return null}return this.createError(v.INVALID_TYPE,{type:r,expected:n.join(\"/\")},\"\",\"\",null,e,t)},h.prototype.validateEnum=function(e,t){if(void 0===t[\"enum\"])return null;for(var r=0;r<t[\"enum\"].length;r++){var o=t[\"enum\"][r];if(n(e,o))return null}return this.createError(v.ENUM_MISMATCH,{value:\"undefined\"!=typeof JSON?JSON.stringify(e):e},\"\",\"\",null,e,t)},h.prototype.validateNumeric=function(e,t,r){return this.validateMultipleOf(e,t,r)||this.validateMinMax(e,t,r)||this.validateNaN(e,t,r)||null};var y=Math.pow(2,-51),m=1-y;h.prototype.validateMultipleOf=function(e,t){var r=t.multipleOf||t.divisibleBy;if(void 0===r)return null;if(\"number\"==typeof e){var n=e/r%1;if(n>=y&&n<m)return this.createError(v.NUMBER_MULTIPLE_OF,{value:e,multipleOf:r},\"\",\"\",null,e,t)}return null},h.prototype.validateMinMax=function(e,t){if(\"number\"!=typeof e)return null;if(void 0!==t.minimum){if(e<t.minimum)return this.createError(v.NUMBER_MINIMUM,{value:e,minimum:t.minimum},\"\",\"/minimum\",null,e,t);if(t.exclusiveMinimum&&e===t.minimum)return this.createError(v.NUMBER_MINIMUM_EXCLUSIVE,{value:e,minimum:t.minimum},\"\",\"/exclusiveMinimum\",null,e,t)}if(void 0!==t.maximum){if(e>t.maximum)return this.createError(v.NUMBER_MAXIMUM,{value:e,maximum:t.maximum},\"\",\"/maximum\",null,e,t);if(t.exclusiveMaximum&&e===t.maximum)return this.createError(v.NUMBER_MAXIMUM_EXCLUSIVE,{value:e,maximum:t.maximum},\"\",\"/exclusiveMaximum\",null,e,t)}return null},h.prototype.validateNaN=function(e,t){return\"number\"!=typeof e?null:isNaN(e)===!0||e===1/0||e===-(1/0)?this.createError(v.NUMBER_NOT_A_NUMBER,{value:e},\"\",\"/type\",null,e,t):null},h.prototype.validateString=function(e,t,r){return this.validateStringLength(e,t,r)||this.validateStringPattern(e,t,r)||null},h.prototype.validateStringLength=function(e,t){return\"string\"!=typeof e?null:void 0!==t.minLength&&e.length<t.minLength?this.createError(v.STRING_LENGTH_SHORT,{length:e.length,minimum:t.minLength},\"\",\"/minLength\",null,e,t):void 0!==t.maxLength&&e.length>t.maxLength?this.createError(v.STRING_LENGTH_LONG,{length:e.length,maximum:t.maxLength},\"\",\"/maxLength\",null,e,t):null},h.prototype.validateStringPattern=function(e,t){if(\"string\"!=typeof e||\"string\"!=typeof t.pattern&&!(t.pattern instanceof RegExp))return null;var r;if(t.pattern instanceof RegExp)r=t.pattern;else{var n,o=\"\",i=t.pattern.match(/^\\/(.+)\\/([img]*)$/);i?(n=i[1],o=i[2]):n=t.pattern,r=new RegExp(n,o)}return r.test(e)?null:this.createError(v.STRING_PATTERN,{pattern:t.pattern},\"\",\"/pattern\",null,e,t)},h.prototype.validateArray=function(e,t,r){return Array.isArray(e)?this.validateArrayLength(e,t,r)||this.validateArrayUniqueItems(e,t,r)||this.validateArrayItems(e,t,r)||null:null},h.prototype.validateArrayLength=function(e,t){var r;return void 0!==t.minItems&&e.length<t.minItems&&(r=this.createError(v.ARRAY_LENGTH_SHORT,{length:e.length,minimum:t.minItems},\"\",\"/minItems\",null,e,t),this.handleError(r))?r:void 0!==t.maxItems&&e.length>t.maxItems&&(r=this.createError(v.ARRAY_LENGTH_LONG,{length:e.length,maximum:t.maxItems},\"\",\"/maxItems\",null,e,t),this.handleError(r))?r:null},h.prototype.validateArrayUniqueItems=function(e,t){if(t.uniqueItems)for(var r=0;r<e.length;r++)for(var o=r+1;o<e.length;o++)if(n(e[r],e[o])){var i=this.createError(v.ARRAY_UNIQUE,{match1:r,match2:o},\"\",\"/uniqueItems\",null,e,t);if(this.handleError(i))return i}return null},h.prototype.validateArrayItems=function(e,t,r){if(void 0===t.items)return null;var n,o;if(Array.isArray(t.items)){for(o=0;o<e.length;o++)if(o<t.items.length){if(n=this.validateAll(e[o],t.items[o],[o],[\"items\",o],r+\"/\"+o))return n}else if(void 0!==t.additionalItems)if(\"boolean\"==typeof t.additionalItems){if(!t.additionalItems&&(n=this.createError(v.ARRAY_ADDITIONAL_ITEMS,{},\"/\"+o,\"/additionalItems\",null,e,t),this.handleError(n)))return n}else if(n=this.validateAll(e[o],t.additionalItems,[o],[\"additionalItems\"],r+\"/\"+o))return n}else for(o=0;o<e.length;o++)if(n=this.validateAll(e[o],t.items,[o],[\"items\"],r+\"/\"+o))return n;return null},h.prototype.validateObject=function(e,t,r){return\"object\"!=typeof e||null===e||Array.isArray(e)?null:this.validateObjectMinMaxProperties(e,t,r)||this.validateObjectRequiredProperties(e,t,r)||this.validateObjectProperties(e,t,r)||this.validateObjectDependencies(e,t,r)||null},h.prototype.validateObjectMinMaxProperties=function(e,t){var r,n=Object.keys(e);return void 0!==t.minProperties&&n.length<t.minProperties&&(r=this.createError(v.OBJECT_PROPERTIES_MINIMUM,{propertyCount:n.length,minimum:t.minProperties},\"\",\"/minProperties\",null,e,t),this.handleError(r))?r:void 0!==t.maxProperties&&n.length>t.maxProperties&&(r=this.createError(v.OBJECT_PROPERTIES_MAXIMUM,{propertyCount:n.length,maximum:t.maxProperties},\"\",\"/maxProperties\",null,e,t),this.handleError(r))?r:null},h.prototype.validateObjectRequiredProperties=function(e,t){if(void 0!==t.required)for(var r=0;r<t.required.length;r++){var n=t.required[r];if(void 0===e[n]){var o=this.createError(v.OBJECT_REQUIRED,{key:n},\"\",\"/required/\"+r,null,e,t);if(this.handleError(o))return o}}return null},h.prototype.validateObjectProperties=function(e,t,r){var n;for(var o in e){var i=r+\"/\"+o.replace(/~/g,\"~0\").replace(/\\//g,\"~1\"),a=!1;if(void 0!==t.properties&&void 0!==t.properties[o]&&(a=!0,n=this.validateAll(e[o],t.properties[o],[o],[\"properties\",o],i)))return n;if(void 0!==t.patternProperties)for(var s in t.patternProperties){var u=new RegExp(s);if(u.test(o)&&(a=!0,n=this.validateAll(e[o],t.patternProperties[s],[o],[\"patternProperties\",s],i)))return n}if(a)this.trackUnknownProperties&&(this.knownPropertyPaths[i]=!0,delete this.unknownPropertyPaths[i]);else if(void 0!==t.additionalProperties){if(this.trackUnknownProperties&&(this.knownPropertyPaths[i]=!0,delete this.unknownPropertyPaths[i]),\"boolean\"==typeof t.additionalProperties){if(!t.additionalProperties&&(n=this.createError(v.OBJECT_ADDITIONAL_PROPERTIES,{key:o},\"\",\"/additionalProperties\",null,e,t).prefixWith(o,null),this.handleError(n)))return n}else if(n=this.validateAll(e[o],t.additionalProperties,[o],[\"additionalProperties\"],i))return n}else this.trackUnknownProperties&&!this.knownPropertyPaths[i]&&(this.unknownPropertyPaths[i]=!0)}return null},h.prototype.validateObjectDependencies=function(e,t,r){var n;if(void 0!==t.dependencies)for(var o in t.dependencies)if(void 0!==e[o]){var i=t.dependencies[o];if(\"string\"==typeof i){if(void 0===e[i]&&(n=this.createError(v.OBJECT_DEPENDENCY_KEY,{key:o,missing:i},\"\",\"\",null,e,t).prefixWith(null,o).prefixWith(null,\"dependencies\"),this.handleError(n)))return n}else if(Array.isArray(i))for(var a=0;a<i.length;a++){var s=i[a];if(void 0===e[s]&&(n=this.createError(v.OBJECT_DEPENDENCY_KEY,{key:o,missing:s},\"\",\"/\"+a,null,e,t).prefixWith(null,o).prefixWith(null,\"dependencies\"),this.handleError(n)))return n}else if(n=this.validateAll(e,i,[],[\"dependencies\",o],r))return n}return null},h.prototype.validateCombinations=function(e,t,r){return this.validateAllOf(e,t,r)||this.validateAnyOf(e,t,r)||this.validateOneOf(e,t,r)||this.validateNot(e,t,r)||null},h.prototype.validateAllOf=function(e,t,r){if(void 0===t.allOf)return null;for(var n,o=0;o<t.allOf.length;o++){var i=t.allOf[o];if(n=this.validateAll(e,i,[],[\"allOf\",o],r))return n}return null},h.prototype.validateAnyOf=function(e,t,r){if(void 0===t.anyOf)return null;var n,o,i=[],a=this.errors.length;this.trackUnknownProperties&&(n=this.unknownPropertyPaths,o=this.knownPropertyPaths);for(var s=!0,u=0;u<t.anyOf.length;u++){this.trackUnknownProperties&&(this.unknownPropertyPaths={},this.knownPropertyPaths={});var l=t.anyOf[u],c=this.errors.length,f=this.validateAll(e,l,[],[\"anyOf\",u],r);if(null===f&&c===this.errors.length){if(this.errors=this.errors.slice(0,a),this.trackUnknownProperties){for(var p in this.knownPropertyPaths)o[p]=!0,delete n[p];for(var d in this.unknownPropertyPaths)o[d]||(n[d]=!0);s=!1;continue}return null}f&&i.push(f.prefixWith(null,\"\"+u).prefixWith(null,\"anyOf\"))}return this.trackUnknownProperties&&(this.unknownPropertyPaths=n,this.knownPropertyPaths=o),s?(i=i.concat(this.errors.slice(a)),this.errors=this.errors.slice(0,a),this.createError(v.ANY_OF_MISSING,{},\"\",\"/anyOf\",i,e,t)):void 0},h.prototype.validateOneOf=function(e,t,r){if(void 0===t.oneOf)return null;var n,o,i=null,a=[],s=this.errors.length;this.trackUnknownProperties&&(n=this.unknownPropertyPaths,o=this.knownPropertyPaths);for(var u=0;u<t.oneOf.length;u++){this.trackUnknownProperties&&(this.unknownPropertyPaths={},this.knownPropertyPaths={});var l=t.oneOf[u],c=this.errors.length,f=this.validateAll(e,l,[],[\"oneOf\",u],r);if(null===f&&c===this.errors.length){if(null!==i)return this.errors=this.errors.slice(0,s),this.createError(v.ONE_OF_MULTIPLE,{index1:i,index2:u},\"\",\"/oneOf\",null,e,t);if(i=u,this.trackUnknownProperties){for(var p in this.knownPropertyPaths)o[p]=!0,delete n[p];for(var d in this.unknownPropertyPaths)o[d]||(n[d]=!0)}}else f&&a.push(f)}return this.trackUnknownProperties&&(this.unknownPropertyPaths=n,this.knownPropertyPaths=o),null===i?(a=a.concat(this.errors.slice(s)),this.errors=this.errors.slice(0,s),this.createError(v.ONE_OF_MISSING,{},\"\",\"/oneOf\",a,e,t)):(this.errors=this.errors.slice(0,s),null)},h.prototype.validateNot=function(e,t,r){if(void 0===t.not)return null;var n,o,i=this.errors.length;this.trackUnknownProperties&&(n=this.unknownPropertyPaths,o=this.knownPropertyPaths,this.unknownPropertyPaths={},this.knownPropertyPaths={});var a=this.validateAll(e,t.not,null,null,r),s=this.errors.slice(i);return this.errors=this.errors.slice(0,i),this.trackUnknownProperties&&(this.unknownPropertyPaths=n,this.knownPropertyPaths=o),null===a&&0===s.length?this.createError(v.NOT_PASSED,{},\"\",\"/not\",null,e,t):null},h.prototype.validateHypermedia=function(e,t,n){if(!t.links)return null;for(var o,i=0;i<t.links.length;i++){var a=t.links[i];if(\"describedby\"===a.rel){for(var s=new r(a.href),u=!0,l=0;l<s.varNames.length;l++)if(!(s.varNames[l]in e)){u=!1;break}if(u){var c=s.fillFromObject(e),f={$ref:c};if(o=this.validateAll(e,f,[],[\"links\",i],n))return o}}}};var v={INVALID_TYPE:0,ENUM_MISMATCH:1,ANY_OF_MISSING:10,ONE_OF_MISSING:11,ONE_OF_MULTIPLE:12,NOT_PASSED:13,NUMBER_MULTIPLE_OF:100,NUMBER_MINIMUM:101,NUMBER_MINIMUM_EXCLUSIVE:102,NUMBER_MAXIMUM:103,NUMBER_MAXIMUM_EXCLUSIVE:104,NUMBER_NOT_A_NUMBER:105,STRING_LENGTH_SHORT:200,STRING_LENGTH_LONG:201,STRING_PATTERN:202,OBJECT_PROPERTIES_MINIMUM:300,OBJECT_PROPERTIES_MAXIMUM:301,OBJECT_REQUIRED:302,OBJECT_ADDITIONAL_PROPERTIES:303,OBJECT_DEPENDENCY_KEY:304,ARRAY_LENGTH_SHORT:400,ARRAY_LENGTH_LONG:401,ARRAY_UNIQUE:402,ARRAY_ADDITIONAL_ITEMS:403,FORMAT_CUSTOM:500,KEYWORD_CUSTOM:501,CIRCULAR_REFERENCE:600,UNKNOWN_PROPERTY:1e3},_={};for(var b in v)_[v[b]]=b;var g={INVALID_TYPE:\"Invalid type: {type} (expected {expected})\",ENUM_MISMATCH:\"No enum match for: {value}\",ANY_OF_MISSING:'Data does not match any schemas from \"anyOf\"',ONE_OF_MISSING:'Data does not match any schemas from \"oneOf\"',ONE_OF_MULTIPLE:'Data is valid against more than one schema from \"oneOf\": indices {index1} and {index2}',NOT_PASSED:'Data matches schema from \"not\"',NUMBER_MULTIPLE_OF:\"Value {value} is not a multiple of {multipleOf}\",NUMBER_MINIMUM:\"Value {value} is less than minimum {minimum}\",NUMBER_MINIMUM_EXCLUSIVE:\"Value {value} is equal to exclusive minimum {minimum}\",NUMBER_MAXIMUM:\"Value {value} is greater than maximum {maximum}\",NUMBER_MAXIMUM_EXCLUSIVE:\"Value {value} is equal to exclusive maximum {maximum}\",NUMBER_NOT_A_NUMBER:\"Value {value} is not a valid number\",STRING_LENGTH_SHORT:\"String is too short ({length} chars), minimum {minimum}\",STRING_LENGTH_LONG:\"String is too long ({length} chars), maximum {maximum}\",STRING_PATTERN:\"String does not match pattern: {pattern}\",OBJECT_PROPERTIES_MINIMUM:\"Too few properties defined ({propertyCount}), minimum {minimum}\",OBJECT_PROPERTIES_MAXIMUM:\"Too many properties defined ({propertyCount}), maximum {maximum}\",OBJECT_REQUIRED:\"Missing required property: {key}\",OBJECT_ADDITIONAL_PROPERTIES:\"Additional properties not allowed\",OBJECT_DEPENDENCY_KEY:\"Dependency failed - key must exist: {missing} (due to key: {key})\",ARRAY_LENGTH_SHORT:\"Array is too short ({length}), minimum {minimum}\",ARRAY_LENGTH_LONG:\"Array is too long ({length}), maximum {maximum}\",ARRAY_UNIQUE:\"Array items are not unique (indices {match1} and {match2})\",ARRAY_ADDITIONAL_ITEMS:\"Additional items not allowed\",FORMAT_CUSTOM:\"Format validation failed ({message})\",KEYWORD_CUSTOM:\"Keyword failed: {key} ({message})\",CIRCULAR_REFERENCE:\"Circular $refs: {urls}\",UNKNOWN_PROPERTY:\"Unknown property (not in schema)\"};l.prototype=Object.create(Error.prototype),l.prototype.constructor=l,l.prototype.name=\"ValidationError\",l.prototype.prefixWith=function(e,t){if(null!==e&&(e=e.replace(/~/g,\"~0\").replace(/\\//g,\"~1\"),this.dataPath=\"/\"+e+this.dataPath),null!==t&&(t=t.replace(/~/g,\"~0\").replace(/\\//g,\"~1\"),this.schemaPath=\"/\"+t+this.schemaPath),null!==this.subErrors)for(var r=0;r<this.subErrors.length;r++)this.subErrors[r].prefixWith(e,t);return this};var E={},j=f();return j.addLanguage(\"en-gb\",g),j.tv4=j,j})},{}],101:[function(e,t,r){\"use strict\";function n(e){return e&&e.__esModule?e:{\"default\":e}}Object.defineProperty(r,\"__esModule\",{value:!0}),r.MessageFactory=void 0;var o=e(\"./message-factory/MessageFactory\"),i=n(o);r.MessageFactory=i[\"default\"]},{\"./message-factory/MessageFactory\":104}],102:[function(e,t,r){\"use strict\";function n(e){return e&&e.__esModule?e:{\"default\":e}}Object.defineProperty(r,\"__esModule\",{value:!0}),r.MessageType=r.Message=void 0;var o=e(\"babel-runtime/helpers/classCallCheck\"),i=n(o),a=e(\"babel-runtime/helpers/createClass\"),s=n(a),u=r.Message=function(){function e(t,r,n,o,a){(0,i[\"default\"])(this,e),this.id=t,this.from=r,this.to=n,this.type=o,this.body=a}return(0,s[\"default\"])(e,[{key:\"assertIdentity\",value:function(e,t){if(!e||!t)throw new Error(\"message, token to be removed, and assertedIdentity must be provided\");var r=this.body;return r.idToken=null,r.assertedIdentity=t,this.body=r,this}},{key:\"addIdToken\",value:function(e){if(!e)throw new Error(\"message, token to be added, must be provided\");var t=this.body;return t.idToken=e,this.body=t,this}},{key:\"addAccessToken\",value:function(e){if(!e)throw new Error(\"message, token to be added, must be provided\");var t=this.body;return t.accessToken=e,this.body=t,this}}]),e}();r.MessageType={CREATE:\"create\",READ:\"read\",UPDATE:\"update\",DELETE:\"delete\",SUBSCRIBE:\"subscribe\",\nUNSUBSCRIBE:\"unsubscribe\",RESPONSE:\"response\",FORWARD:\"forward\",EXECUTE:\"execute\"};r[\"default\"]=u},{\"babel-runtime/helpers/classCallCheck\":10,\"babel-runtime/helpers/createClass\":11}],103:[function(e,t,r){\"use strict\";function n(e){return e&&e.__esModule?e:{\"default\":e}}function o(e){var t=(0,u[\"default\"])(e).reduce(function(t,r){return t[e[r]]=r,t},{});return(0,a[\"default\"])((0,u[\"default\"])(e).reduce(function(t,r){return t[r]=e[r],t},function(e){return t[e]}))}Object.defineProperty(r,\"__esModule\",{value:!0}),r.UPDATE_OPERATION=r.ATTRIBUTE_TYPE=r.REASON_PHRASE=r.RESPONSE_CODE=r.ExecuteMessageBody=r.ResponseMessageBody=r.ForwardMessageBody=r.UpdateMessageBody=r.DeleteMessageBody=r.ReadMessageBody=r.CreateMessageBody=r.MessageBody=void 0;var i=e(\"babel-runtime/core-js/object/freeze\"),a=n(i),s=e(\"babel-runtime/core-js/object/keys\"),u=n(s),l=e(\"babel-runtime/core-js/object/get-prototype-of\"),c=n(l),f=e(\"babel-runtime/helpers/possibleConstructorReturn\"),p=n(f),d=e(\"babel-runtime/helpers/inherits\"),h=n(d),y=e(\"babel-runtime/helpers/classCallCheck\"),m=n(y),v=e(\"babel-runtime/helpers/createClass\"),_=n(v);r.Enum=o;var b=r.MessageBody=function(){function e(t,r,n,o,i){(0,m[\"default\"])(this,e),this.idToken=t,this.accessToken=r,this.resource=n,this.schema=o,this.assertedIdentity=i}return(0,_[\"default\"])(e,[{key:\"addVia\",value:function(e){if(!e)throw new Error(\"via URL to be added, must be provided\");return this.via=e,this}}]),e}(),g=(r.CreateMessageBody=function(e){function t(e,r,n,o,i,a,s){if((0,m[\"default\"])(this,t),!e)throw new Error(\"The value parameter is null\");var u=(0,p[\"default\"])(this,(0,c[\"default\"])(t).call(this,n,o,i,a,s,a,s));return u.value=e,r&&(u.policy=r),u}return(0,h[\"default\"])(t,e),t}(b),r.ReadMessageBody=function(e){function t(e,r,n,o,i,a,s,u){(0,m[\"default\"])(this,t);var l=(0,p[\"default\"])(this,(0,c[\"default\"])(t).call(this,e,r,n,o,i));return a&&(l.attribute=a),s&&(l.criteriaSyntax=s),u&&(l.criteria=u),l}return(0,h[\"default\"])(t,e),t}(b),r.DeleteMessageBody=function(e){function t(e,r,n,o,i,a){if((0,m[\"default\"])(this,t),n instanceof Array){var s=(0,p[\"default\"])(this,(0,c[\"default\"])(t).call(this,e,r,null,o,i));s.childrenResources=n}else var s=(0,p[\"default\"])(this,(0,c[\"default\"])(t).call(this,e,r,n,o,i));return a&&(s.attribute=a),(0,p[\"default\"])(s)}return(0,h[\"default\"])(t,e),t}(b),r.UpdateMessageBody=function(e){function t(e,r,n,o,i,a,s){(0,m[\"default\"])(this,t);var u=(0,p[\"default\"])(this,(0,c[\"default\"])(t).call(this,e,r,n,o,i));return u.attribute=a,u.value=s,u}return(0,h[\"default\"])(t,e),(0,_[\"default\"])(t,[{key:\"addAttributeType\",value:function(e){e&&(this.attributeType=e)}},{key:\"addOperation\",value:function(e){e&&(this.operation=e)}}]),t}(b),r.ForwardMessageBody=function(e){function t(e,r,n,o,i,a){(0,m[\"default\"])(this,t);var s=(0,p[\"default\"])(this,(0,c[\"default\"])(t).call(this,e,r,n,o,i));return s.message=a,s}return(0,h[\"default\"])(t,e),t}(b),r.ResponseMessageBody=function(e){function t(e,r,n,o,i){(0,m[\"default\"])(this,t);var a=(0,p[\"default\"])(this,(0,c[\"default\"])(t).call(this,e,r,n));return o&&(a.code=o,a.description=g[o]),i&&(a.value=i),a}return(0,h[\"default\"])(t,e),t}(b),r.ExecuteMessageBody=function(e){function t(e,r,n,o,i,a,s){(0,m[\"default\"])(this,t);var u=(0,p[\"default\"])(this,(0,c[\"default\"])(t).call(this,e,r,n,o,i));return u.method=a,s&&(s instanceof Array?u.params=s:u.params=[s]),u}return(0,h[\"default\"])(t,e),t}(b),r.RESPONSE_CODE=o({100:\"100\",101:\"101\",200:\"200\",201:\"201\",202:\"202\",203:\"203\",204:\"204\",205:\"205\",206:\"206\",300:\"300\",301:\"301\",302:\"302\",303:\"303\",304:\"304\",305:\"305\",307:\"307\",400:\"400\",401:\"401\",402:\"402\",403:\"403\",404:\"404\",405:\"405\",406:\"406\",407:\"407\",408:\"408\",409:\"409\",410:\"410\",411:\"411\",412:\"412\",413:\"413\",414:\"414\",415:\"415\",416:\"416\",417:\"417\",426:\"426\",500:\"500\",501:\"501\",502:\"502\",503:\"503\",504:\"504\",505:\"505\"}),r.REASON_PHRASE=o({100:\"Continue\",101:\"Switching Protocols\",200:\"OK\",201:\"Created\",202:\"Accepted\",203:\"Non-Authoritative Information\",204:\"No Content\",205:\"Reset Content\",206:\"Partial Content\",300:\"Multiple Choices\",301:\"Moved Permanently\",302:\"Found\",303:\"See Other\",304:\"Not Modified\",305:\"Use Proxy\",307:\"Temporary Redirect\",400:\"Bad Request\",401:\"Unauthorized\",402:\"Payment Required\",403:\"Forbidden\",404:\"Not Found\",405:\"Method Not Allowed\",406:\"Not Acceptable\",407:\"Proxy Authentication Required\",408:\"Request Timeout\",409:\"Conflict\",410:\"Gone\",411:\"Length Required\",412:\"Precondition Failed\",413:\"Payload Too Large\",414:\"Request-URI Too Long\",415:\"Unsupported Media Type\",416:\"Range Not Satisfiable\",417:\"Expectation Failed\",426:\"Upgrade Required\",500:\"Internal Server Error\",501:\"Not Implemented\",502:\"Bad Gateway\",503:\"Service Unavailable\",504:\"Gateway Time-out\",505:\"HTTP Version Not Supported\"}));r.ATTRIBUTE_TYPE=o({OBJECT:\"OBJECT\",ARRAY:\"ARRAY\"}),r.UPDATE_OPERATION=o({ADD:\"ADD\",REMOVE:\"REMOVE\"});r[\"default\"]=b},{\"babel-runtime/core-js/object/freeze\":3,\"babel-runtime/core-js/object/get-prototype-of\":5,\"babel-runtime/core-js/object/keys\":6,\"babel-runtime/helpers/classCallCheck\":10,\"babel-runtime/helpers/createClass\":11,\"babel-runtime/helpers/inherits\":13,\"babel-runtime/helpers/possibleConstructorReturn\":14}],104:[function(e,t,r){\"use strict\";function n(e){return e&&e.__esModule?e:{\"default\":e}}Object.defineProperty(r,\"__esModule\",{value:!0}),r.IdGenerator=void 0;var o=e(\"babel-runtime/regenerator\"),i=n(o),a=e(\"babel-runtime/core-js/object/get-prototype-of\"),s=n(a),u=e(\"babel-runtime/helpers/classCallCheck\"),l=n(u),c=e(\"babel-runtime/helpers/createClass\"),f=n(c),p=e(\"babel-runtime/helpers/possibleConstructorReturn\"),d=n(p),h=e(\"babel-runtime/helpers/get\"),y=n(h),m=e(\"babel-runtime/helpers/inherits\"),v=n(m),_=e(\"../reTHINKObject/RethinkObject.js\"),b=n(_),g=e(\"./Message.js\"),E=n(g),j=e(\"./MessageBody.js\"),w=function(e){function t(e,r){(0,l[\"default\"])(this,t);var n=(0,d[\"default\"])(this,(0,s[\"default\"])(t).call(this,e,r));return n.myGenerator=(new O).idMaker(),n}return(0,v[\"default\"])(t,e),(0,f[\"default\"])(t,[{key:\"validate\",value:function(e){return(0,y[\"default\"])((0,s[\"default\"])(t.prototype),\"validate\",this).call(this,e)}},{key:\"createCreateMessageRequest\",value:function(e,t,r,n){if(!e||!t||!r)throw new Error(\"from, to, and value of object to be created MUST be specified\");var o=this.myGenerator.next().value,i=new j.CreateMessageBody(r,n,null,null,null,null,null),a=new E[\"default\"](o,e,t,g.MessageType.CREATE,i);return a}},{key:\"createForwardMessageRequest\",value:function(e,t,r){if(!e||!t||!r)throw new Error(\"from, to, and message to forward MUST be specified\");var n=this.myGenerator.next().value,o=new j.ForwardMessageBody(null,null,null,null,null,r),i=new E[\"default\"](n,e,t,g.MessageType.FORWARD,o);return i}},{key:\"createDeleteMessageRequest\",value:function(e,t,r,n){if(!e||!t)throw new Error(\"from and to parameters MUST be specified\");var o=this.myGenerator.next().value,i=new j.DeleteMessageBody(null,null,r,n,null,null),a=new E[\"default\"](o,e,t,g.MessageType.DELETE,i);return a}},{key:\"createUpdateMessageRequest\",value:function(e,t,r,n,o){if(!e||!t||!r)throw new Error(\"from, and to and value MUST be specified\");var i=this.myGenerator.next().value,a=new j.UpdateMessageBody(null,null,n,null,null,o,r),s=new E[\"default\"](i,e,t,g.MessageType.UPDATE,a);return s}},{key:\"createReadMessageRequest\",value:function(e,t,r,n){if(!e||!t||!r)throw new Error(\"from, to and the resource to read from MUST be specified\");var o=this.myGenerator.next().value,i=new j.ReadMessageBody(null,null,r,null,null,n,null,null),a=new E[\"default\"](o,e,t,g.MessageType.READ,i);return a}},{key:\"createSubscribeMessageRequest\",value:function(e,t,r){if(!e||!t||!r)throw new Error(\"from, to and the resource to subscribe to MUST be specified\");var n=this.myGenerator.next().value,o=new j.MessageBody(null,null,r,null,null),i=new E[\"default\"](n,e,t,g.MessageType.SUBSCRIBE,o);return i}},{key:\"createUnsubscribeMessageRequest\",value:function(e,t,r){if(!e||!t||!r)throw new Error(\"from, to and the resource to subscribe to MUST be specified\");var n=this.myGenerator.next().value,o=new j.MessageBody(null,null,r,null,null),i=new E[\"default\"](n,e,t,g.MessageType.UNSUBSCRIBE,o);return i}},{key:\"createExecuteMessageRequest\",value:function(e,t,r,n){if(!e||!t||!r)throw new Error(\"from, to and the method to execute MUST be specified\");var o=this.myGenerator.next().value,i=new j.ExecuteMessageBody(null,null,null,null,null,r,n),a=new E[\"default\"](o,e,t,g.MessageType.EXECUTE,i);return a}},{key:\"createMessageResponse\",value:function(e,t,r,n){if(!t)throw new Error(\"response Code MUST be specified\");var o=new j.ResponseMessageBody(null,null,null,t,r,n);return new E[\"default\"](e.id,e.to,e.from,g.MessageType.RESPONSE,o)}},{key:\"generateMessageResponse\",value:function(e,t,r){if(!e||!t)throw new Error(\"message and response code MUST be specified\");var n=e.body,o=n.idToken,i=n.accessToken,a=n.resource,s=new j.ResponseMessageBody(o,i,a,t,r),u=this.myGenerator.next().value;return new E[\"default\"](u,e.to,e.from,g.MessageType.RESPONSE,s)}}]),t}(b[\"default\"]),O=r.IdGenerator=function(){function e(){(0,l[\"default\"])(this,e)}return(0,f[\"default\"])(e,[{key:\"idMaker\",value:i[\"default\"].mark(function t(){var e;return i[\"default\"].wrap(function(t){for(;;)switch(t.prev=t.next){case 0:e=1;case 1:if(!(e<1e6)){t.next=6;break}return t.next=4,e++;case 4:t.next=1;break;case 6:case\"end\":return t.stop()}},t,this)})}]),e}();r[\"default\"]=w},{\"../reTHINKObject/RethinkObject.js\":105,\"./Message.js\":102,\"./MessageBody.js\":103,\"babel-runtime/core-js/object/get-prototype-of\":5,\"babel-runtime/helpers/classCallCheck\":10,\"babel-runtime/helpers/createClass\":11,\"babel-runtime/helpers/get\":12,\"babel-runtime/helpers/inherits\":13,\"babel-runtime/helpers/possibleConstructorReturn\":14,\"babel-runtime/regenerator\":16}],105:[function(e,t,r){\"use strict\";function n(e){return e&&e.__esModule?e:{\"default\":e}}Object.defineProperty(r,\"__esModule\",{value:!0}),r.RethinkObject=void 0;var o=e(\"babel-runtime/helpers/classCallCheck\"),i=n(o),a=e(\"babel-runtime/helpers/createClass\"),s=n(a),u=e(\"tv4\"),l=n(u),c=r.RethinkObject=function(){function e(t,r){(0,i[\"default\"])(this,e);this.validation=t,this.schema=r}return(0,s[\"default\"])(e,[{key:\"validate\",value:function(e){return!!this.schema&&l[\"default\"].validate(e,this.schema)}}]),e}();r[\"default\"]=c},{\"babel-runtime/helpers/classCallCheck\":10,\"babel-runtime/helpers/createClass\":11,tv4:100}]},{},[101])(101)});\n\n\n}).call(this,require('_process'),typeof global !== \"undefined\" ? global : typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {})\n\n},{\"_process\":411}],414:[function(require,module,exports){\n(function (process,global){\n/**\n* Copyright 2016 PT Inovação e Sistemas SA\n* Copyright 2016 INESC-ID\n* Copyright 2016 QUOBIS NETWORKS SL\n* Copyright 2016 FRAUNHOFER-GESELLSCHAFT ZUR FOERDERUNG DER ANGEWANDTEN FORSCHUNG E.V\n* Copyright 2016 ORANGE SA\n* Copyright 2016 Deutsche Telekom AG\n* Copyright 2016 Apizee\n* Copyright 2016 TECHNISCHE UNIVERSITAT BERLIN\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n**/\n\n// Distribution file for PersistenceManager.js \n// version: 0.3.0\n// Last build: Wed Jun 29 2016 18:18:30 GMT+0100 (WEST)\n\n!function(t){if(\"object\"==typeof exports&&\"undefined\"!=typeof module)module.exports=t();else if(\"function\"==typeof define&&define.amd)define([],t);else{var e;e=\"undefined\"!=typeof window?window:\"undefined\"!=typeof global?global:\"undefined\"!=typeof self?self:this,e.PersistenceManager=t()}}(function(){return function t(e,n,o){function r(s,c){if(!n[s]){if(!e[s]){var a=\"function\"==typeof require&&require;if(!c&&a)return a(s,!0);if(i)return i(s,!0);var u=new Error(\"Cannot find module '\"+s+\"'\");throw u.code=\"MODULE_NOT_FOUND\",u}var f=n[s]={exports:{}};e[s][0].call(f.exports,function(t){var n=e[s][1][t];return r(n?n:t)},f,f.exports,t,e,n,o)}return n[s].exports}for(var i=\"function\"==typeof require&&require,s=0;s<o.length;s++)r(o[s]);return r}({1:[function(t,e,n){e.exports={\"default\":t(\"core-js/library/fn/json/stringify\"),__esModule:!0}},{\"core-js/library/fn/json/stringify\":2}],2:[function(t,e,n){var o=t(\"../../modules/_core\"),r=o.JSON||(o.JSON={stringify:JSON.stringify});e.exports=function(t){return r.stringify.apply(r,arguments)}},{\"../../modules/_core\":3}],3:[function(t,e,n){var o=e.exports={version:\"2.4.0\"};\"number\"==typeof __e&&(__e=o)},{}],4:[function(t,e,n){\"use strict\";function o(t){if(null===t||\"object\"!=typeof t)return t;if(t instanceof Object)var e={__proto__:t.__proto__};else var e=Object.create(null);return Object.getOwnPropertyNames(t).forEach(function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}),e}var r=t(\"fs\");e.exports=o(r)},{fs:void 0}],5:[function(t,e,n){function o(){}function r(t){function e(t,e,n){function o(t,e,n){return v(t,e,function(r){!r||\"EMFILE\"!==r.code&&\"ENFILE\"!==r.code?(\"function\"==typeof n&&n.apply(this,arguments),s()):i([o,[t,e,n]])})}return\"function\"==typeof e&&(n=e,e=null),o(t,e,n)}function n(t,e,n,o){function r(t,e,n,o){return g(t,e,n,function(c){!c||\"EMFILE\"!==c.code&&\"ENFILE\"!==c.code?(\"function\"==typeof o&&o.apply(this,arguments),s()):i([r,[t,e,n,o]])})}return\"function\"==typeof n&&(o=n,n=null),r(t,e,n,o)}function o(t,e,n,o){function r(t,e,n,o){return _(t,e,n,function(c){!c||\"EMFILE\"!==c.code&&\"ENFILE\"!==c.code?(\"function\"==typeof o&&o.apply(this,arguments),s()):i([r,[t,e,n,o]])})}return\"function\"==typeof n&&(o=n,n=null),r(t,e,n,o)}function c(t,e){function n(){return w(t,function(o,r){r&&r.sort&&r.sort(),!o||\"EMFILE\"!==o.code&&\"ENFILE\"!==o.code?(\"function\"==typeof e&&e.apply(this,arguments),s()):i([n,[t,e]])})}return n(t,e)}function f(t,e){return this instanceof f?(E.apply(this,arguments),this):f.apply(Object.create(f.prototype),arguments)}function l(){var t=this;m(t.path,t.flags,t.mode,function(e,n){e?(t.autoClose&&t.destroy(),t.emit(\"error\",e)):(t.fd=n,t.emit(\"open\",n),t.read())})}function h(t,e){return this instanceof h?(b.apply(this,arguments),this):h.apply(Object.create(h.prototype),arguments)}function p(){var t=this;m(t.path,t.flags,t.mode,function(e,n){e?(t.destroy(),t.emit(\"error\",e)):(t.fd=n,t.emit(\"open\",n))})}function d(t,e){return new f(t,e)}function y(t,e){return new h(t,e)}function m(t,e,n,o){function r(t,e,n,o){return I(t,e,n,function(c,a){!c||\"EMFILE\"!==c.code&&\"ENFILE\"!==c.code?(\"function\"==typeof o&&o.apply(this,arguments),s()):i([r,[t,e,n,o]])})}return\"function\"==typeof n&&(o=n,n=null),r(t,e,n,o)}a(t),t.gracefulify=r,t.FileReadStream=f,t.FileWriteStream=h,t.createReadStream=d,t.createWriteStream=y;var v=t.readFile;t.readFile=e;var g=t.writeFile;t.writeFile=n;var _=t.appendFile;_&&(t.appendFile=o);var w=t.readdir;if(t.readdir=c,\"v0.8\"===process.version.substr(0,4)){var S=u(t);f=S.ReadStream,h=S.WriteStream}var E=t.ReadStream;f.prototype=Object.create(E.prototype),f.prototype.open=l;var b=t.WriteStream;h.prototype=Object.create(b.prototype),h.prototype.open=p,t.ReadStream=f,t.WriteStream=h;var I=t.open;return t.open=m,t}function i(t){h(\"ENQUEUE\",t[0].name,t[1]),f.push(t)}function s(){var t=f.shift();t&&(h(\"RETRY\",t[0].name,t[1]),t[0].apply(null,t[1]))}var c=t(\"fs\"),a=t(\"./polyfills.js\"),u=t(\"./legacy-streams.js\"),f=[],l=t(\"util\"),h=o;l.debuglog?h=l.debuglog(\"gfs4\"):/\\bgfs4\\b/i.test(process.env.NODE_DEBUG||\"\")&&(h=function(){var t=l.format.apply(l,arguments);t=\"GFS4: \"+t.split(/\\n/).join(\"\\nGFS4: \"),console.error(t)}),/\\bgfs4\\b/i.test(process.env.NODE_DEBUG||\"\")&&process.on(\"exit\",function(){h(f),t(\"assert\").equal(f.length,0)}),e.exports=r(t(\"./fs.js\")),process.env.TEST_GRACEFUL_FS_GLOBAL_PATCH&&(e.exports=r(c)),e.exports.close=c.close=function(t){return function(e,n){return t.call(c,e,function(t){t||s(),\"function\"==typeof n&&n.apply(this,arguments)})}}(c.close),e.exports.closeSync=c.closeSync=function(t){return function(e){var n=t.apply(c,arguments);return s(),n}}(c.closeSync)},{\"./fs.js\":4,\"./legacy-streams.js\":6,\"./polyfills.js\":7,assert:void 0,fs:void 0,util:void 0}],6:[function(t,e,n){function o(t){function e(n,o){if(!(this instanceof e))return new e(n,o);r.call(this);var i=this;this.path=n,this.fd=null,this.readable=!0,this.paused=!1,this.flags=\"r\",this.mode=438,this.bufferSize=65536,o=o||{};for(var s=Object.keys(o),c=0,a=s.length;c<a;c++){var u=s[c];this[u]=o[u]}if(this.encoding&&this.setEncoding(this.encoding),void 0!==this.start){if(\"number\"!=typeof this.start)throw TypeError(\"start must be a Number\");if(void 0===this.end)this.end=1/0;else if(\"number\"!=typeof this.end)throw TypeError(\"end must be a Number\");if(this.start>this.end)throw new Error(\"start must be <= end\");this.pos=this.start}return null!==this.fd?void process.nextTick(function(){i._read()}):void t.open(this.path,this.flags,this.mode,function(t,e){return t?(i.emit(\"error\",t),void(i.readable=!1)):(i.fd=e,i.emit(\"open\",e),void i._read())})}function n(e,o){if(!(this instanceof n))return new n(e,o);r.call(this),this.path=e,this.fd=null,this.writable=!0,this.flags=\"w\",this.encoding=\"binary\",this.mode=438,this.bytesWritten=0,o=o||{};for(var i=Object.keys(o),s=0,c=i.length;s<c;s++){var a=i[s];this[a]=o[a]}if(void 0!==this.start){if(\"number\"!=typeof this.start)throw TypeError(\"start must be a Number\");if(this.start<0)throw new Error(\"start must be >= zero\");this.pos=this.start}this.busy=!1,this._queue=[],null===this.fd&&(this._open=t.open,this._queue.push([this._open,this.path,this.flags,this.mode,void 0]),this.flush())}return{ReadStream:e,WriteStream:n}}var r=t(\"stream\").Stream;e.exports=o},{stream:void 0}],7:[function(t,e,n){function o(t){f.hasOwnProperty(\"O_SYMLINK\")&&process.version.match(/^v0\\.6\\.[0-2]|^v0\\.5\\./)&&r(t),t.lutimes||i(t),t.chown=s(t.chown),t.fchown=s(t.fchown),t.lchown=s(t.lchown),t.chmod=s(t.chmod),t.fchmod=s(t.fchmod),t.lchmod=s(t.lchmod),t.chownSync=c(t.chownSync),t.fchownSync=c(t.fchownSync),t.lchownSync=c(t.lchownSync),t.chmodSync=s(t.chmodSync),t.fchmodSync=s(t.fchmodSync),t.lchmodSync=s(t.lchmodSync),t.lchmod||(t.lchmod=function(t,e,n){process.nextTick(n)},t.lchmodSync=function(){}),t.lchown||(t.lchown=function(t,e,n,o){process.nextTick(o)},t.lchownSync=function(){}),\"win32\"===process.platform&&(t.rename=function(t){return function(e,n,o){var r=Date.now();t(e,n,function i(s){return s&&(\"EACCES\"===s.code||\"EPERM\"===s.code)&&Date.now()-r<1e3?t(e,n,i):void(o&&o(s))})}}(t.rename)),t.read=function(e){return function(n,o,r,i,s,c){var a;if(c&&\"function\"==typeof c){var u=0;a=function(f,l,h){return f&&\"EAGAIN\"===f.code&&u<10?(u++,e.call(t,n,o,r,i,s,a)):void c.apply(this,arguments)}}return e.call(t,n,o,r,i,s,a)}}(t.read),t.readSync=function(e){return function(n,o,r,i,s){for(var c=0;;)try{return e.call(t,n,o,r,i,s)}catch(a){if(\"EAGAIN\"===a.code&&c<10){c++;continue}throw a}}}(t.readSync)}function r(t){t.lchmod=function(e,n,o){o=o||noop,t.open(e,f.O_WRONLY|f.O_SYMLINK,n,function(e,r){return e?void o(e):void t.fchmod(r,n,function(e){t.close(r,function(t){o(e||t)})})})},t.lchmodSync=function(e,n){var o,r=t.openSync(e,f.O_WRONLY|f.O_SYMLINK,n),i=!0;try{o=t.fchmodSync(r,n),i=!1}finally{if(i)try{t.closeSync(r)}catch(s){}else t.closeSync(r)}return o}}function i(t){f.hasOwnProperty(\"O_SYMLINK\")?(t.lutimes=function(e,n,o,r){t.open(e,f.O_SYMLINK,function(e,i){return r=r||noop,e?r(e):void t.futimes(i,n,o,function(e){t.close(i,function(t){return r(e||t)})})})},t.lutimesSync=function(e,n,o){var r,i=t.openSync(e,f.O_SYMLINK),s=!0;try{r=t.futimesSync(i,n,o),s=!1}finally{if(s)try{t.closeSync(i)}catch(c){}else t.closeSync(i)}return r}):(t.lutimes=function(t,e,n,o){process.nextTick(o)},t.lutimesSync=function(){})}function s(t){return t?function(e,n,o,r){return t.call(u,e,n,o,function(t,e){a(t)&&(t=null),r(t,e)})}:t}function c(t){return t?function(e,n,o){try{return t.call(u,e,n,o)}catch(r){if(!a(r))throw r}}:t}function a(t){if(!t)return!0;if(\"ENOSYS\"===t.code)return!0;var e=!process.getuid||0!==process.getuid();return!(!e||\"EINVAL\"!==t.code&&\"EPERM\"!==t.code)}var u=t(\"./fs.js\"),f=t(\"constants\"),l=process.cwd,h=null;process.cwd=function(){return h||(h=l.call(process)),h};try{process.cwd()}catch(p){}var d=process.chdir;process.chdir=function(t){h=null,d.call(process,t)},e.exports=o},{\"./fs.js\":4,constants:void 0}],8:[function(t,e,n){!function(){function t(e,o){var r=this instanceof t?this:n;if(r.reset(o),\"string\"==typeof e&&e.length>0&&r.hash(e),r!==this)return r}var n;t.prototype.hash=function(t){var e,n,o,r,i;switch(i=t.length,this.len+=i,n=this.k1,o=0,this.rem){case 0:n^=i>o?65535&t.charCodeAt(o++):0;case 1:n^=i>o?(65535&t.charCodeAt(o++))<<8:0;case 2:n^=i>o?(65535&t.charCodeAt(o++))<<16:0;case 3:n^=i>o?(255&t.charCodeAt(o))<<24:0,n^=i>o?(65280&t.charCodeAt(o++))>>8:0}if(this.rem=i+this.rem&3,i-=this.rem,i>0){for(e=this.h1;;){if(n=11601*n+3432906752*(65535&n)&4294967295,n=n<<15|n>>>17,n=13715*n+461832192*(65535&n)&4294967295,e^=n,e=e<<13|e>>>19,e=5*e+3864292196&4294967295,o>=i)break;n=65535&t.charCodeAt(o++)^(65535&t.charCodeAt(o++))<<8^(65535&t.charCodeAt(o++))<<16,r=t.charCodeAt(o++),n^=(255&r)<<24^(65280&r)>>8}switch(n=0,this.rem){case 3:n^=(65535&t.charCodeAt(o+2))<<16;case 2:n^=(65535&t.charCodeAt(o+1))<<8;case 1:n^=65535&t.charCodeAt(o)}this.h1=e}return this.k1=n,this},t.prototype.result=function(){var t,e;return t=this.k1,e=this.h1,t>0&&(t=11601*t+3432906752*(65535&t)&4294967295,t=t<<15|t>>>17,t=13715*t+461832192*(65535&t)&4294967295,e^=t),e^=this.len,e^=e>>>16,e=51819*e+2246770688*(65535&e)&4294967295,e^=e>>>13,e=44597*e+3266445312*(65535&e)&4294967295,e^=e>>>16,e>>>0},t.prototype.reset=function(t){return this.h1=\"number\"==typeof t?t:0,this.rem=this.k1=this.len=0,this},n=new t,\"undefined\"!=typeof e?e.exports=t:this.MurmurHash3=t}()},{}],9:[function(t,e,n){(function(){var e,o,r,i,s,c,a,u,f,l,h,p,d,y,m=function(t,e){function n(){this.constructor=t}for(var o in e)v.call(e,o)&&(t[o]=e[o]);return n.prototype=e.prototype,t.prototype=new n,t.__super__=e.prototype,t},v={}.hasOwnProperty;d=t(\"path\"),p=t(\"fs\"),h=t(\"events\"),y=t(\"write-file-atomic\").sync,o=\"---.EMPTY_STRING.---\",a=function(t){var e,n,o,r,i;for(r=p.readdirSync(t),i=[],e=0,n=r.length;e<n;e++)o=r[e],i.push(f(d.join(t,o)));return i},f=function(t){return p.statSync(t).isDirectory()?(a(t),p.rmdirSync(t)):p.unlinkSync(t)},u=function(t){var e;return e=\"\"===t?o:t.toString()},s=function(t){function e(t){this.message=null!=t?t:\"Unknown error.\",null!=Error.captureStackTrace&&Error.captureStackTrace(this,this.constructor),this.name=this.constructor.name}return m(e,t),e.prototype.toString=function(){return this.name+\": \"+this.message},e}(Error),c=function(){function t(t,e,n,o,r){this.key=t,this.oldValue=e,this.newValue=n,this.url=o,this.storageArea=null!=r?r:\"localStorage\"}return t}(),i=function(){function t(e,n){if(this.key=e,this.index=n,!(this instanceof t))return new t(this.key,this.index)}return t}(),l=function(){var t;return t=function(){},t.prototype=Object.create(null),new t},r=function(t){function e(t,o){return this._location=t,this.quota=null!=o?o:5242880,this instanceof e?(this._location=d.resolve(this._location),null!=n[this._location]?n[this._location]:(this.length=0,this._bytesInUse=0,this._keys=[],this._metaKeyMap=l(),this._eventUrl=\"pid:\"+process.pid,this._init(),this._QUOTA_EXCEEDED_ERR=s,n[this._location]=this,n[this._location])):new e(this._location,this.quota)}var n;return m(e,t),n={},e.prototype._init=function(){var t,e,n,o,r,s,c,a;try{if(a=p.statSync(this._location),null!=a&&!a.isDirectory())throw new Error(\"A file exists at the location '\"+this._location+\"' when trying to create/open localStorage\");for(this._bytesInUse=0,this.length=0,n=p.readdirSync(this._location),r=o=0,c=n.length;o<c;r=++o)s=n[r],e=decodeURIComponent(s),this._keys.push(e),t=new i(s,r),this._metaKeyMap[e]=t,a=this._getStat(s),null!=(null!=a?a.size:void 0)&&(t.size=a.size,this._bytesInUse+=a.size);this.length=n.length}catch(u){p.mkdirSync(this._location)}},e.prototype.setItem=function(t,e){var n,o,r,a,f,l,p,m,v,g;if(f=h.EventEmitter.listenerCount(this,\"storage\"),m=null,f&&(m=this.getItem(t)),t=u(t),n=encodeURIComponent(t),a=d.join(this._location,n),v=e.toString(),g=v.length,l=this._metaKeyMap[t],r=!!l,p=r?l.size:0,this._bytesInUse-p+g>this.quota)throw new s;if(y(a,v,\"utf8\"),r||(l=new i(n,this._keys.push(t)-1),l.size=g,this._metaKeyMap[t]=l,this.length+=1,this._bytesInUse+=g),f)return o=new c(t,m,e,this._eventUrl),this.emit(\"storage\",o)},e.prototype.getItem=function(t){var e,n;return t=u(t),n=this._metaKeyMap[t],n?(e=d.join(this._location,n.key),p.readFileSync(e,\"utf8\")):null},e.prototype._getStat=function(t){var e;t=u(t),e=d.join(this._location,encodeURIComponent(t));try{return p.statSync(e)}catch(n){return null}},e.prototype.removeItem=function(t){var e,n,o,r,i,s,a,l,p;if(t=u(t),s=this._metaKeyMap[t]){o=h.EventEmitter.listenerCount(this,\"storage\"),a=null,o&&(a=this.getItem(t)),delete this._metaKeyMap[t],this.length-=1,this._bytesInUse-=s.size,n=d.join(this._location,s.key),this._keys.splice(s.index,1),l=this._metaKeyMap;for(r in l)p=l[r],i=this._metaKeyMap[r],i.index>s.index&&(i.index-=1);if(f(n),o)return e=new c(t,a,null,this._eventUrl),this.emit(\"storage\",e)}},e.prototype.key=function(t){return this._keys[t]},e.prototype.clear=function(){var t;if(a(this._location),this._metaKeyMap=l(),this._keys=[],this.length=0,this._bytesInUse=0,h.EventEmitter.listenerCount(this,\"storage\"))return t=new c(null,null,null,this._eventUrl),this.emit(\"storage\",t)},e.prototype._getBytesInUse=function(){return this._bytesInUse},e.prototype._deleteLocation=function(){return delete n[this._location],f(this._location),this._metaKeyMap={},this._keys=[],this.length=0,this._bytesInUse=0},e}(h.EventEmitter),e=function(t){function e(){return e.__super__.constructor.apply(this,arguments)}return m(e,t),e.prototype.setItem=function(t,n){var o;return o=JSON.stringify(n),e.__super__.setItem.call(this,t,o)},e.prototype.getItem=function(t){return JSON.parse(e.__super__.getItem.call(this,t))},e}(r),n.LocalStorage=r,n.JSONStorage=e,n.QUOTA_EXCEEDED_ERR=s}).call(this)},{events:void 0,fs:void 0,path:void 0,\"write-file-atomic\":14}],10:[function(t,e,n){function o(){function t(u){u&&!s&&(s=u);for(var f=arguments.length,l=1;l<f;l++)void 0!==arguments[l]&&(i[l-1]=(i[l-1]||[]).concat(arguments[l]));if(n.length>c){var h=n.slice(c);a+=(n.length-c)*r,c=n.length,process.nextTick(function(){h.forEach(function(n){e.forEach(function(e){e(n,t)})})})}0===--a&&o.apply(null,[s].concat(i))}var e=Array.prototype.slice.call(arguments),n=e.shift()||[],o=e.pop();if(\"function\"!=typeof o)throw new Error(\"No callback provided to asyncMap\");if(!n)return o(null,[]);Array.isArray(n)||(n=[n]);var r=e.length,i=[],s=null,c=n.length,a=c*r;return a?void n.forEach(function(n){e.forEach(function(e){e(n,t)})}):o(null,[])}e.exports=o},{}],11:[function(t,e,n){function o(){var t,e=Array.prototype.slice.call(arguments),n=null;return\"object\"==typeof e[0]?(n=e.shift(),t=e.shift(),\"string\"==typeof t&&(t=n[t])):t=e.shift(),function(o){t.apply(n,e.concat(o))}}e.exports=o},{}],12:[function(t,e,n){function o(t,e){var n=[];!function i(s,c){return s>=c?e(null,n):(Array.isArray(t[s])&&(t[s]=r.apply(null,t[s].map(function(t){return t===o.first?n[0]:t===o.last?n[n.length-1]:t}))),t[s]?void t[s](function(t,o){return t?e(t,n):(void 0!==o&&(n=n.concat(o)),void i(s+1,c))}):i(s+1,c))}(0,t.length)}e.exports=o;var r=t(\"./bind-actor.js\");o.first={},o.last={}},{\"./bind-actor.js\":11}],13:[function(t,e,n){n.asyncMap=t(\"./async-map\"),n.bindActor=t(\"./bind-actor\"),n.chain=t(\"./chain\")},{\"./async-map\":10,\"./bind-actor\":11,\"./chain\":12}],14:[function(t,e,n){(function(n){\"use strict\";function o(){for(var t=new s,e=0;e<arguments.length;++e)t.hash(\"\"+arguments[e]);return t.result()}var r=t(\"graceful-fs\"),i=t(\"slide\").chain,s=t(\"imurmurhash\"),c=0,a=function(t){return t+\".\"+o(n,process.pid,++c)};e.exports=function(t,e,n,o){n instanceof Function&&(o=n,n=null),n||(n={});var s=a(t);i([[r,r.writeFile,s,e,n],n.chown&&[r,r.chown,s,n.chown.uid,n.chown.gid],[r,r.rename,s,t]],function(t){t?r.unlink(s,function(){o(t)}):o()})},e.exports.sync=function(t,e,n){n||(n={});var o=a(t);try{r.writeFileSync(o,e,n),n.chown&&r.chownSync(o,n.chown.uid,n.chown.gid),r.renameSync(o,t)}catch(i){try{r.unlinkSync(o)}catch(s){}throw i}}}).call(this,\"/home/vsilva/pt-inovacao/rethink-project/dev-service-framework/node_modules/write-file-atomic/index.js\")},{\"graceful-fs\":5,imurmurhash:8,slide:13}],15:[function(t,e,n){\"use strict\";function o(t){return t&&t.__esModule?t:{\"default\":t}}Object.defineProperty(n,\"__esModule\",{value:!0});var r=t(\"babel-runtime/core-js/json/stringify\"),i=o(r),s=t(\"./universal-localstorage\"),c=o(s),a={set:function(t,e,n){c[\"default\"].setItem(t,(0,i[\"default\"])({version:e,value:n}))},get:function(t){try{return JSON.parse(c[\"default\"].getItem(t)).value}catch(e){}},getVersion:function(t){try{return JSON.parse(c[\"default\"].getItem(t)).version}catch(e){}},\"delete\":function(t){c[\"default\"].removeItem(t)}};n[\"default\"]=a,e.exports=n[\"default\"]},{\"./universal-localstorage\":17,\"babel-runtime/core-js/json/stringify\":1}],16:[function(t,e,n){\"use strict\";function o(t){return t&&t.__esModule?t:{\"default\":t}}var r=t(\"babel-runtime/core-js/json/stringify\"),i=o(r);\"undefined\"!=typeof window.localStorage&&\"undefined\"!=typeof window.sessionStorage||function(){var t=function(t){function e(t,e,n){var o,r;n?(o=new Date,o.setTime(o.getTime()+24*n*60*60*1e3),r=\"; expires=\"+o.toGMTString()):r=\"\",document.cookie=t+\"=\"+e+r+\"; path=/\"}function n(t){var e,n,o=t+\"=\",r=document.cookie.split(\";\");for(e=0;e<r.length;e++){for(n=r[e];\" \"==n.charAt(0);)n=n.substring(1,n.length);if(0==n.indexOf(o))return n.substring(o.length,n.length)}return null}function o(n){n=(0,i[\"default\"])(n),\"session\"==t?window.name=n:e(\"localStorage\",n,365)}function r(){\"session\"==t?window.name=\"\":e(\"localStorage\",\"\",365)}function s(){var e=\"session\"==t?window.name:n(\"localStorage\");return e?JSON.parse(e):{}}var c=s();return{length:0,clear:function(){c={},this.length=0,r()},getItem:function(t){return void 0===c[t]?null:c[t]},key:function(t){var e=0;for(var n in c){if(e==t)return n;e++}return null},removeItem:function(t){delete c[t],this.length--,o(c)},setItem:function(t,e){c[t]=e+\"\",this.length++,o(c)}}};\"undefined\"==typeof window.localStorage&&(window.localStorage=new t(\"local\")),\"undefined\"==typeof window.sessionStorage&&(window.sessionStorage=new t(\"session\"))}()},{\"babel-runtime/core-js/json/stringify\":1}],17:[function(t,e,n){\"use strict\";Object.defineProperty(n,\"__esModule\",{value:!0});var o=void 0;if(\"undefined\"==typeof window){var r=t(\"node-localstorage\").LocalStorage;o=new r(\"./uls-scratch\")}else o=\"undefined\"==typeof window.localStorage||\"undefined\"==typeof window.sessionStorage?t(\"./rem-localstorage\"):window.localStorage;n[\"default\"]=o,e.exports=n[\"default\"]},{\"./rem-localstorage\":16,\"node-localstorage\":9}]},{},[15])(15)});\n\n\n}).call(this,require('_process'),typeof global !== \"undefined\" ? global : typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {})\n\n},{\"_process\":411}],415:[function(require,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _createClass2 = require('babel-runtime/helpers/createClass');\n\nvar _createClass3 = _interopRequireDefault(_createClass2);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n* Copyright 2016 PT Inovação e Sistemas SA\n* Copyright 2016 INESC-ID\n* Copyright 2016 QUOBIS NETWORKS SL\n* Copyright 2016 FRAUNHOFER-GESELLSCHAFT ZUR FOERDERUNG DER ANGEWANDTEN FORSCHUNG E.V\n* Copyright 2016 ORANGE SA\n* Copyright 2016 Deutsche Telekom AG\n* Copyright 2016 Apizee\n* Copyright 2016 TECHNISCHE UNIVERSITAT BERLIN\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n**/\n\n/**\n* @author micaelpedrosa@gmail.com\n* Minimal interface and implementation to send and receive messages. It can be reused in many type of components.\n* Components that need a message system should receive this class as a dependency or extend it.\n* Extensions should implement the following private methods: _onPostMessage and _registerExternalListener\n*/\n\nvar Bus = function () {\n  /* private\n  _msgId: number;\n  _subscriptions: <url: MsgListener[]>\n   _responseTimeOut: number\n  _responseCallbacks: <url+id: (msg) => void>\n   */\n\n  function Bus() {\n    (0, _classCallCheck3.default)(this, Bus);\n\n    var _this = this;\n    _this._msgId = 0;\n    _this._subscriptions = {};\n\n    _this._responseTimeOut = 5000; //default to 3s\n    _this._responseCallbacks = {};\n\n    _this._registerExternalListener();\n  }\n\n  /**\n  * Register listener to receive message when \"msg.to === url\".\n  * Special url \"*\" for default listener is accepted to intercept all messages.\n  * @param {URL} url Address to intercept, tha is in the message \"to\"\n  * @param {Listener} listener listener\n  * @return {MsgListener} instance of MsgListener\n  */\n\n\n  (0, _createClass3.default)(Bus, [{\n    key: 'addListener',\n    value: function addListener(url, listener) {\n      var _this = this;\n\n      var item = new MsgListener(_this._subscriptions, url, listener);\n      var itemList = _this._subscriptions[url];\n      if (!itemList) {\n        itemList = [];\n        _this._subscriptions[url] = itemList;\n      }\n\n      itemList.push(item);\n      return item;\n    }\n\n    /**\n     * Manually add a response listener. Only one listener per message ID should exist.\n     * ATENTION, there is no timeout for this listener.\n     * The listener should be removed with a removeResponseListener, failing to do this will result in a unreleased memory problem.\n     * @param {URL} url Origin address of the message sent, \"msg.from\".\n     * @param {number} msgId Message ID that is returned from the postMessage.\n     * @param {Function} responseListener Callback function for the response\n     */\n\n  }, {\n    key: 'addResponseListener',\n    value: function addResponseListener(url, msgId, responseListener) {\n      this._responseCallbacks[url + msgId] = responseListener;\n    }\n\n    /**\n     * Remove the response listener.\n     * @param {URL} url Origin address of the message sent, \"msg.from\".\n     * @param {number} msgId  Message ID that is returned from the postMessage\n     */\n\n  }, {\n    key: 'removeResponseListener',\n    value: function removeResponseListener(url, msgId) {\n      delete this._responseCallbacks[url + msgId];\n    }\n\n    /**\n     * Remove all existent listeners for the URL\n     * @param  {URL} url Address registered\n     */\n\n  }, {\n    key: 'removeAllListenersOf',\n    value: function removeAllListenersOf(url) {\n      delete this._subscriptions[url];\n    }\n\n    /**\n     * Helper method to bind listeners (in both directions) into other MiniBus target.\n     * @param  {URL} outUrl Outbound URL, register listener for url in direction \"this -> target\"\n     * @param  {URL} inUrl Inbound URL, register listener for url in direction \"target -> this\"\n     * @param  {MiniBus} target The other target MiniBus\n     * @return {Bound} an object that contains the properties [thisListener, targetListener] and the unbind method.\n     */\n\n  }, {\n    key: 'bind',\n    value: function bind(outUrl, inUrl, target) {\n      var _this2 = this;\n\n      var _this = this;\n\n      var thisListn = _this.addListener(outUrl, function (msg) {\n        target.postMessage(msg);\n      });\n\n      var targetListn = target.addListener(inUrl, function (msg) {\n        _this.postMessage(msg);\n      });\n\n      return {\n        thisListener: thisListn,\n        targetListener: targetListn,\n        unbind: function unbind() {\n          _this2.thisListener.remove();\n          _this2.targetListener.remove();\n        }\n      };\n    }\n\n    //publish on default listeners\n\n  }, {\n    key: '_publishOnDefault',\n    value: function _publishOnDefault(msg) {\n      //is there any \"*\" (default) listeners?\n      var itemList = this._subscriptions['*'];\n      if (itemList) {\n        this._publishOn(itemList, msg);\n      }\n    }\n\n    //publish on a subscription list.\n\n  }, {\n    key: '_publishOn',\n    value: function _publishOn(itemList, msg) {\n      itemList.forEach(function (sub) {\n        sub._callback(msg);\n      });\n    }\n  }, {\n    key: '_responseCallback',\n    value: function _responseCallback(inMsg, responseCallback) {\n      var _this = this;\n\n      //automatic management of response handlers\n      if (responseCallback) {\n        (function () {\n          var responseId = inMsg.from + inMsg.id;\n          _this._responseCallbacks[responseId] = responseCallback;\n\n          setTimeout(function () {\n            var responseFun = _this._responseCallbacks[responseId];\n            delete _this._responseCallbacks[responseId];\n\n            if (responseFun) {\n              var errorMsg = {\n                id: inMsg.id, type: 'response',\n                body: { code: 408, desc: 'Response timeout!', value: inMsg }\n              };\n\n              responseFun(errorMsg);\n            }\n          }, _this._responseTimeOut);\n        })();\n      }\n    }\n  }, {\n    key: '_onResponse',\n    value: function _onResponse(msg) {\n      var _this = this;\n\n      if (msg.type === 'response') {\n        var responseId = msg.to + msg.id;\n        var responseFun = _this._responseCallbacks[responseId];\n\n        //if it's a provisional response, don't delete response listener\n        if (msg.body.code >= 200) {\n          delete _this._responseCallbacks[responseId];\n        }\n\n        if (responseFun) {\n          responseFun(msg);\n          return true;\n        }\n      }\n\n      return false;\n    }\n\n    //receive messages from external interface\n\n  }, {\n    key: '_onMessage',\n    value: function _onMessage(msg) {\n      var _this = this;\n\n      if (!_this._onResponse(msg)) {\n        var itemList = _this._subscriptions[msg.to];\n        if (itemList) {\n          _this._publishOn(itemList, msg);\n        } else {\n          _this._publishOnDefault(msg);\n        }\n      }\n    }\n  }, {\n    key: '_genId',\n    value: function _genId(inMsg) {\n      //TODO: how do we manage message ID's? Should it be a global runtime counter, or per URL address?\n      //Global counter will not work, because there will be multiple MiniBus instances!\n      //Per URL, can be a lot of data to maintain!\n      //Maybe a counter per MiniBus instance. This is the assumed solution for now.\n      if (!inMsg.id || inMsg.id === 0) {\n        this._msgId++;\n        inMsg.id = this._msgId;\n      }\n    }\n\n    /**\n    * Send messages to local listeners, or if not exists to external listeners.\n    * It's has an optional mechanism for automatic management of response handlers.\n    * The response handler will be unregistered after receiving the response, or after response timeout (default to 3s).\n    * @param  {Message} msg Message to send. Message ID is automatically added to the message.\n    * @param  {Function} responseCallback Optional parameter, if the developer what's automatic response management.\n    * @return {number} Returns the message ID, in case it should be needed for manual management of the response handler.\n    */\n\n  }, {\n    key: 'postMessage',\n    value: function postMessage(inMsg, responseCallback) {}\n\n    /**\n     * Not public available, used by the class extension implementation, to process messages from the public \"postMessage\" without a registered listener.\n     * Used to send the message to an external interface, like a WebWorker, IFrame, etc.\n     * @param  {Message.Message} msg Message\n     */\n\n  }, {\n    key: '_onPostMessage',\n    value: function _onPostMessage(msg) {} /*implementation will send message to external system*/\n\n    /**\n     * Not public available, used by the class extension implementation, to process all messages that enter the MiniBus from an external interface, like a WebWorker, IFrame, etc.\n     * This method is called one time in the constructor to register external listeners.\n     * The implementation will probably call the \"_onMessage\" method to publish in the local listeners.\n     * DO NOT call \"postMessage\", there is a danger that the message enters in a cycle!\n     */\n\n  }, {\n    key: '_registerExternalListener',\n    value: function _registerExternalListener() {/*implementation will register external listener and call \"this._onMessage(msg)\" */}\n  }]);\n  return Bus;\n}();\n\nvar MsgListener = function () {\n  /* private\n  _subscriptions: <string: MsgListener[]>;\n  _url: string;\n  _callback: (msg) => void;\n  */\n\n  function MsgListener(subscriptions, url, callback) {\n    (0, _classCallCheck3.default)(this, MsgListener);\n\n    var _this = this;\n\n    _this._subscriptions = subscriptions;\n    _this._url = url;\n    _this._callback = callback;\n  }\n\n  (0, _createClass3.default)(MsgListener, [{\n    key: 'remove',\n\n\n    /**\n     * Remove this listener from the Bus\n     */\n    value: function remove() {\n      var _this = this;\n\n      var subs = _this._subscriptions[_this._url];\n      if (subs) {\n        var index = subs.indexOf(_this);\n        subs.splice(index, 1);\n\n        //if there are no listeners, remove the subscription entirely.\n        if (subs.length === 0) {\n          delete _this._subscriptions[_this._url];\n        }\n      }\n    }\n  }, {\n    key: 'url',\n    get: function get() {\n      return this._url;\n    }\n  }]);\n  return MsgListener;\n}();\n\nexports.default = Bus;\nmodule.exports = exports['default'];\n\n},{\"babel-runtime/helpers/classCallCheck\":13,\"babel-runtime/helpers/createClass\":14}],416:[function(require,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _stringify = require('babel-runtime/core-js/json/stringify');\n\nvar _stringify2 = _interopRequireDefault(_stringify);\n\nvar _getPrototypeOf = require('babel-runtime/core-js/object/get-prototype-of');\n\nvar _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);\n\nvar _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _createClass2 = require('babel-runtime/helpers/createClass');\n\nvar _createClass3 = _interopRequireDefault(_createClass2);\n\nvar _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');\n\nvar _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);\n\nvar _inherits2 = require('babel-runtime/helpers/inherits');\n\nvar _inherits3 = _interopRequireDefault(_inherits2);\n\nvar _Bus2 = require('./Bus');\n\nvar _Bus3 = _interopRequireDefault(_Bus2);\n\nvar _Pipeline = require('./Pipeline');\n\nvar _Pipeline2 = _interopRequireDefault(_Pipeline);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n* @author micaelpedrosa@gmail.com\n* Message BUS Interface is an extension of the Bus\n* It doesn't support the default '*' listener, instead it uses the registry.resolve(..)\n*/\n/**\n* Copyright 2016 PT Inovação e Sistemas SA\n* Copyright 2016 INESC-ID\n* Copyright 2016 QUOBIS NETWORKS SL\n* Copyright 2016 FRAUNHOFER-GESELLSCHAFT ZUR FOERDERUNG DER ANGEWANDTEN FORSCHUNG E.V\n* Copyright 2016 ORANGE SA\n* Copyright 2016 Deutsche Telekom AG\n* Copyright 2016 Apizee\n* Copyright 2016 TECHNISCHE UNIVERSITAT BERLIN\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n**/\n\nvar MessageBus = function (_Bus) {\n  (0, _inherits3.default)(MessageBus, _Bus);\n\n  /* private\n  _registry: Registry\n  _forwards: { <from-url>: { fl: MsgListener, sandboxToUrls: Map(Sandbox, [to-url]), urlToSandbox: { to-url: Sandbox } } }\n   _pipeline: Pipeline\n  */\n\n  //TODO: future optimization\n  //1. message batch processing with setInterval\n  //2. resolve default gateway/protostub with register.resolve\n\n  function MessageBus(registry) {\n    (0, _classCallCheck3.default)(this, MessageBus);\n\n    var _this2 = (0, _possibleConstructorReturn3.default)(this, (0, _getPrototypeOf2.default)(MessageBus).call(this));\n\n    _this2._registry = registry;\n    _this2._forwards = {};\n\n    _this2._pipeline = new _Pipeline2.default(function (error) {\n      console.log('PIPELINE-ERROR: ', (0, _stringify2.default)(error));\n    });\n    return _this2;\n  }\n\n  (0, _createClass3.default)(MessageBus, [{\n    key: 'postMessage',\n\n\n    /**\n     * Post a message for routing. It will first search for a listener, if there is no one, it sends to a external routing using the _onPostMessage.\n     * External routing use the registry.resolve(..) method to decide the destination sandbox.\n     * @param  {Message} inMsg            JSON with mandatory Message structure {id, type, from, to}\n     * @param  {Callback} responseCallback Optional callback if a response is expected from the request. A response will be always sent, even if it is a \"Timeout\".\n     * @return {number}                  the Message id\n     */\n    value: function postMessage(inMsg, responseCallback) {\n      var _this = this;\n\n      _this._genId(inMsg);\n\n      _this._pipeline.process(inMsg, function (msg) {\n\n        _this._responseCallback(inMsg, responseCallback);\n\n        if (!_this._onResponse(msg)) {\n          var itemList = _this._subscriptions[msg.to];\n          if (itemList) {\n            //do not publish on default address, because of loopback cycle\n            _this._publishOn(itemList, msg);\n          } else {\n            //if there is no listener, send to external interface\n            _this._onPostMessage(msg);\n          }\n        }\n      });\n\n      return inMsg.id;\n    }\n\n    /**\n     * Adds an external publish address listener. Every message for the address will be forwarded to the external routing by _onPostMessage.\n     * This means, even if there is a listener for the address, it will also send the message to the external routing.\n     * @param {URL} from Publish address.\n     */\n\n  }, {\n    key: 'addPublish',\n    value: function addPublish(from) {\n      var _this3 = this;\n\n      var _this = this;\n\n      //verify if forward exist\n      var refCount = _this._forwards[from];\n      if (!refCount) {\n        var forwardListener = _this.addListener(from, function (msg) {\n          console.log('MB-PUBLISH: ( ' + from + ' )');\n          _this._onPostMessage(msg);\n        });\n\n        refCount = {\n          counter: 0,\n          fl: forwardListener,\n          remove: function remove() {\n            _this3.counter--;\n            if (_this3.counter === 0) {\n              _this3.fl.remove();\n              delete _this._forwards[from];\n            }\n          }\n        };\n\n        _this._forwards[from] = refCount;\n      }\n\n      refCount.counter++;\n      return refCount;\n    }\n\n    /**\n     * Adds a forward listener for a message destination. Every message reaching an address will be also sent to the forward address.\n     * @param {URL} from Message destination, it's actually the field \"to\" of the message.\n     * @param {URL} to   Forward address.\n     */\n\n  }, {\n    key: 'addForward',\n    value: function addForward(from, to) {\n      var _this = this;\n\n      return _this.addListener(from, function (msg) {\n        console.log('MB-FORWARD: ( ' + from + ' to ' + to + ' )');\n        _this.forward(to, msg);\n      });\n    }\n\n    /**\n     * Just forward's a message to the forward address. Listeners should be available for the forward address.\n     * @param  {URL} url Forward address.\n     * @param  {Message} msg Message to forward\n     */\n\n  }, {\n    key: 'forward',\n    value: function forward(url, msg) {\n      var _this = this;\n\n      var itemList = _this._subscriptions[url];\n      if (itemList) {\n        _this._publishOn(itemList, msg);\n      }\n    }\n\n    //default route, if there are no listeners available for a message destination.\n\n  }, {\n    key: '_onPostMessage',\n    value: function _onPostMessage(msg) {\n      var _this = this;\n\n      //resolve external protostub...\n      _this._registry.resolve(msg.to).then(function (route) {\n        _this.forward(route, msg);\n      }).catch(function (e) {\n        console.log('RESOLVE-ERROR: ', e);\n      });\n    }\n  }, {\n    key: 'pipeline',\n    get: function get() {\n      return this._pipeline;\n    }\n  }]);\n  return MessageBus;\n}(_Bus3.default);\n\nexports.default = MessageBus;\nmodule.exports = exports['default'];\n\n},{\"./Bus\":415,\"./Pipeline\":417,\"babel-runtime/core-js/json/stringify\":2,\"babel-runtime/core-js/object/get-prototype-of\":6,\"babel-runtime/helpers/classCallCheck\":13,\"babel-runtime/helpers/createClass\":14,\"babel-runtime/helpers/inherits\":15,\"babel-runtime/helpers/possibleConstructorReturn\":16}],417:[function(require,module,exports){\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _classCallCheck2 = require(\"babel-runtime/helpers/classCallCheck\");\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _createClass2 = require(\"babel-runtime/helpers/createClass\");\n\nvar _createClass3 = _interopRequireDefault(_createClass2);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n* Copyright 2016 PT Inovação e Sistemas SA\n* Copyright 2016 INESC-ID\n* Copyright 2016 QUOBIS NETWORKS SL\n* Copyright 2016 FRAUNHOFER-GESELLSCHAFT ZUR FOERDERUNG DER ANGEWANDTEN FORSCHUNG E.V\n* Copyright 2016 ORANGE SA\n* Copyright 2016 Deutsche Telekom AG\n* Copyright 2016 Apizee\n* Copyright 2016 TECHNISCHE UNIVERSITAT BERLIN\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n**/\n\n/**\n* @author micaelpedrosa@gmail.com\n* Sequencial processor of methods. Similar to how Sequential Promise's work, but better fit for message processing.\n* Normal use for this, is to intercept all messages with configured handlers, and act accordingly.\n*/\n\nvar Pipeline = function () {\n  /* public\n    handlers: ((PipeContext) => void)[]\n    onFail: (error) => void\n  */\n\n  function Pipeline(_onFail) {\n    (0, _classCallCheck3.default)(this, Pipeline);\n\n    var _this = this;\n\n    _this.handlers = [];\n    _this.onFail = _onFail;\n  }\n\n  /**\n   * Insert a message in the pipeline queue. All messages are wrapped with a PipeContext.\n   * @param  {Message} msg       Message for the queue\n   * @param  {Callback} onDeliver When message is finished processing from all handlers, it will be delivered in this callback.\n   */\n\n\n  (0, _createClass3.default)(Pipeline, [{\n    key: \"process\",\n    value: function process(msg, onDeliver) {\n      var _this = this;\n\n      if (_this.handlers.length > 0) {\n        var iter = new Iterator(_this.handlers);\n        iter.next(new PipeContext(_this, iter, msg, onDeliver));\n      } else {\n        onDeliver(msg);\n      }\n    }\n  }]);\n  return Pipeline;\n}();\n\n/**\n* @author micaelpedrosa@gmail.com\n* Wrapper around a message that adds actions that can be fired by any interceptor handler.\n* The Pipeline is asynchronous, so an handler should always call an action, the default one is \"next()\"\n*/\n\n\nvar PipeContext = function () {\n  /* private\n    _inStop: boolean\n     _pipeline: Pipeline\n    _iter: Iterator\n    _msg: Message\n  */\n\n  function PipeContext(pipeline, iter, msg, onDeliver) {\n    (0, _classCallCheck3.default)(this, PipeContext);\n\n    var _this = this;\n\n    _this._inStop = false;\n\n    _this._pipeline = pipeline;\n    _this._iter = iter;\n    _this._msg = msg;\n    _this._onDeliver = onDeliver;\n  }\n\n  (0, _createClass3.default)(PipeContext, [{\n    key: \"next\",\n\n\n    /**\n     * Proceed to the next interceptor handler, unless there was an error. If it's the last one, proceed to onDeliver handler.\n     */\n    value: function next() {\n      var _this = this;\n\n      if (!_this._inStop) {\n        if (_this._iter.hasNext) {\n          _this._iter.next(_this);\n        } else {\n          _this._onDeliver(_this._msg);\n        }\n      }\n    }\n\n    /**\n     * Proceed directly to the onDeliver handler, unless there was an error.\n     */\n\n  }, {\n    key: \"deliver\",\n    value: function deliver() {\n      var _this = this;\n      if (!_this._inStop) {\n        _this._inStop = true;\n        _this._onDeliver(_this._msg);\n      }\n    }\n\n    /**\n     * Mark the context with an error and proceed to the onFail handler.\n     * @param  {[type]} error [description]\n     */\n\n  }, {\n    key: \"fail\",\n    value: function fail(error) {\n      var _this = this;\n\n      if (!_this._inStop) {\n        _this._inStop = true;\n        if (_this._pipeline.onFail) {\n          _this._pipeline.onFail(error);\n        }\n      }\n    }\n  }, {\n    key: \"pipeline\",\n    get: function get() {\n      return this._pipeline;\n    }\n  }, {\n    key: \"msg\",\n    get: function get() {\n      return this._msg;\n    },\n    set: function set(inMsg) {\n      this._msg = inMsg;\n    }\n  }]);\n  return PipeContext;\n}();\n\nvar Iterator = function () {\n  /* private\n    _index: number\n    _array: []\n  */\n\n  function Iterator(array) {\n    (0, _classCallCheck3.default)(this, Iterator);\n\n    this._index = -1;\n    this._array = array;\n  }\n\n  (0, _createClass3.default)(Iterator, [{\n    key: \"hasNext\",\n    get: function get() {\n      return this._index < this._array.length - 1;\n    }\n  }, {\n    key: \"next\",\n    get: function get() {\n      this._index++;\n      return this._array[this._index];\n    }\n  }]);\n  return Iterator;\n}();\n\nexports.default = Pipeline;\nmodule.exports = exports['default'];\n\n},{\"babel-runtime/helpers/classCallCheck\":13,\"babel-runtime/helpers/createClass\":14}],418:[function(require,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _promise = require('babel-runtime/core-js/promise');\n\nvar _promise2 = _interopRequireDefault(_promise);\n\nvar _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _createClass2 = require('babel-runtime/helpers/createClass');\n\nvar _createClass3 = _interopRequireDefault(_createClass2);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n* Class with the cryptographic functions for the authentication protocol\n*\n*/\n\nvar Crypto = function () {\n  function Crypto() {\n    (0, _classCallCheck3.default)(this, Crypto);\n\n    var _this = this;\n  }\n\n  /**\n  * encode a byteArray value in base 64 encode\n  * @param   {byteArray}    value    byteArray value\n  * @return  {string}   encoded value\n  */\n\n\n  (0, _createClass3.default)(Crypto, [{\n    key: 'encode',\n    value: function encode(value) {\n      return btoa(value);\n    }\n\n    /**\n    * decode a base64 value in a new Uint8Array\n    * @param   {string}    value    value encoded in base 64\n    * @return  {byteArray} decodedValue\n    */\n\n  }, {\n    key: 'decode',\n    value: function decode(value) {\n      return new Uint8Array(JSON.parse('[' + atob(value) + ']'));\n    }\n  }, {\n    key: 'encryptRSA',\n    value: function encryptRSA(pubKey, data) {\n      var _this = this;\n\n      return new _promise2.default(function (resolve, reject) {\n        _this._importRSAencryptKey(new Uint8Array(pubKey)).then(function (publicKey) {\n\n          crypto.subtle.encrypt({\n            name: 'RSA-OAEP'\n          }, publicKey, //from generateKey or importKey above\n          data //ArrayBuffer of data you want to encrypt\n          ).then(function (encrypted) {\n            //returns an ArrayBuffer containing the encrypted data\n            //console.log('crypto-encryptRSA', new Uint8Array(encrypted));\n            resolve(new Uint8Array(encrypted));\n          }).catch(function (err) {\n            console.log('crypto-encryptRSA', err);\n            reject(err);\n          });\n        });\n      });\n    }\n  }, {\n    key: 'decryptRSA',\n    value: function decryptRSA(privKey, data) {\n      var _this = this;\n\n      return new _promise2.default(function (resolve, reject) {\n        _this._importRSAdecryptKey(privKey).then(function (privateKey) {\n\n          crypto.subtle.decrypt({\n            name: 'RSA-OAEP'\n          }, privateKey, //from generateKey or importKey above\n          data //ArrayBuffer of the data\n          ).then(function (decrypted) {\n\n            var decryptedData = new Uint8Array(decrypted);\n\n            //console.log('crypto-decryptRSA', decryptedData);\n            resolve(decryptedData);\n          }).catch(function (err) {\n            console.log('crypto-decryptRSA', err);\n            reject(err);\n          });\n        });\n      });\n    }\n  }, {\n    key: 'signRSA',\n    value: function signRSA(privKey, data) {\n      var _this = this;\n\n      return new _promise2.default(function (resolve, reject) {\n        _this._importRSAsignKey(privKey).then(function (privateKey) {\n\n          crypto.subtle.sign({\n            name: 'RSASSA-PKCS1-v1_5'\n          }, privateKey, //from generateKey or importKey above\n          _this._utf8Encode(data) //ArrayBuffer of data you want to sign\n          ).then(function (signature) {\n            //returns an ArrayBuffer containing the signature\n            //console.log('crypto-signRSA', new Uint8Array(signature));\n            resolve(new Uint8Array(signature));\n          }).catch(function (err) {\n            console.log('crypto-signRSA', err);\n            reject(err);\n          });\n        });\n      });\n    }\n  }, {\n    key: 'verifyRSA',\n    value: function verifyRSA(pubKey, data, signature) {\n      var _this = this;\n\n      return new _promise2.default(function (resolve, reject) {\n        _this._importRSAverifyKey(pubKey).then(function (publicKey) {\n\n          crypto.subtle.verify({\n            name: 'RSASSA-PKCS1-v1_5'\n          }, publicKey, //from generateKey or importKey above\n          signature, //ArrayBuffer of the signature\n          _this._utf8Encode(data) //ArrayBuffer of the data\n          ).then(function (isvalid) {\n            //returns a boolean on whether the signature is true or not\n            //console.log('crypto-verifyRSA', isvalid);\n            resolve(isvalid);\n          }).catch(function (err) {\n            console.log('crypto-verifyRSA', err);\n            reject(err);\n          });\n        });\n      });\n    }\n  }, {\n    key: 'encryptAES',\n    value: function encryptAES(key, data, iv) {\n      var _this = this;\n\n      return new _promise2.default(function (resolve, reject) {\n        _this._importAESkey(key).then(function (aesKey) {\n\n          crypto.subtle.encrypt({\n            name: 'AES-CBC',\n            //Don't re-use initialization vectors!\n            //Always generate a new iv every time your encrypt!\n            iv: iv\n          }, aesKey, //from generateKey or importKey above\n          _this._utf8Encode(data) //ArrayBuffer of data you want to encrypt\n          ).then(function (encrypted) {\n            //returns an ArrayBuffer containing the encrypted data\n            //console.log('crypto-encryptAES', new Uint8Array(encrypted));\n            resolve(new Uint8Array(encrypted));\n          }).catch(function (err) {\n            console.log('crypto-encryptAES', err);\n            reject(err);\n          });\n        });\n      });\n    }\n  }, {\n    key: 'decryptAES',\n    value: function decryptAES(key, data, iv) {\n      var _this = this;\n\n      return new _promise2.default(function (resolve, reject) {\n        _this._importAESkey(key).then(function (aesKey) {\n\n          crypto.subtle.decrypt({\n            name: 'AES-CBC',\n            iv: iv\n          }, aesKey, //from generateKey or importKey above\n          data //ArrayBuffer of the data\n          ).then(function (decrypted) {\n\n            var decodedData = _this._utf8Decode(new Uint8Array(decrypted));\n            //console.log('crypto-decryptAES', decodedData);\n            resolve(decodedData);\n          }).catch(function (err) {\n            console.log('crypto-decryptAES', err);\n            reject(err);\n          });\n        });\n      });\n    }\n\n    /**\n    * creates a hash using the HMAC algorithm\n    * @param  {byteArray}    key       key to be used in the hmac\n    * @param  {string}      data       information to be hashed\n    * @return  {byteArray}   signature  resulting hash\n    */\n\n  }, {\n    key: 'hashHMAC',\n    value: function hashHMAC(key, data) {\n      var _this = this;\n\n      return new _promise2.default(function (resolve, reject) {\n\n        _this._importHMACkey(key).then(function (hmacKey) {\n\n          crypto.subtle.sign({\n            name: 'HMAC'\n          }, hmacKey, //from generateKey or importKey above\n          _this._utf8Encode(data) //ArrayBuffer of data you want to sign\n          ).then(function (signature) {\n            //console.log('crypto-hashHMAC', signature);\n\n            //returns an ArrayBuffer containing the signature\n            resolve(new Uint8Array(signature));\n          }).catch(function (err) {\n            console.log('crypto-hashHMAC', err);\n            reject(err);\n          });\n        });\n      });\n    }\n\n    /**\n    * verifies an hash using the HMAC algorithm\n    * @param  {byteArray}    key       key to be used in the hmac\n    * @param  {string}      data       information to be hashed to compare\n    * @param  {byteArray}  signature   hash to compare with the received data\n    * @return  {boolean}   isvalid     boolean saying if the data corresponds to the hash received\n    */\n\n  }, {\n    key: 'verifyHMAC',\n    value: function verifyHMAC(key, data, signature) {\n      var _this = this;\n\n      return new _promise2.default(function (resolve, reject) {\n\n        _this._importHMACkey(key).then(function (hmacKey) {\n\n          crypto.subtle.verify({\n            name: 'HMAC'\n          }, hmacKey, //from generateKey or importKey above\n          signature, //ArrayBuffer of the signature\n          _this._utf8Encode(data) //ArrayBuffer of the data\n          ).then(function (isvalid) {\n            //returns a boolean on whether the signature is true or not\n            //console.log('crypto-verifyHMAC', isvalid);\n            isvalid ? resolve(isvalid) : reject(isvalid);\n          }).catch(function (err) {\n            console.error('crypto-verifyHMAC', err);\n            reject(err);\n          });\n        });\n      });\n    }\n\n    /**\n    * generates a RSA public/private key pair with a modulus length of 2048 bits\n    * @return  {JSON}   keyPair    json containing the public and private keys\n    */\n\n  }, {\n    key: 'generateRSAKeyPair',\n    value: function generateRSAKeyPair() {\n      var _this = this;\n      var keyPair = {};\n\n      return new _promise2.default(function (resolve, reject) {\n        crypto.subtle.generateKey({\n          name: 'RSA-PSS',\n          modulusLength: 2048, //can be 1024, 2048, or 4096\n          publicExponent: new Uint8Array([0x01, 0x00, 0x01]),\n          hash: { name: 'SHA-256' } //can be 'SHA-1', 'SHA-256', 'SHA-384', or 'SHA-512'\n        }, true, //whether the key is extractable (i.e. can be used in exportKey)\n        ['sign', 'verify'] //can be any combination of 'sign' and 'verify'\n\n        ).then(function (key) {\n          //returns a keypair object\n          //console.log(key);\n\n          crypto.subtle.exportKey('spki', //can be 'jwk' (public or private), 'spki' (public only), or 'pkcs8' (private only)\n          key.publicKey //can be a publicKey or privateKey, as long as extractable was true\n          ).then(function (publicKey) {\n            //returns the exported key data\n            keyPair.public = new Uint8Array(publicKey);\n            return crypto.subtle.exportKey('pkcs8', //can be 'jwk' (public or private), 'spki' (public only), or 'pkcs8' (private only)\n            key.privateKey //can be a publicKey or privateKey, as long as extractable was true\n            );\n          }).then(function (privateKey) {\n            keyPair.private = new Uint8Array(privateKey);\n            //console.log('crypto-generateRSAKeyPair', keyPair);\n\n            resolve(keyPair);\n          }).catch(function (err) {\n            console.error(err);\n            reject(err);\n          });\n        }).catch(function (err) {\n          console.error(err);\n          reject(err);\n        });\n      });\n    }\n\n    /**\n    * Generates a 128 bit random value.\n    * @return {byteArray}  array    random value\n    */\n\n  }, {\n    key: 'generateIV',\n    value: function generateIV() {\n      var _this = this;\n\n      var array = new Uint8Array(16);\n      crypto.getRandomValues(array);\n\n      return array;\n    }\n\n    /**\n    * Generates a 256 bit random value. 32 bits are extrated from the machine time,\n    * the remaining are generated randomly\n    * @return {byteArray}  array    random value\n    */\n\n  }, {\n    key: 'generateRandom',\n    value: function generateRandom() {\n      var _this = this;\n\n      var array = new Uint8Array(32);\n      crypto.getRandomValues(array);\n\n      var date = Date.now();\n      var dateEncoded = _this._utf8Encode(date);\n\n      //extract the least significant 4 bytes in the date\n      var finalDate = dateEncoded.slice(dateEncoded.length - 4, dateEncoded.length);\n\n      // add in the first 4 bytes of the array the bytes extracted previously;\n      for (var i = 0; i < 4; i++) {\n        array[i] = finalDate[i];\n      }\n      return array;\n    }\n\n    /**\n    * generates a premaster secret (PMS) of 48 bytes (384 bits) randomly\n    * @return {byteArray}  array    premaster secret key\n    */\n\n  }, {\n    key: 'generatePMS',\n    value: function generatePMS() {\n      var _this = this;\n\n      var array = new Uint8Array(48);\n      crypto.getRandomValues(array);\n      return array;\n    }\n\n    /**\n    * generates a masterKey secret (PMS) of 48 bytes (384 bits) using the premaster secret and\n    * two randoms\n    * @return {byteArray}  array    master secret key with 48 bytes\n    */\n\n  }, {\n    key: 'generateMasterSecret',\n    value: function generateMasterSecret(hmacKey, data) {\n      var _this = this;\n\n      return new _promise2.default(function (resolve, reject) {\n        var key = new Uint8Array(48);\n        var seed = data;\n\n        _this._digest(hmacKey).then(function (digestedKey) {\n\n          _this.hashHMAC(digestedKey, seed).then(function (keypart0) {\n\n            //copy the first 32 bytes into the key\n            for (var i = 0; i < 32; i++) {\n              key[i] = keypart0[i];\n            }\n            return _this.hashHMAC(digestedKey, seed + keypart0);\n          }).then(function (keypart1) {\n\n            //copy the first 16 bytes to the key remaining 16 bytes\n            for (var i = 0; i < 16; i++) {\n              key[i + 32] = keypart1[i];\n            }\n            //console.log('crypto-generateMasterSecret', key);\n            resolve(key);\n          }).catch(function (err) {\n            console.log('crypto-generateMasterSecret', err);\n            reject(err);\n          });\n        });\n      });\n    }\n\n    /**\n    * generates both users MAC and encryption keys. generate as output an array\n    * with 4 byteArray each with 32 bytes\n    * @param  {byteArray}        secret       secret to be used in the HMAC function\n    * @param  {String}           data         information to be used as seed\n    * @return {Array<byteArray>} key          array with the information to generate keys\n    */\n\n  }, {\n    key: 'generateKeys',\n    value: function generateKeys(hmacKey, data) {\n      var _this = this;\n\n      return new _promise2.default(function (resolve, reject) {\n\n        var key = [];\n        var seed = data;\n\n        // iterate 4 times to obtain a 1024 key size\n        _this.hashHMAC(hmacKey, seed).then(function (keypart0) {\n          key.push(keypart0);\n          return _this.hashHMAC(hmacKey, seed + keypart0);\n        }).then(function (keypart1) {\n          key.push(keypart1);\n          return _this.hashHMAC(hmacKey, seed + keypart1);\n        }).then(function (keypart2) {\n          key.push(keypart2);\n          return _this.hashHMAC(hmacKey, seed + keypart2);\n        }).then(function (keypart3) {\n          key.push(keypart3);\n\n          //console.log('crypto-generateKeys', key);\n          resolve(key);\n        }).catch(function (err) {\n          //console.log('crypto-generateKeys', err);\n          reject(err);\n        });\n\n        //console.log(hmacKey, data);\n      });\n    }\n  }, {\n    key: '_importRSAsignKey',\n    value: function _importRSAsignKey(privKey) {\n      var _this = this;\n\n      return new _promise2.default(function (resolve, reject) {\n        crypto.subtle.importKey('pkcs8', //can be 'jwk' (public or private), 'spki' (public only), or 'pkcs8' (private only)\n        privKey, { //these are the algorithm options\n          name: 'RSASSA-PKCS1-v1_5',\n          hash: { name: 'SHA-256' } //can be 'SHA-1', 'SHA-256', 'SHA-384', or 'SHA-512'\n        }, true, //whether the key is extractable (i.e. can be used in exportKey)\n        ['sign'] //'verify' for public key import, 'sign' for private key imports\n        ).then(function (privateKey) {\n          //returns a publicKey (or privateKey if you are importing a private key)\n          //console.log('crypto-_importRSAsignKey', privateKey);\n          resolve(privateKey);\n        }).catch(function (err) {\n          console.error('crypto-_importRSAsignKey', err);\n          reject(err);\n        });\n      });\n    }\n  }, {\n    key: '_importRSAverifyKey',\n    value: function _importRSAverifyKey(pubKey) {\n      var _this = this;\n\n      return new _promise2.default(function (resolve, reject) {\n        crypto.subtle.importKey('spki', //can be 'jwk' (public or private), 'spki' (public only), or 'pkcs8' (private only)\n        pubKey, { //these are the algorithm options\n          name: 'RSASSA-PKCS1-v1_5',\n          hash: { name: 'SHA-256' } //can be 'SHA-1', 'SHA-256', 'SHA-384', or 'SHA-512'\n        }, true, //whether the key is extractable (i.e. can be used in exportKey)\n        ['verify'] //'verify' for public key import, 'sign' for private key imports\n        ).then(function (publicKey) {\n          //returns a publicKey (or privateKey if you are importing a private key)\n          //console.log('crypto-_importRSAverifyKey', publicKey);\n          resolve(publicKey);\n        }).catch(function (err) {\n          console.error('crypto-_importRSAverifyKey', err);\n          reject(err);\n        });\n      });\n    }\n  }, {\n    key: '_importRSAencryptKey',\n    value: function _importRSAencryptKey(pubKey) {\n      var _this = this;\n\n      return new _promise2.default(function (resolve, reject) {\n        crypto.subtle.importKey('spki', //can be 'jwk' (public or private), 'spki' (public only), or 'pkcs8' (private only)\n        pubKey, { //these are the algorithm options\n          name: 'RSA-OAEP',\n          hash: { name: 'SHA-256' } //can be 'SHA-1', 'SHA-256', 'SHA-384', or 'SHA-512'\n        }, true, //whether the key is extractable (i.e. can be used in exportKey)\n        ['encrypt'] //'encrypt' or 'wrapKey' for public key import or\n        //'decrypt' or 'unwrapKey' for private key imports\n        ).then(function (publicKey) {\n          //returns a publicKey (or privateKey if you are importing a private key)\n          //console.log('crypto-_importRSAencryptKey', publicKey);\n          resolve(publicKey);\n        }).catch(function (err) {\n          console.error('crypto-_importRSAencryptKey', err);\n          reject(err);\n        });\n      });\n    }\n  }, {\n    key: '_importRSAdecryptKey',\n    value: function _importRSAdecryptKey(privKey) {\n      var _this = this;\n\n      return new _promise2.default(function (resolve, reject) {\n        crypto.subtle.importKey('pkcs8', //can be 'jwk' (public or private), 'spki' (public only), or 'pkcs8' (private only)\n        privKey, { //these are the algorithm options\n          name: 'RSA-OAEP',\n          hash: { name: 'SHA-256' } //can be 'SHA-1', 'SHA-256', 'SHA-384', or 'SHA-512'\n        }, true, //whether the key is extractable (i.e. can be used in exportKey)\n        ['decrypt'] //'encrypt' or 'wrapKey' for public key import or\n        //'decrypt' or 'unwrapKey' for private key imports\n        ).then(function (privateKey) {\n          //returns a publicKey (or privateKey if you are importing a private key)\n          //console.log('crypto-_importRSAdecryptKey', privateKey);\n          resolve(privateKey);\n        }).catch(function (err) {\n          console.error('crypto-_importRSAdecryptKey', err);\n          reject(err);\n        });\n      });\n    }\n  }, {\n    key: 'concatPMSwithRandoms',\n    value: function concatPMSwithRandoms(pms, toRandom, fromRandom) {\n      var _this = this;\n\n      var finalKey = new Uint8Array(pms.length + toRandom.length + fromRandom.length);\n\n      // add PremasterKey\n      for (var i = 0; i < pms.length; i++) {\n        finalKey[i] = pms[i];\n      }\n\n      //add to random\n      for (var _i = 0; _i < toRandom.length; _i++) {\n        finalKey[_i + pms.length] = pms[_i];\n      }\n\n      //add from random\n      for (var _i2 = 0; _i2 < fromRandom.length; _i2++) {\n        finalKey[_i2 + pms.length + toRandom.length] = pms[_i2];\n      }\n\n      return finalKey;\n    }\n  }, {\n    key: '_generate256bitKey',\n    value: function _generate256bitKey() {\n      var array = new Uint8Array(32);\n      crypto.getRandomValues(array);\n\n      return array;\n    }\n\n    /**\n    * imports the secret to the HMAC function\n    * @param  {byteArray}   arrayBuffer     bytes to import as key\n    * @return {JSON}       key              key ready to be used in the HMAC cryptographic function\n    */\n\n  }, {\n    key: '_importHMACkey',\n    value: function _importHMACkey(arrayBuffer) {\n      var _this = this;\n\n      return new _promise2.default(function (resolve, reject) {\n\n        _this._digest(arrayBuffer).then(function (key) {\n\n          crypto.subtle.importKey('raw', //can be 'jwk' or 'raw'\n          key, { //this is the algorithm options\n            name: 'HMAC',\n            hash: { name: 'SHA-256' }, //can be 'SHA-1', 'SHA-256', 'SHA-384', or 'SHA-512'\n            length: 256 //optional, if you want your key length to differ from the hash function's block length\n          }, true, //whether the key is extractable (i.e. can be used in exportKey)\n          ['sign', 'verify'] //can be any combination of 'sign' and 'verify'\n          ).then(function (key) {\n            //returns the symmetric key\n            //console.log('crypto-_importHMACkey', key);\n            resolve(key);\n          }).catch(function (err) {\n            reject(err);\n          });\n        });\n      });\n    }\n  }, {\n    key: '_digest',\n    value: function _digest(value) {\n      var _this = this;\n\n      return new _promise2.default(function (resolve, reject) {\n        crypto.subtle.digest({\n          name: 'SHA-256'\n        }, value //The data you want to hash as an ArrayBuffer\n        ).then(function (hash) {\n          //returns the hash as an ArrayBuffer\n          //console.log('crypto-digest', new Uint8Array(hash));\n          resolve(new Uint8Array(hash));\n        }).catch(function (err) {\n          console.error(err);\n          reject(err);\n        });\n      });\n    }\n  }, {\n    key: '_importAESkey',\n    value: function _importAESkey(arrayBuffer) {\n      return new _promise2.default(function (resolve, reject) {\n        crypto.subtle.importKey('raw', //can be 'jwk' or 'raw'\n        arrayBuffer, { //this is the algorithm options\n          name: 'AES-CBC'\n        }, true, //whether the key is extractable (i.e. can be used in exportKey)\n        ['encrypt', 'decrypt'] //can be 'encrypt', 'decrypt', 'wrapKey', or 'unwrapKey'\n        ).then(function (key) {\n          //returns the symmetric key\n          //console.log('crypto-importAESkey', key);\n          resolve(key);\n        }).catch(function (err) {\n          console.error('crypto-importAESkey', err);\n          reject(err);\n        });\n      });\n    }\n  }, {\n    key: '_utf8Encode',\n    value: function _utf8Encode(s) {\n      return new TextEncoder('utf-8').encode(s);\n    }\n  }, {\n    key: '_utf8Decode',\n    value: function _utf8Decode(s) {\n      return new TextDecoder('utf-8').decode(s);\n    }\n  }]);\n  return Crypto;\n}();\n\nexports.default = Crypto;\nmodule.exports = exports['default'];\n\n},{\"babel-runtime/core-js/promise\":10,\"babel-runtime/helpers/classCallCheck\":13,\"babel-runtime/helpers/createClass\":14}],419:[function(require,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _createClass2 = require('babel-runtime/helpers/createClass');\n\nvar _createClass3 = _interopRequireDefault(_createClass2);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n* The Identity Data Model is used to model the reTHINK User entity. The Identity data model is handled by Identity Management functionality.\n*\n*/\n\nvar Identity = function () {\n  function Identity(guid, type) {\n    (0, _classCallCheck3.default)(this, Identity);\n\n    var _this = this;\n\n    _this.guid = guid;\n    _this.type = type;\n    _this.identifiersList = {};\n  }\n\n  (0, _createClass3.default)(Identity, [{\n    key: 'addIdentity',\n    value: function addIdentity(identifier) {\n      var _this = this;\n      var identityInformation = {\n        idAssertion: '',\n        serviceAddress: '',\n        authenticationData: '',\n        authorisationData: '',\n        userProfile: ''\n      };\n      _this.identifiersList[identifier] = identityInformation;\n    }\n  }, {\n    key: 'addIdAssertion',\n    value: function addIdAssertion(identifier, assertion, idp, scope) {\n      var _this = this;\n\n      var newIdAssertion = new IdAssertion(assertion, idp, scope);\n\n      _this.idAssertionList.push(newIdAssertion);\n    }\n  }]);\n  return Identity;\n}();\n\nvar IdAssertion = function IdAssertion(assertion, idp, scope) {\n  (0, _classCallCheck3.default)(this, IdAssertion);\n\n  var _this = this;\n\n  _this.assertion = assertion;\n  _this.idp = idp;\n  _this.scope = scope;\n};\n\nvar IdValidation = function () {\n  function IdValidation(identity, contents) {\n    (0, _classCallCheck3.default)(this, IdValidation);\n\n    var _this = this;\n    _this.identity = identity;\n    _this.contents = contents;\n  }\n\n  (0, _createClass3.default)(IdValidation, [{\n    key: 'validates',\n    value: function validates(identity, contents) {\n      //TODO implement the logic\n\n    }\n  }]);\n  return IdValidation;\n}();\n\nexports.default = Identity;\nmodule.exports = exports['default'];\n\n},{\"babel-runtime/helpers/classCallCheck\":13,\"babel-runtime/helpers/createClass\":14}],420:[function(require,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _stringify = require('babel-runtime/core-js/json/stringify');\n\nvar _stringify2 = _interopRequireDefault(_stringify);\n\nvar _promise = require('babel-runtime/core-js/promise');\n\nvar _promise2 = _interopRequireDefault(_promise);\n\nvar _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _createClass2 = require('babel-runtime/helpers/createClass');\n\nvar _createClass3 = _interopRequireDefault(_createClass2);\n\nvar _utils = require('../utils/utils.js');\n\nvar _Identity = require('./Identity');\n\nvar _Identity2 = _interopRequireDefault(_Identity);\n\nvar _Crypto = require('./Crypto');\n\nvar _Crypto2 = _interopRequireDefault(_Crypto);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n*\n* The Identity Module (Id Module) is the component responsible for handling the\n* user identity and the association of this identity with the Hyperty instances,\n* in order to make Hyperty instances identifiable. The identity in the reTHINK project\n* is not fixed to a unique Identity Service Provider, but obtained through several\n* different Identity sources. With this approach, the Id Module provides to the user the\n* option to choose the preferred method for authentication.\n* This module will thus able to support multiple Identity acquisition methods,\n* such as OpenID connect 1.0, Kerberos System, or authentication through smart cards.\n* For example, a user with a Google account can use the Google as an Identity Provider to provide Identity Tokens,\n*  which can be used by the Identity Module to associate it with a Hyperty instance.\n*\n* The Identity Module uses a node package, the HelloJS, which is a client-side JavaScript API for authentication\n* that facilitates the requests for the OpenID connect protocol. This method allows for some abstraction\n* when making requests for different Identity Providers, such as OpenID connect used by Google, Facebook, Microsoft, for example.\n*\n* When a request for a user identity is made using the method loginWithRP(identifier, scope),\n* this method will analyse the Identity Provider chosen to obtain an identity and will use the HelloJS node package\n* with the selected Identity Provider and identity scope. After the HelloJS request for an Access Token\n* to the Identity Providers, the user will be prompted to authenticate towards the Identity Provider.\n* Upon receiving the Access Token, this token is validated with a RESTful web service request to an endpoint\n* on the Identity Provider Authorization Server, and after the validation is done,\n* an ID token is obtained with the information according to the scope required.\n* This ID token is then preserved in this module that can obtained through the getIdentities()\n* and is passed as return value of the loginWithRP function. The methods generateAssertion and validateAssertion have not yet been developed.\n*\n*/\n\nvar IdentityModule = function () {\n\n  /**\n  * This is the constructor to initialise the Identity Module it does not require any input.\n  */\n\n  function IdentityModule(runtimeURL) {\n    (0, _classCallCheck3.default)(this, IdentityModule);\n\n    var _this = this;\n\n    if (!runtimeURL) throw new Error('runtimeURL is missing.');\n\n    _this._runtimeURL = runtimeURL;\n    _this._idmURL = runtimeURL + '/idm';\n\n    _this._domain = (0, _utils.divideURL)(_this._runtimeURL).domain;\n\n    //to store items with this format: {identity: identityURL, token: tokenID}\n    _this.identities = [];\n    var newIdentity = new _Identity2.default('guid', 'HUMAN');\n    _this.identity = newIdentity;\n    _this.crypto = new _Crypto2.default();\n\n    //stores the association of the dataObject and the Hyperty registered within\n    _this.dataObjectsIdentity = {};\n\n    // hashTable to store all the crypto information between two hyperties\n    _this.chatKeys = {};\n\n    // hashTable to store the symmetric keys to be used in the chat group\n    _this.dataObjectSessionKeys = {};\n\n    //failsafe to enable/disable all the criptographic functions\n    _this.isToUseEncryption = true;\n\n    // verification of nodeJS, and in case it is nodeJS then disable encryption\n    // TODO improve later, this exists because the crypto lib uses browser cryptographic methods\n    //_this.isToUseEncryption = (window) ? true : false;\n  }\n\n  /**\n  * return the messageBus in this Registry\n  * @param {MessageBus}           messageBus\n  */\n\n\n  (0, _createClass3.default)(IdentityModule, [{\n    key: 'getIdentities',\n\n\n    /**\n    * Function to return all the identities registered within a session by a user.\n    * These identities are returned in an array containing a JSON package for each user identity.\n    * @return {Array<Identities>}         Identities\n    */\n    value: function getIdentities() {\n      var _this = this;\n      return _this.identities;\n    }\n\n    /**\n    * gets all the information from a given userURL\n    * @param  {String}  userURL     user url\n    * @return {JSON}    identity    identity bundle from the userURL\n    */\n\n  }, {\n    key: 'getIdentity',\n    value: function getIdentity(userURL) {\n      var _this = this;\n\n      for (var index in _this.identities) {\n\n        var identity = _this.identities[index];\n        if (identity.identity === userURL) {\n          return identity;\n        }\n      }\n\n      throw 'identity not found';\n    }\n  }, {\n    key: 'getIdentityOfHyperty',\n    value: function getIdentityOfHyperty(hypertyURL) {\n      var _this = this;\n\n      return new _promise2.default(function (resolve, reject) {\n        var splitURL = hypertyURL.split('://');\n        if (splitURL[0] !== 'hyperty') {\n          _this._getHypertyFromDataObject(hypertyURL).then(function (returnedHypertyURL) {\n            var userURL = _this.registry.getHypertyOwner(returnedHypertyURL);\n            if (userURL) {\n\n              for (var index in _this.identities) {\n                var identity = _this.identities[index];\n                if (identity.identity === userURL) {\n                  return resolve(identity.messageInfo);\n                }\n              }\n            } else {\n              return reject('no identity was found ');\n            }\n          });\n        } else {\n          var userURL = _this.registry.getHypertyOwner(hypertyURL);\n          if (userURL) {\n\n            for (var index in _this.identities) {\n              var identity = _this.identities[index];\n              if (identity.identity === userURL) {\n                return resolve(identity.messageInfo);\n              }\n            }\n          } else {\n            return reject('no identity was found.');\n          }\n        }\n      });\n    }\n\n    /**\n    * Function to return all the users URLs registered within a session\n    * These users URLs are returned in an array of strings.\n    * @param  {Boolean}  emailFormat (Optional)   boolean to indicate to return in email format\n    * @return {Array<String>}         users\n    */\n\n  }, {\n    key: 'getUsersIDs',\n    value: function getUsersIDs(emailFormat) {\n      var _this = this;\n      var users = [];\n\n      //if request comes with the emailFormat option, then convert url to email format\n      var converter = emailFormat ? _utils.getUserEmailFromURL : function (value) {\n        return value;\n      };\n\n      for (var index in _this.identities) {\n        var identity = _this.identities[index];\n        users.push(converter(identity.identity));\n      }\n      return users;\n    }\n\n    /**\n    * Function to return the selected Identity within a session\n    * @return {Identity}        identity         identity\n    */\n\n  }, {\n    key: 'getCurrentIdentity',\n    value: function getCurrentIdentity() {\n      var _this = this;\n      return _this.currentIdentity;\n    }\n\n    /**\n    * Function to set the current Identity with a given Identity\n    * @param {Identity}        identity         identity\n    */\n\n  }, {\n    key: 'setCurrentIdentity',\n    value: function setCurrentIdentity(identity) {\n      var _this = this;\n      _this.currentIdentity = identity;\n    }\n\n    /**\n    * Function to remove the an identity from the Identities array\n    * @param {String}    userURL      userURL\n    */\n\n  }, {\n    key: 'deleteIdentity',\n    value: function deleteIdentity(userURL) {\n      var _this = this;\n\n      for (var identity in _this.identities) {\n        if (_this.identities[identity].identity === userURL) {\n          _this.identities.splice(identity, 1);\n        }\n      }\n    }\n\n    /**\n    * Function that resolve and create the domainURL in case it is provided one. If not, resolve the default domainURL\n    * @param {String}     idpDomain     idpDomain (Optional)\n    */\n\n  }, {\n    key: '_resolveDomain',\n    value: function _resolveDomain(idpDomain) {\n      if (!idpDomain) {\n        return 'domain-idp://google.com';\n      } else {\n        return 'domain-idp://' + idpDomain;\n      }\n    }\n\n    /**\n    * Function to login a user within the session, it will start the process to obtain an Identity from a user, including the request for an identity Assertion. The function returns a promise with the token received by the idpProxy.\n    *\n    * @param  {Identifier}      identifier      identifier\n    * @param  {Scope}           scope           scope\n    * @return {Promise}         Promise         IDToken containing the user information\n    */\n\n  }, {\n    key: 'loginWithRP',\n    value: function loginWithRP(identifier, scope) {\n      var _this = this;\n\n      return new _promise2.default(function (resolve, reject) {\n\n        //TODO remove this verification and refactor this part\n        _this.currentIdentity = undefined;\n        _this.getIdentityAssertion('identifier', 'origin', 'hint', identifier).then(function (value) {\n          console.log('loginWithRP');\n          resolve(value);\n        }, function (err) {\n          console.log('loginWithRP err');\n          reject(err);\n        });\n      });\n    }\n\n    /**\n    * Function that fetch an identityAssertion from a user.\n    *\n    * @return {IdAssertion}              IdAssertion\n    */\n\n  }, {\n    key: 'getIdentityAssertion',\n    value: function getIdentityAssertion(identifier, origin, usernameHint, idpDomain) {\n      var _this = this;\n\n      return new _promise2.default(function (resolve, reject) {\n\n        if (_this.currentIdentity !== undefined) {\n          //TODO verify whether the token is still valid or not.\n          // should be needed to make further requests, to obtain a valid token\n          return resolve(_this.currentIdentity);\n        } else {\n\n          //CHECK whether is browser environment or nodejs\n          //if it is browser, then create a fake identity\n\n          try {\n            if (window) {\n              (function () {\n\n                var publicKey = void 0;\n                var userkeyPair = void 0;\n\n                //generates the RSA key pair\n                _this.crypto.generateRSAKeyPair().then(function (keyPair) {\n\n                  publicKey = btoa(keyPair.public);\n                  userkeyPair = keyPair;\n                  return _this.generateAssertion(publicKey, origin, '', userkeyPair, idpDomain);\n                }).then(function (url) {\n                  return _this.generateAssertion(publicKey, origin, url, userkeyPair, idpDomain);\n                }).then(function (value) {\n                  if (value) {\n                    resolve(value);\n                  } else {\n                    reject('Error on obtaining Identity');\n                  }\n                }).catch(function (err) {\n                  console.log(err);\n                  reject(err);\n                });\n              })();\n            }\n          } catch (error) {\n            console.log('getIdentityAssertion for nodejs');\n            var randomNumber = Math.floor(Math.random() * 10000 + 1);\n            var identityBundle = {\n              assertion: 'assertion',\n              idp: 'nodejs',\n              userProfile: {\n                avatar: 'https://lh3.googleusercontent.com/-WaCrjVMMV-Q/AAAAAAAAAAI/AAAAAAAAAAs/8OlVqCpSB9c/photo.jpg',\n                cn: 'test nodejs',\n                username: 'nodejs-' + randomNumber + '@nodejs.com',\n                userURL: 'user://nodejs.com/nodejs-' + randomNumber\n              } };\n            _this.currentIdentity = identityBundle;\n            _this.identities.push(identityBundle);\n            return resolve(identityBundle);\n          }\n        }\n      });\n    }\n\n    /**\n    * Requests the IdpProxy from a given Domain for an identityAssertion\n    *\n    * @param  {DOMString} contents     contents\n    * @param  {DOMString} origin       origin\n    * @param  {DOMString} usernameHint usernameHint\n    * @param  {JSON}      keyPair       user keyPair\n    * @return {IdAssertion}              IdAssertion\n    */\n\n  }, {\n    key: 'generateAssertion',\n    value: function generateAssertion(contents, origin, usernameHint, keyPair, idpDomain) {\n      var _this = this;\n      var domain = _this._resolveDomain(idpDomain);\n      var message = void 0;\n\n      console.log('generateAssertion');\n\n      return new _promise2.default(function (resolve, reject) {\n\n        message = { type: 'execute', to: domain, from: _this._idmURL, body: { resource: 'identity', method: 'generateAssertion', params: { contents: contents, origin: origin, usernameHint: usernameHint } } };\n\n        _this._messageBus.postMessage(message, function (res) {\n          var result = res.body.value;\n\n          if (result.loginUrl) {\n            (function () {\n\n              var win = window.open(result.loginUrl, 'openIDrequest', 'width=800, height=600');\n              if (window.cordova) {\n                win.addEventListener('loadstart', function (e) {\n                  var url = e.url;\n                  var code = /\\&code=(.+)$/.exec(url);\n                  var error = /\\&error=(.+)$/.exec(url);\n\n                  if (code || error) {\n                    win.close();\n                    resolve(url);\n                  }\n                });\n              } else {\n                (function () {\n                  var pollTimer = setInterval(function () {\n                    try {\n                      if (win.closed) {\n                        reject('Some error occured when trying to get identity.');\n                        clearInterval(pollTimer);\n                      }\n\n                      if (win.document.URL.indexOf('id_token') !== -1 || win.document.URL.indexOf(location.origin) !== -1) {\n                        window.clearInterval(pollTimer);\n                        var url = win.document.URL;\n\n                        win.close();\n                        resolve(url);\n                      }\n                    } catch (e) {\n                      //console.log(e);\n                    }\n                  }, 500);\n                })();\n              }\n            })();\n          } else if (result) {\n\n            var assertionParsed = JSON.parse(atob(result.assertion));\n            var idToken = void 0;\n\n            //TODO remove the verification and remove the tokenIDJSON from the google idpProxy;\n            if (assertionParsed.tokenIDJSON) {\n              idToken = assertionParsed.tokenIDJSON;\n            } else {\n              idToken = assertionParsed;\n            }\n\n            if (idToken) {\n              result.identity = (0, _utils.getUserURLFromEmail)(idToken.email);\n\n              _this.identity.addIdentity(result);\n\n              // check if exists any infoToken in the result received\n              var infoToken = result.infoToken ? result.infoToken : {};\n              var userProfileBundle = { username: idToken.email, cn: idToken.name, avatar: infoToken.picture, locale: infoToken.locale, userURL: (0, _utils.getUserURLFromEmail)(idToken.email) };\n\n              //creation of a new JSON with the identity to send via messages\n              var newIdentity = { userProfile: userProfileBundle, idp: result.idp.domain, assertion: result.assertion };\n              result.messageInfo = newIdentity;\n              result.keyPair = keyPair;\n\n              _this.currentIdentity = newIdentity;\n              _this.identities.push(result);\n              resolve(newIdentity);\n            }\n          } else {\n            reject('error on obtaining identity information');\n          }\n        });\n      });\n    }\n\n    /**\n    * OTHER USER'S IDENTITY\n    */\n\n    /**\n    * Requests the IdpProxy from a given Domain to validate an IdentityAssertion\n    * Returns a promise with the result from the validation.\n    * @param  {DOMString} assertion\n    * @param  {DOMString} origin       origin\n    * @return {Promise}         Promise         promise with the result from the validation\n    */\n\n  }, {\n    key: 'validateAssertion',\n    value: function validateAssertion(assertion, origin, idpDomain) {\n      var _this = this;\n\n      var domain = _this._resolveDomain(idpDomain);\n\n      var message = { type: 'EXECUTE', to: domain, from: _this._idmURL, body: { resource: 'identity', method: 'validateAssertion',\n          params: { assertion: assertion, origin: origin } } };\n\n      return new _promise2.default(function (resolve, reject) {\n        _this._messageBus.postMessage(message, function (result) {\n          if (result.body.code === 200) {\n            resolve(result.body.value);\n          } else {\n            reject('error', result.body.code);\n          }\n        });\n      });\n    }\n  }, {\n    key: 'encryptMessage',\n    value: function encryptMessage(message) {\n      var _this = this;\n\n      console.log('encrypt message ');\n      console.log('message.to', message.to);\n\n      return new _promise2.default(function (resolve, reject) {\n        var isHandShakeType = message.type === 'handshake';\n\n        //if is not to apply encryption, then returns resolve\n        if (!_this.isToUseEncryption && !isHandShakeType) {\n          console.log('encryption disabled');\n          return resolve(message);\n        }\n\n        //TODO remove this logic and move it to a util function\n        var splitedToURL = message.to.split('/');\n        var dataObjectURL = splitedToURL[0] + '//' + splitedToURL[2] + '/' + splitedToURL[3];\n        if (splitedToURL.length > 6) {\n          dataObjectURL = splitedToURL[0] + '//' + splitedToURL[2] + '/' + splitedToURL[3] + '/' + splitedToURL[4];\n        }\n\n        var isToDataObject = (0, _utils.isDataObjectURL)(dataObjectURL);\n        var isFromHyperty = (0, _utils.divideURL)(message.from).type === 'hyperty';\n        var isToHyperty = (0, _utils.divideURL)(message.to).type === 'hyperty';\n\n        if (isFromHyperty && isToHyperty) {\n          var userURL = _this._registry.getHypertyOwner(message.from);\n          if (userURL) {\n            (function () {\n\n              // check if exists any keys between two users\n              var chatKeys = _this.chatKeys[message.from + '<->' + message.to];\n              if (!chatKeys) {\n                chatKeys = _this._newChatCrypto(message, userURL);\n                console.log('createChatKey encrypt', message.from + message.to);\n                _this.chatKeys[message.from + '<->' + message.to] = chatKeys;\n                message.body.handshakePhase = 'startHandShake';\n              }\n\n              if (chatKeys.authenticated && !isHandShakeType) {\n                (function () {\n\n                  var iv = _this.crypto.generateIV();\n                  _this.crypto.encryptAES(chatKeys.keys.hypertyFromSessionKey, message.body.value, iv).then(function (encryptedValue) {\n\n                    var filteredMessage = _this._filterMessageToHash(message, message.body.value + iv, chatKeys.hypertyFrom.messageInfo);\n\n                    _this.crypto.hashHMAC(chatKeys.keys.hypertyFromHashKey, filteredMessage).then(function (hash) {\n                      //console.log('result of hash ', hash);\n                      var value = { iv: _this.crypto.encode(iv), value: _this.crypto.encode(encryptedValue), hash: _this.crypto.encode(hash) };\n                      message.body.value = btoa((0, _stringify2.default)(value));\n\n                      resolve(message);\n                    });\n                  });\n\n                  // if is a handshake message, just resolve it\n                })();\n              } else if (isHandShakeType) {\n                resolve(message);\n\n                // else, starts a new handshake protocol\n              } else {\n                _this._doHandShakePhase(message, chatKeys).then(function (value) {\n                  _this.chatKeys[message.from + '<->' + message.to] = value.chatKeys;\n\n                  _this._messageBus.postMessage(value.message);\n                  reject('encrypt handshake protocol phase ');\n                });\n              }\n            })();\n          }\n\n          //if from hyperty to a dataObjectURL\n        } else if (isFromHyperty && isToDataObject) {\n          (function () {\n            console.log('dataObject value to encrypt: ', message.body.value);\n\n            var dataObjectKey = _this.dataObjectSessionKeys[dataObjectURL];\n\n            //if no key exists, create a new one if is the reporter of dataObject\n            if (!dataObjectKey) {\n              var isHypertyReporter = _this.registry.getReporterURLSynchonous(dataObjectURL);\n\n              // if the hyperty is the reporter of the dataObject then generates a session key\n              if (isHypertyReporter && isHypertyReporter === message.from) {\n\n                var sessionKey = _this.crypto.generateRandom();\n                _this.dataObjectSessionKeys[dataObjectURL] = { sessionKey: sessionKey, isToEncrypt: true };\n\n                dataObjectKey = _this.dataObjectSessionKeys[dataObjectURL];\n              }\n            }\n\n            //check if there is already a session key for the chat room\n            if (dataObjectKey) {\n\n              // and if is to apply encryption, encrypt the messages\n              if (dataObjectKey.isToEncrypt) {\n                (function () {\n                  var iv = _this.crypto.generateIV();\n\n                  _this.crypto.encryptAES(dataObjectKey.sessionKey, _this.crypto.encode((0, _stringify2.default)(message.body.value)), iv).then(function (encryptedValue) {\n\n                    var filteredMessage = _this._filterMessageToHash(message, message.body.value + iv, dataObjectKey.sessionKey);\n\n                    _this.crypto.hashHMAC(dataObjectKey.sessionKey, filteredMessage).then(function (hash) {\n                      //console.log('hash ', hash);\n\n                      var newValue = btoa((0, _stringify2.default)({ value: _this.crypto.encode(encryptedValue), iv: _this.crypto.encode(iv), hash: _this.crypto.encode(hash) }));\n\n                      message.body.value = newValue;\n                      resolve(message);\n                    });\n                  });\n\n                  // if not, just send the message\n                })();\n              } else {\n                resolve(message);\n              }\n\n              // start the generation of a new session Key\n            } else {\n              reject('failed to decrypt message');\n            }\n          })();\n        }\n      });\n    }\n  }, {\n    key: 'decryptMessage',\n    value: function decryptMessage(message) {\n      var _this = this;\n\n      console.log('decrypt message ');\n\n      return new _promise2.default(function (resolve, reject) {\n        var isHandShakeType = message.type === 'handshake';\n\n        //if is not to apply encryption, then returns resolve\n        if (!_this.isToUseEncryption && !isHandShakeType) {\n          console.log('decryption disabled');\n          return resolve(message);\n        }\n\n        //TODO remove this logic and move it to a util function\n\n        var splitedToURL = message.to.split('/');\n        var dataObjectURL = splitedToURL[0] + '//' + splitedToURL[2] + '/' + splitedToURL[3];\n        if (splitedToURL.length > 6) {\n          dataObjectURL = splitedToURL[0] + '//' + splitedToURL[2] + '/' + splitedToURL[3] + '/' + splitedToURL[4];\n        }\n\n        var isToDataObject = (0, _utils.isDataObjectURL)(dataObjectURL);\n        var isFromHyperty = (0, _utils.divideURL)(message.from).type === 'hyperty';\n        var isToHyperty = (0, _utils.divideURL)(message.to).type === 'hyperty';\n\n        //is is hyperty to hyperty communication\n        if (isFromHyperty && isToHyperty) {\n          //console.log('decrypt hyperty to hyperty');\n          var userURL = _this._registry.getHypertyOwner(message.to);\n          if (userURL) {\n            (function () {\n\n              var chatKeys = _this.chatKeys[message.to + '<->' + message.from];\n              if (!chatKeys) {\n                chatKeys = _this._newChatCrypto(message, userURL, 'decrypt');\n                _this.chatKeys[message.to + '<->' + message.from] = chatKeys;\n              }\n\n              if (chatKeys.authenticated && !isHandShakeType) {\n                (function () {\n                  var value = JSON.parse(atob(message.body.value));\n                  var iv = _this.crypto.decode(value.iv);\n                  var data = _this.crypto.decode(value.value);\n                  var hash = _this.crypto.decode(value.hash);\n                  _this.crypto.decryptAES(chatKeys.keys.hypertyToSessionKey, data, iv).then(function (decryptedData) {\n                    console.log('decrypted value ', decryptedData);\n                    message.body.value = decryptedData;\n\n                    var filteredMessage = _this._filterMessageToHash(message, decryptedData + iv);\n\n                    _this.crypto.verifyHMAC(chatKeys.keys.hypertyToHashKey, filteredMessage, hash).then(function (result) {\n                      //console.log('result of hash verification! ', result);\n                      resolve(message);\n                    });\n                  });\n                })();\n              } else if (isHandShakeType) {\n                _this._doHandShakePhase(message, chatKeys).then(function (value) {\n\n                  //if it was started by doMutualAuthentication then ends the protocol\n                  if (value === 'handShakeEnd') {\n                    reject('decrypt handshake protocol phase ');\n\n                    // if was started by a message, then resend that message\n                  } else {\n                    _this.chatKeys[message.to + '<->' + message.from] = value.chatKeys;\n                    _this._messageBus.postMessage(value.message);\n                    reject('decrypt handshake protocol phase ');\n                  }\n                });\n              } else {\n                reject('wrong message do decrypt');\n              }\n            })();\n          } else {\n            reject('error on decrypt message');\n          }\n\n          //if from hyperty to a dataObjectURL\n        } else if (isFromHyperty && isToDataObject) {\n          (function () {\n            console.log('dataObject value to decrypt: ', message.body);\n\n            var dataObjectKey = _this.dataObjectSessionKeys[dataObjectURL];\n\n            if (dataObjectKey) {\n\n              //check if is to apply encryption\n              if (dataObjectKey.isToEncrypt) {\n                (function () {\n                  var parsedValue = JSON.parse(atob(message.body.value));\n                  var iv = _this.crypto.decode(parsedValue.iv);\n                  var encryptedValue = _this.crypto.decode(parsedValue.value);\n                  var hash = _this.crypto.decode(parsedValue.hash);\n\n                  _this.crypto.decryptAES(dataObjectKey.sessionKey, encryptedValue, iv).then(function (decryptedValue) {\n                    var parsedValue = JSON.parse(atob(decryptedValue));\n                    console.log('decrypted Value,', parsedValue);\n                    message.body.value = parsedValue;\n\n                    var filteredMessage = _this._filterMessageToHash(message, parsedValue + iv);\n\n                    _this.crypto.verifyHMAC(dataObjectKey.sessionKey, filteredMessage, hash).then(function (result) {\n                      //console.log('result of hash verification! ', result);\n                      resolve(message);\n                    });\n                  });\n\n                  //if not, just return the message\n                })();\n              } else {\n                resolve(message);\n              }\n            } else {\n              resolve(message);\n\n              //reject('no sessionKey for chat room found');\n            }\n          })();\n        } else {\n          reject('wrong message to decrypt');\n        }\n      });\n    }\n  }, {\n    key: 'doMutualAuthentication',\n    value: function doMutualAuthentication(sender, receiver) {\n      console.log('doMutualAuthentication: ', sender, receiver);\n      var _this = this;\n      var dataObjectURL = void 0;\n\n      // check if the sender is a dataObject and if so stores that value\n      var reporterURL = _this.registry.getReporterURLSynchonous(sender);\n      if (reporterURL) {\n        dataObjectURL = sender;\n        sender = reporterURL;\n      }\n\n      var msg = {\n        to: receiver,\n        from: sender,\n        callback: undefined,\n        body: { handshakePhase: 'startHandShake', ignore: 'ignoreMessage' }\n      };\n\n      return new _promise2.default(function (resolve, reject) {\n\n        if (!sender || !receiver) {\n          return reject('sender or receiver missing on doMutualAuthentication');\n        }\n\n        var chatKeys = _this.chatKeys[sender + '<->' + receiver];\n        var userURL = _this._registry.getHypertyOwner(sender);\n\n        if (userURL) {\n\n          if (!chatKeys) {\n            // callback to resolve when finish the mutual authentication\n            var resolved = function resolved(value) {\n              console.log('callback value:', value);\n              resolve(value);\n            };\n            msg.callback = resolved;\n            msg.dataObjectURL = dataObjectURL;\n\n            chatKeys = _this._newChatCrypto(msg, userURL);\n            _this.chatKeys[sender + '<->' + receiver] = chatKeys;\n          }\n\n          if (chatKeys.authenticated) {\n\n            var startSessionKeyExchange = {\n              to: sender,\n              from: receiver\n            };\n            chatKeys.dataObjectURL = dataObjectURL;\n            _this._sendReporterSessionKey(startSessionKeyExchange, chatKeys).then(function (value) {\n\n              _this._messageBus.postMessage(value.message);\n              resolve('exchange of chat sessionKey initiated');\n            });\n          } else {\n\n            _this._doHandShakePhase(msg, chatKeys);\n          }\n        } else {\n          reject('error on doMutualAuthentication');\n        }\n      });\n    }\n  }, {\n    key: '_doHandShakePhase',\n    value: function _doHandShakePhase(message, chatKeys) {\n      var _this = this;\n\n      //console.log('handshakeType');\n\n      return new _promise2.default(function (resolve, reject) {\n\n        var handshakeType = message.body.handshakePhase;\n        var iv = void 0;\n        var hash = void 0;\n        var value = {};\n        var filteredMessage = void 0;\n\n        (function () {\n          switch (handshakeType) {\n\n            case 'startHandShake':\n              chatKeys.keys.fromRandom = _this.crypto.generateRandom();\n\n              var startHandShakeMsg = {\n                type: 'handshake',\n                to: message.to,\n                from: message.from,\n                body: {\n                  handshakePhase: 'senderHello',\n                  value: _this.crypto.encode(chatKeys.keys.fromRandom)\n                }\n              };\n              chatKeys.handshakeHistory.senderHello = _this._filterMessageToHash(startHandShakeMsg, undefined, chatKeys.hypertyFrom.messageInfo);\n\n              // check if was the encrypt function or the mutual authentication that request the\n              // start of the handShakePhase.\n              if (chatKeys.initialMessage) {\n                resolve({ message: startHandShakeMsg, chatKeys: chatKeys });\n              } else {\n                _this.chatKeys[message.from + '<->' + message.to] = chatKeys;\n                _this._messageBus.postMessage(startHandShakeMsg);\n              }\n\n              break;\n            case 'senderHello':\n\n              console.log('senderHello');\n              chatKeys.handshakeHistory.senderHello = _this._filterMessageToHash(message);\n              chatKeys.keys.fromRandom = _this.crypto.decode(message.body.value);\n              chatKeys.keys.toRandom = _this.crypto.generateRandom();\n\n              var senderHelloMsg = {\n                type: 'handshake',\n                to: message.from,\n                from: message.to,\n                body: {\n                  handshakePhase: 'receiverHello',\n                  value: _this.crypto.encode(chatKeys.keys.toRandom)\n                }\n              };\n              chatKeys.handshakeHistory.receiverHello = _this._filterMessageToHash(senderHelloMsg, undefined, chatKeys.hypertyFrom.messageInfo);\n              resolve({ message: senderHelloMsg, chatKeys: chatKeys });\n\n              break;\n            case 'receiverHello':\n\n              console.log('receiverHello');\n              chatKeys.handshakeHistory.receiverHello = _this._filterMessageToHash(message);\n\n              _this.validateAssertion(message.body.identity.assertion).then(function (value) {\n\n                var receiverPublicKey = _this.crypto.decode(value.contents.nonce);\n                var premasterSecret = _this.crypto.generatePMS();\n                var toRandom = message.body.value;\n                chatKeys.hypertyTo.assertion = message.body.identity.assertion;\n                chatKeys.hypertyTo.publicKey = receiverPublicKey;\n                chatKeys.hypertyTo.userID = value.contents.email;\n                chatKeys.keys.toRandom = _this.crypto.decode(toRandom);\n                chatKeys.keys.premasterKey = premasterSecret;\n\n                var concatKey = _this.crypto.concatPMSwithRandoms(premasterSecret, chatKeys.keys.toRandom, chatKeys.keys.fromRandom);\n\n                return _this.crypto.generateMasterSecret(concatKey, 'messageHistoric' + chatKeys.keys.toRandom + chatKeys.keys.fromRandom);\n\n                //generate the master key\n              }).then(function (masterKey) {\n                chatKeys.keys.masterKey = masterKey;\n\n                return _this.crypto.generateKeys(masterKey, 'key expansion' + chatKeys.keys.toRandom + chatKeys.keys.fromRandom);\n\n                //generate the symmetric and hash keys\n              }).then(function (keys) {\n\n                chatKeys.keys.hypertyToSessionKey = new Uint8Array(keys[0]);\n                chatKeys.keys.hypertyFromSessionKey = new Uint8Array(keys[1]);\n                chatKeys.keys.hypertyToHashKey = new Uint8Array(keys[2]);\n                chatKeys.keys.hypertyFromHashKey = new Uint8Array(keys[3]);\n                iv = _this.crypto.generateIV();\n                value.iv = _this.crypto.encode(iv);\n\n                var messageStructure = {\n                  type: 'handshake',\n                  to: message.from,\n                  from: message.to,\n                  body: {\n                    handshakePhase: 'senderCertificate'\n                  }\n                };\n\n                // hash the value and the iv\n                filteredMessage = _this._filterMessageToHash(messageStructure, 'ok' + iv, chatKeys.hypertyFrom.messageInfo);\n                return _this.crypto.hashHMAC(chatKeys.keys.hypertyFromHashKey, filteredMessage);\n              }).then(function (hash) {\n                value.hash = _this.crypto.encode(hash);\n\n                //encrypt the data\n                return _this.crypto.encryptAES(chatKeys.keys.hypertyFromSessionKey, 'ok', iv);\n              }).then(function (encryptedData) {\n                value.symetricEncryption = _this.crypto.encode(encryptedData);\n\n                return _this.crypto.encryptRSA(chatKeys.hypertyTo.publicKey, chatKeys.keys.premasterKey);\n              }).then(function (encryptedValue) {\n\n                value.assymetricEncryption = _this.crypto.encode(encryptedValue);\n\n                var messageStructure = {\n                  type: 'handshake',\n                  to: message.from,\n                  from: message.to,\n                  body: {\n                    handshakePhase: 'senderCertificate'\n                  }\n                };\n\n                var messageToHash = _this._filterMessageToHash(messageStructure, chatKeys.keys.premasterKey, chatKeys.hypertyFrom.messageInfo);\n\n                return _this.crypto.signRSA(chatKeys.hypertyFrom.privateKey, (0, _stringify2.default)(chatKeys.handshakeHistory) + (0, _stringify2.default)(messageToHash));\n              }).then(function (signature) {\n\n                value.signature = _this.crypto.encode(signature);\n\n                var receiverHelloMsg = {\n                  type: 'handshake',\n                  to: message.from,\n                  from: message.to,\n                  body: {\n                    handshakePhase: 'senderCertificate',\n                    value: btoa((0, _stringify2.default)(value))\n                  }\n                };\n                chatKeys.handshakeHistory.senderCertificate = _this._filterMessageToHash(receiverHelloMsg, 'ok' + iv, chatKeys.hypertyFrom.messageInfo);\n\n                resolve({ message: receiverHelloMsg, chatKeys: chatKeys });\n              }, function (error) {\n                return reject(error);\n              });\n\n              break;\n            case 'senderCertificate':\n\n              console.log('senderCertificate');\n              var receivedValue = JSON.parse(atob(message.body.value));\n\n              _this.validateAssertion(message.body.identity.assertion).then(function (value) {\n                var encryptedPMS = _this.crypto.decode(receivedValue.assymetricEncryption);\n                var senderPublicKey = _this.crypto.decode(value.contents.nonce);\n                chatKeys.hypertyTo.assertion = message.body.identity.assertion;\n                chatKeys.hypertyTo.publicKey = senderPublicKey;\n                chatKeys.hypertyTo.userID = value.contents.email;\n\n                return _this.crypto.decryptRSA(chatKeys.hypertyFrom.privateKey, encryptedPMS);\n              }, function (error) {\n                console.log(error);\n                reject('Error during authentication of identity');\n\n                //obtain the PremasterKey using the private key\n              }).then(function (pms) {\n\n                chatKeys.keys.premasterKey = new Uint8Array(pms);\n\n                var signature = _this.crypto.decode(receivedValue.signature);\n\n                var receivedmsgToHash = _this._filterMessageToHash(message, chatKeys.keys.premasterKey);\n\n                return _this.crypto.verifyRSA(chatKeys.hypertyTo.publicKey, (0, _stringify2.default)(chatKeys.handshakeHistory) + (0, _stringify2.default)(receivedmsgToHash), signature);\n\n                // validates the signature received\n              }).then(function (signValidationResult) {\n\n                console.log('signature validation result ', signValidationResult);\n                var concatKey = _this.crypto.concatPMSwithRandoms(chatKeys.keys.premasterKey, chatKeys.keys.toRandom, chatKeys.keys.fromRandom);\n\n                return _this.crypto.generateMasterSecret(concatKey, 'messageHistoric' + chatKeys.keys.toRandom + chatKeys.keys.fromRandom);\n\n                // generates the master keys from the Premaster key and the randoms\n              }).then(function (masterKey) {\n                chatKeys.keys.masterKey = masterKey;\n\n                return _this.crypto.generateKeys(masterKey, 'key expansion' + chatKeys.keys.toRandom + chatKeys.keys.fromRandom);\n\n                // generates the symmetric keys to be used in the symmetric encryption\n              }).then(function (keys) {\n                chatKeys.keys.hypertyFromSessionKey = new Uint8Array(keys[0]);\n                chatKeys.keys.hypertyToSessionKey = new Uint8Array(keys[1]);\n                chatKeys.keys.hypertyFromHashKey = new Uint8Array(keys[2]);\n                chatKeys.keys.hypertyToHashKey = new Uint8Array(keys[3]);\n                iv = _this.crypto.decode(receivedValue.iv);\n                var data = _this.crypto.decode(receivedValue.symetricEncryption);\n\n                return _this.crypto.decryptAES(chatKeys.keys.hypertyToSessionKey, data, iv);\n              }).then(function (decryptedData) {\n                //console.log('decryptedData', decryptedData);\n\n                chatKeys.handshakeHistory.senderCertificate = _this._filterMessageToHash(message, decryptedData + iv);\n\n                var hashReceived = _this.crypto.decode(receivedValue.hash);\n\n                filteredMessage = _this._filterMessageToHash(message, decryptedData + iv);\n\n                return _this.crypto.verifyHMAC(chatKeys.keys.hypertyToHashKey, filteredMessage, hashReceived);\n              }).then(function (verifiedHash) {\n\n                //console.log('result of hash verification ', verifiedHash);\n                var receiverFinishedMessage = {\n                  type: 'handshake',\n                  to: message.from,\n                  from: message.to,\n                  body: {\n                    handshakePhase: 'receiverFinishedMessage'\n                  }\n                };\n                iv = _this.crypto.generateIV();\n                value.iv = _this.crypto.encode(iv);\n\n                filteredMessage = _this._filterMessageToHash(receiverFinishedMessage, 'ok!' + iv, chatKeys.hypertyFrom.messageInfo);\n\n                return _this.crypto.hashHMAC(chatKeys.keys.hypertyFromHashKey, receiverFinishedMessage);\n              }).then(function (hash) {\n\n                value.hash = _this.crypto.encode(hash);\n                return _this.crypto.encryptAES(chatKeys.keys.hypertyFromSessionKey, 'ok!', iv);\n              }).then(function (encryptedValue) {\n                value.value = _this.crypto.encode(encryptedValue);\n                var receiverFinishedMessage = {\n                  type: 'handshake',\n                  to: message.from,\n                  from: message.to,\n                  body: {\n                    handshakePhase: 'receiverFinishedMessage',\n                    value: btoa((0, _stringify2.default)(value))\n                  }\n                };\n\n                chatKeys.handshakeHistory.receiverFinishedMessage = _this._filterMessageToHash(receiverFinishedMessage, 'ok!' + iv, chatKeys.hypertyFrom.messageInfo);\n                chatKeys.authenticated = true;\n                resolve({ message: receiverFinishedMessage, chatKeys: chatKeys });\n              });\n\n              break;\n            case 'receiverFinishedMessage':\n\n              console.log('receiverFinishedMessage');\n              chatKeys.authenticated = true;\n\n              value = JSON.parse(atob(message.body.value));\n\n              iv = _this.crypto.decode(value.iv);\n              var data = _this.crypto.decode(value.value);\n              hash = _this.crypto.decode(value.hash);\n\n              _this.crypto.decryptAES(chatKeys.keys.hypertyToSessionKey, data, iv).then(function (decryptedData) {\n                console.log('decryptedData', decryptedData);\n                chatKeys.handshakeHistory.receiverFinishedMessage = _this._filterMessageToHash(message, decryptedData + iv);\n\n                var filteredMessage = _this._filterMessageToHash(message, data + iv);\n                _this.crypto.verifyHMAC(chatKeys.keys.hypertyToHashKey, filteredMessage, hash).then(function (result) {\n                  console.log('hash result', result);\n\n                  // check if there was an initial message that was blocked and send it\n                  if (chatKeys.initialMessage) {\n                    var initialMessage = {\n                      type: 'create',\n                      to: message.from,\n                      from: message.to,\n                      body: {\n                        value: chatKeys.initialMessage.body.value\n                      }\n                    };\n\n                    resolve({ message: initialMessage, chatKeys: chatKeys });\n\n                    //sends the sessionKey to the subscriber hyperty\n                  } else {\n                    _this._sendReporterSessionKey(message, chatKeys).then(function (value) {\n                      resolve(value);\n                    });\n                  }\n                });\n              });\n\n              break;\n            case 'reporterSessionKey':\n\n              console.log('reporterSessionKey');\n\n              var valueIVandHash = JSON.parse(atob(message.body.value));\n              hash = _this.crypto.decode(valueIVandHash.hash);\n              iv = _this.crypto.decode(valueIVandHash.iv);\n              var encryptedValue = _this.crypto.decode(valueIVandHash.value);\n              var parsedValue = void 0;\n              var sessionKey = void 0;\n              var dataObjectURL = void 0;\n              var receiverAcknowledgeMsg = void 0;\n\n              _this.crypto.decryptAES(chatKeys.keys.hypertyToSessionKey, encryptedValue, iv).then(function (decryptedValue) {\n\n                parsedValue = JSON.parse(decryptedValue);\n                sessionKey = _this.crypto.decode(parsedValue.value);\n                dataObjectURL = parsedValue.dataObjectURL;\n\n                var messageToHash = _this._filterMessageToHash(message, decryptedValue + iv);\n\n                return _this.crypto.verifyHMAC(chatKeys.keys.hypertyToHashKey, messageToHash, hash);\n              }).then(function (hashResult) {\n\n                //console.log('hash successfully validated ', hashResult);\n\n                _this.dataObjectSessionKeys[dataObjectURL] = { sessionKey: sessionKey, isToEncrypt: true };\n\n                iv = _this.crypto.generateIV();\n                value.iv = _this.crypto.encode(iv);\n\n                return _this.crypto.encryptAES(chatKeys.keys.hypertyFromSessionKey, 'ok!!', iv);\n              }).then(function (encryptedValue) {\n\n                receiverAcknowledgeMsg = {\n                  type: 'handshake',\n                  to: message.from,\n                  from: message.to,\n                  body: {\n                    handshakePhase: 'receiverAcknowledge'\n                  }\n                };\n\n                value.value = _this.crypto.encode(encryptedValue);\n                var messageToHash = _this._filterMessageToHash(receiverAcknowledgeMsg, 'ok!!' + iv, chatKeys.hypertyFrom.messageInfo);\n\n                return _this.crypto.hashHMAC(chatKeys.keys.hypertyFromHashKey, messageToHash);\n              }).then(function (hashedMessage) {\n                var finalValue = btoa((0, _stringify2.default)({ value: value.value, hash: _this.crypto.encode(hashedMessage), iv: value.iv }));\n\n                receiverAcknowledgeMsg.body.value = finalValue;\n                resolve({ message: receiverAcknowledgeMsg, chatKeys: chatKeys });\n              });\n\n              break;\n            case 'receiverAcknowledge':\n\n              console.log('receiverAcknowledge');\n\n              var receivedvalueIVandHash = JSON.parse(atob(message.body.value));\n              var receivedHash = _this.crypto.decode(receivedvalueIVandHash.hash);\n              iv = _this.crypto.decode(receivedvalueIVandHash.iv);\n              var receivedEncryptedValue = _this.crypto.decode(receivedvalueIVandHash.value);\n\n              _this.crypto.decryptAES(chatKeys.keys.hypertyToSessionKey, receivedEncryptedValue, iv).then(function (decryptedValue) {\n\n                var filteredMessage = _this._filterMessageToHash(message, decryptedValue + iv);\n                return _this.crypto.verifyHMAC(chatKeys.keys.hypertyToHashKey, filteredMessage, receivedHash);\n              }).then(function (hashResult) {\n                //console.log('hashResult ', hashResult);\n\n                var callback = chatKeys.callback;\n\n                if (callback) {\n                  callback('handShakeEnd');\n                }\n                resolve('handShakeEnd');\n              });\n\n              break;\n            default:\n              reject(message);\n          }\n        })();\n      });\n    }\n  }, {\n    key: '_sendReporterSessionKey',\n    value: function _sendReporterSessionKey(message, chatKeys) {\n      var _this = this;\n      var sessionKeyBundle = _this.dataObjectSessionKeys[chatKeys.dataObjectURL];\n      var reporterSessionKeyMsg = void 0;\n      var valueToEncrypt = void 0;\n      var sessionKey = void 0;\n      var iv = void 0;\n      var value = {};\n\n      return new _promise2.default(function (resolve, reject) {\n\n        //if there is not yet a session Key, generates a new one\n        if (!sessionKeyBundle) {\n          sessionKey = _this.crypto.generateRandom();\n          _this.dataObjectSessionKeys[chatKeys.dataObjectURL] = { sessionKey: sessionKey, isToEncrypt: true };\n        } else {\n          sessionKey = sessionKeyBundle.sessionKey;\n        }\n\n        valueToEncrypt = (0, _stringify2.default)({ value: _this.crypto.encode(sessionKey), dataObjectURL: chatKeys.dataObjectURL });\n\n        iv = _this.crypto.generateIV();\n        value.iv = _this.crypto.encode(iv);\n        _this.crypto.encryptAES(chatKeys.keys.hypertyFromSessionKey, valueToEncrypt, iv).then(function (encryptedValue) {\n\n          reporterSessionKeyMsg = {\n            type: 'handshake',\n            to: message.from,\n            from: message.to,\n            body: {\n              handshakePhase: 'reporterSessionKey',\n              value: _this.crypto.encode(encryptedValue)\n            }\n          };\n\n          var filteredMessage = _this._filterMessageToHash(reporterSessionKeyMsg, valueToEncrypt + iv, chatKeys.hypertyFrom.messageInfo);\n\n          return _this.crypto.hashHMAC(chatKeys.keys.hypertyFromHashKey, filteredMessage);\n        }).then(function (hashedMessage) {\n\n          var valueWithHash = btoa((0, _stringify2.default)({ value: reporterSessionKeyMsg.body.value, hash: _this.crypto.encode(hashedMessage), iv: value.iv }));\n\n          reporterSessionKeyMsg.body.value = valueWithHash;\n          resolve({ message: reporterSessionKeyMsg, chatKeys: chatKeys });\n        });\n      });\n    }\n\n    /**\n    * returns the reporter associated to the dataObject URL\n    * @param   {String}   dataObjectURL         dataObject url\n    * @return   {String}  reporter              dataObject url reporter\n    */\n\n  }, {\n    key: '_getHypertyFromDataObject',\n    value: function _getHypertyFromDataObject(dataObjectURL) {\n      var _this = this;\n\n      return new _promise2.default(function (resolve, reject) {\n\n        //TODO remove this logic and move it to a util function\n\n        var splitedURL = dataObjectURL.split('/');\n        var finalURL = splitedURL[0] + '//' + splitedURL[2] + '/' + splitedURL[3];\n        if (splitedURL.length > 6) {\n          finalURL = splitedURL[0] + '//' + splitedURL[2] + '/' + splitedURL[3] + '/' + splitedURL[4];\n        }\n\n        // check if is the creator of the hyperty\n        var reporterURL = _this.registry.getReporterURLSynchonous(finalURL);\n\n        if (reporterURL) {\n          resolve(reporterURL);\n        } else {\n          // check if there is already an association from an hypertyURL to the dataObject\n          var storedReporterURL = _this.dataObjectsIdentity[finalURL];\n\n          if (storedReporterURL) {\n            resolve(storedReporterURL);\n          } else {\n            // check if there is any hyperty that subscribed the dataObjectURL\n            var subscriberHyperty = _this.registry.getDataObjectSubscriberHyperty(dataObjectURL);\n\n            if (subscriberHyperty) {\n              resolve(subscriberHyperty);\n            } else {\n\n              // search in domain registry for the hyperty associated to the dataObject\n              // search in case is a subscriber who wants to know the reporter\n              _this.registry.discoverDataObjectPerURL(finalURL, splitedURL[2]).then(function (dataObject) {\n                _this.dataObjectsIdentity[finalURL] = dataObject.reporter;\n                resolve(dataObject.reporter);\n              }, function (err) {\n                reject(err);\n              });\n            }\n          }\n        }\n      });\n    }\n\n    /**\n    * filter the messages to hash, by removing some fields not generated by the runtime core\n    * @param {Message}  message                     message\n    * @param {String}  decryptedValue (Optional)    value from body.value in case it originally comes encrypted\n    * @param {JSON}  identity(Optional)    add the hyperty identity associated in case is not added to the initial message\n    * @return {Message}  new message filtered\n    */\n\n  }, {\n    key: '_filterMessageToHash',\n    value: function _filterMessageToHash(message, decryptedValue, identity) {\n\n      return {\n        type: message.type,\n        from: message.from,\n        to: message.to,\n        body: {\n          identity: identity || message.body.identity,\n          value: decryptedValue || message.body.value,\n          handshakePhase: message.body.handshakePhase\n        }\n      };\n    }\n\n    /**\n    * generates the initial structure for the keys between two users\n    * @param {JSON}    message              initial message that triggers the mutual authentication\n    * @param {String}  userURL              userURL\n    * @param {boolean} receiver(Optional)  indicates if is the sender or the receiver that creates a new chat crypto\n    * @return {JSON} newChatCrypto  new JSON structure for the chat crypto\n    */\n\n  }, {\n    key: '_newChatCrypto',\n    value: function _newChatCrypto(message, userURL, receiver) {\n      var _this = this;\n\n      //check whether is the sender or the receiver to create a new chatCrypto\n      //to mantain consistency on the keys if the receiver create a new chatCrypto,\n      //then invert the fields\n      var from = receiver ? message.to : message.from;\n      var to = receiver ? message.from : message.to;\n\n      var userInfo = _this.getIdentity(userURL);\n\n      var newChatCrypto = {\n        hypertyFrom: {\n          hyperty: from,\n          userID: userInfo.messageInfo.userProfile.username,\n          privateKey: userInfo.keyPair.private,\n          publicKey: userInfo.keyPair.public,\n          assertion: userInfo.assertion,\n          messageInfo: userInfo.messageInfo\n        },\n        hypertyTo: {\n          hyperty: to,\n          userID: undefined,\n          publicKey: undefined,\n          assertion: undefined\n        },\n        keys: {\n          hypertyToSessionKey: undefined,\n          hypertyFromSessionKey: undefined,\n          hypertyToHashKey: undefined,\n          hypertyFromHashKey: undefined,\n          toRandom: undefined,\n          fromRandom: undefined,\n          premasterKey: undefined,\n          masterKey: undefined\n        },\n        handshakeHistory: {\n          senderHello: undefined,\n          receiverHello: undefined,\n          senderCertificate: undefined,\n          receiverFinishedMessage: undefined\n        },\n        initialMessage: message.body.ignore ? undefined : message,\n        callback: message.callback,\n        authenticated: false,\n        dataObjectURL: message.dataObjectURL\n      };\n\n      return newChatCrypto;\n    }\n  }, {\n    key: 'messageBus',\n    get: function get() {\n      var _this = this;\n      return _this._messageBus;\n    }\n\n    /**\n    * Set the messageBus in this Registry\n    * @param {MessageBus}           messageBus\n    */\n    ,\n    set: function set(messageBus) {\n      var _this = this;\n      _this._messageBus = messageBus;\n    }\n\n    /**\n    * return the registry in this idModule\n    * @param {registry}           registry\n    */\n\n  }, {\n    key: 'registry',\n    get: function get() {\n      var _this = this;\n      return _this._registry;\n    }\n\n    /**\n    * Set the registry in this idModule\n    * @param {registry}     reg\n    */\n    ,\n    set: function set(registry) {\n      var _this = this;\n      _this._registry = registry;\n    }\n  }]);\n  return IdentityModule;\n}();\n\nexports.default = IdentityModule;\nmodule.exports = exports['default'];\n\n},{\"../utils/utils.js\":447,\"./Crypto\":418,\"./Identity\":419,\"babel-runtime/core-js/json/stringify\":2,\"babel-runtime/core-js/promise\":10,\"babel-runtime/helpers/classCallCheck\":13,\"babel-runtime/helpers/createClass\":14}],421:[function(require,module,exports){\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _classCallCheck2 = require(\"babel-runtime/helpers/classCallCheck\");\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar CombiningAlgorithm = function CombiningAlgorithm() {\n  (0, _classCallCheck3.default)(this, CombiningAlgorithm);\n};\n\nexports.default = CombiningAlgorithm;\nmodule.exports = exports['default'];\n\n},{\"babel-runtime/helpers/classCallCheck\":13}],422:[function(require,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _createClass2 = require('babel-runtime/helpers/createClass');\n\nvar _createClass3 = _interopRequireDefault(_createClass2);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar Operators = function () {\n  function Operators() {\n    (0, _classCallCheck3.default)(this, Operators);\n  }\n\n  (0, _createClass3.default)(Operators, [{\n    key: 'and',\n    value: function and(params) {\n      return params[0] && params[1];\n    }\n  }, {\n    key: 'between',\n    value: function between(params) {\n      var start = parseInt(params[0][0]);\n      var end = parseInt(params[0][1]);\n      var now = params[1];\n\n      if (end < start) {\n        now = now < start ? now += 2400 : now;\n        end += 2400;\n      }\n\n      return now > start && now < end;\n    }\n  }, {\n    key: 'equals',\n    value: function equals(params) {\n      return params[0] === '*' || params[0] === params[1];\n    }\n  }, {\n    key: 'in',\n    value: function _in(params) {\n      return params[0].indexOf(params[1]) > -1;\n    }\n  }, {\n    key: 'not',\n    value: function not(params) {\n      return !params[0];\n    }\n  }, {\n    key: 'or',\n    value: function or(params) {\n      return params[0] || params[1];\n    }\n  }]);\n  return Operators;\n}();\n\nexports.default = Operators;\nmodule.exports = exports['default'];\n\n},{\"babel-runtime/helpers/classCallCheck\":13,\"babel-runtime/helpers/createClass\":14}],423:[function(require,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _createClass2 = require('babel-runtime/helpers/createClass');\n\nvar _createClass3 = _interopRequireDefault(_createClass2);\n\nvar _Operators = require('./Operators');\n\nvar _Operators2 = _interopRequireDefault(_Operators);\n\nvar _RuntimeCoreCtx = require('./context/RuntimeCoreCtx');\n\nvar _RuntimeCoreCtx2 = _interopRequireDefault(_RuntimeCoreCtx);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n* The Policy Decision Point (PDP) decides if a message is to be authorised by checking a set of\n* policies. The resource to be verified is specified in the first word of the 'condition' field of\n* a Policy object. The implementation that verifies if the message is compliant with a policy is\n* specified in a hashtable to allow dynamic definition of the implementation, providing\n* extensibility to the Policy Engine functionalities.\n*/\n\nvar PDP = function () {\n  function PDP(context) {\n    (0, _classCallCheck3.default)(this, PDP);\n\n    this.context = context;\n    this.operators = new _Operators2.default();\n  }\n\n  (0, _createClass3.default)(PDP, [{\n    key: 'applyPolicies',\n    value: function applyPolicies(message, policies) {\n      var result = this.evaluateSPPolicy(message, policies.serviceProviderPolicy);\n      if (this.context instanceof _RuntimeCoreCtx2.default && (result || result === 'Not Applicable')) {\n        result = this.evaluateUserPolicy(message, policies.userPolicy);\n      }\n      return result;\n    }\n  }, {\n    key: 'evaluateSPPolicy',\n    value: function evaluateSPPolicy(message, policy) {\n      var result = void 0;\n\n      if (policy) {\n        result = policy.evaluate(this.context, message);\n      } else {\n        result = 'Not Applicable';\n      }\n\n      return result;\n    }\n  }, {\n    key: 'evaluateUserPolicy',\n    value: function evaluateUserPolicy(message, title) {\n      var result = void 0;\n\n      if (title !== undefined) {\n        var policy = this.context.userPolicies[title];\n        if (policy) {\n          result = policy.evaluate(this.context, message);\n        } else {\n          result = 'Not Applicable';\n        }\n      } else {\n        result = 'Not Applicable';\n      }\n\n      return result;\n    }\n  }, {\n    key: 'context',\n    get: function get() {\n      return this._context;\n    },\n    set: function set(context) {\n      this._context = context;\n    }\n  }, {\n    key: 'operators',\n    get: function get() {\n      return this._operators;\n    },\n    set: function set(operators) {\n      this._operators = operators;\n    }\n  }]);\n  return PDP;\n}();\n\nexports.default = PDP;\nmodule.exports = exports['default'];\n\n},{\"./Operators\":422,\"./context/RuntimeCoreCtx\":433,\"babel-runtime/helpers/classCallCheck\":13,\"babel-runtime/helpers/createClass\":14}],424:[function(require,module,exports){\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _classCallCheck2 = require(\"babel-runtime/helpers/classCallCheck\");\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _createClass2 = require(\"babel-runtime/helpers/createClass\");\n\nvar _createClass3 = _interopRequireDefault(_createClass2);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar PEP = function () {\n  function PEP(context) {\n    (0, _classCallCheck3.default)(this, PEP);\n\n    this.context = context;\n  }\n\n  (0, _createClass3.default)(PEP, [{\n    key: \"enforcePolicies\",\n    value: function enforcePolicies(message, policies, authDecision) {\n      var policy = void 0;\n\n      if (policies.userPolicy) {\n        policy = this.context.userPolicies[policies.userPolicy];\n        if (policy) {\n          policy.enforceActions(this.context, message, authDecision);\n        }\n      }\n      policy = this.context.serviceProviderPolicy;\n      if (policy) {\n        policy.enforceActions(this.context, message, authDecision);\n      }\n    }\n\n    /*sendAutomaticMessage() {}\n     forwardToID() {}\n     forwardToHyperty() {}*/\n\n  }]);\n  return PEP;\n}();\n\nexports.default = PEP;\nmodule.exports = exports['default'];\n\n},{\"babel-runtime/helpers/classCallCheck\":13,\"babel-runtime/helpers/createClass\":14}],425:[function(require,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _createClass2 = require('babel-runtime/helpers/createClass');\n\nvar _createClass3 = _interopRequireDefault(_createClass2);\n\nvar _DenyOverrides = require('./combiningAlgorithms/DenyOverrides');\n\nvar _DenyOverrides2 = _interopRequireDefault(_DenyOverrides);\n\nvar _FirstApplicable = require('./combiningAlgorithms/FirstApplicable');\n\nvar _FirstApplicable2 = _interopRequireDefault(_FirstApplicable);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar Policy = function () {\n  function Policy(key, rules, actions, combiningAlgorithm) {\n    (0, _classCallCheck3.default)(this, Policy);\n\n    this.actions = actions;\n    this.key = key;\n    this.rules = rules;\n    this.combiningAlgorithm = combiningAlgorithm;\n    this.isActive = false;\n  }\n\n  (0, _createClass3.default)(Policy, [{\n    key: 'addRule',\n\n\n    //TODO: FIX\n    value: function addRule(rule) {\n      this._rules.push(rule);\n    }\n  }, {\n    key: 'deleteRule',\n    value: function deleteRule(scope, target, condition) {\n      delete this.rules[scope][target][condition];\n    }\n  }, {\n    key: 'enforceActions',\n    value: function enforceActions(context, message, authDecision) {\n      for (var i in this.actions) {\n        context[this.actions[i]](message, authDecision);\n      }\n    }\n  }, {\n    key: 'evaluate',\n    value: function evaluate(context, message) {\n      var results = [];\n\n      for (var i in this.rules) {\n        results.push(this.rules[i].evaluate(context, message));\n      }\n\n      return this.combiningAlgorithm.evaluate(results);\n    }\n  }, {\n    key: 'actions',\n    get: function get() {\n      return this._actions;\n    },\n    set: function set(actions) {\n      this._actions = actions;\n    }\n  }, {\n    key: 'combiningAlgorithm',\n    get: function get() {\n      return this._combiningAlgorithm;\n    },\n    set: function set(combiningAlgorithm) {\n      if (combiningAlgorithm === 'denyOverrides') {\n        this._combiningAlgorithm = new _DenyOverrides2.default();\n      } else {\n        if (combiningAlgorithm === 'firstApplicable') {\n          this._combiningAlgorithm = new _FirstApplicable2.default();\n        } else {\n          throw Error('Unknown algorithm: ' + combiningAlgorithm);\n        }\n      }\n    }\n  }, {\n    key: 'isActive',\n    get: function get() {\n      return this._isActive;\n    },\n    set: function set(isActive) {\n      this._isActive = isActive;\n    }\n  }, {\n    key: 'key',\n    get: function get() {\n      return this._key;\n    },\n    set: function set(key) {\n      this._key = key;\n    }\n  }, {\n    key: 'rules',\n    get: function get() {\n      return this._rules;\n    },\n    set: function set(rules) {\n      this._rules = rules;\n    }\n  }]);\n  return Policy;\n}();\n\nexports.default = Policy;\nmodule.exports = exports['default'];\n\n},{\"./combiningAlgorithms/DenyOverrides\":428,\"./combiningAlgorithms/FirstApplicable\":429,\"babel-runtime/helpers/classCallCheck\":13,\"babel-runtime/helpers/createClass\":14}],426:[function(require,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _createClass2 = require('babel-runtime/helpers/createClass');\n\nvar _createClass3 = _interopRequireDefault(_createClass2);\n\nvar _PEP = require('./PEP');\n\nvar _PEP2 = _interopRequireDefault(_PEP);\n\nvar _PDP = require('./PDP');\n\nvar _PDP2 = _interopRequireDefault(_PDP);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar PolicyEngine = function () {\n  function PolicyEngine(context) {\n    (0, _classCallCheck3.default)(this, PolicyEngine);\n\n    this.context = context;\n    this.context.policyEngine = this;\n    this.pdp = new _PDP2.default(context);\n    this.pep = new _PEP2.default(context);\n  }\n\n  (0, _createClass3.default)(PolicyEngine, [{\n    key: 'addPolicy',\n    value: function addPolicy(source, key, policy) {\n      if (source === 'SERVICE_PROVIDER') {\n        this.context.serviceProviderPolicies[key] = policy;\n      } else {\n        if (source === 'USER') {\n          this.context.userPolicies[key] = policy;\n        } else {\n          throw Error('Unknown policy source: ' + source);\n        }\n      }\n    }\n  }, {\n    key: 'removePolicy',\n    value: function removePolicy(source, key) {\n      if (source === '*') {\n        this.context.serviceProviderPolicies = {};\n        this.context.userPolicies = {};\n        this.context.activeUserPolicy = undefined;\n      } else {\n        if (source === 'SERVICE_PROVIDER') {\n          delete this.context.serviceProviderPolicies[key];\n        } else {\n          if (source === 'USER') {\n            delete this.context.userPolicies[key];\n          } else {\n            throw Error('Unknown policy source: ' + source);\n          }\n        }\n      }\n    }\n  }, {\n    key: 'removeRule',\n    value: function removeRule(key, rule) {\n      delete this.context.userPolicies[key][rule.scope][rule.target][rule.condition];\n    }\n  }, {\n    key: 'authorise',\n    value: function authorise(message) {\n      var _this = this;\n      return _this.context.authorise(message);\n    }\n  }, {\n    key: 'getGroupsNames',\n    value: function getGroupsNames(scope, target) {\n      var myGroups = this.context.groups;\n      var groupsNames = [];\n      if (myGroups[scope][target] !== undefined) {\n        for (var groupName in myGroups[scope][target]) {\n          groupsNames.push(groupName);\n        }\n      }\n      return groupsNames;\n    }\n  }, {\n    key: 'getGroup',\n    value: function getGroup(scope, target, groupName) {\n      var myGroups = this.context.groups;\n      var members = [];\n\n      if (myGroups[scope] !== undefined && myGroups[scope][target] !== undefined && myGroups[scope][target][groupName] !== undefined) {\n        members = myGroups[scope][target][groupName];\n      }\n\n      return members;\n    }\n\n    /**\n    * Creates a group with the given name.\n    * @param  {String}  groupName\n    */\n\n  }, {\n    key: 'createGroup',\n    value: function createGroup(scope, target, groupName) {\n      var myGroups = this.context.groups;\n\n      if (myGroups[scope] === undefined) {\n        myGroups[scope] = {};\n      }\n      if (myGroups[scope][target] === undefined) {\n        myGroups[scope][target] = {};\n      }\n\n      myGroups[scope][target][groupName] = [];\n    }\n  }, {\n    key: 'deleteGroup',\n    value: function deleteGroup(scope, target, groupName) {\n      delete this.context.groups[scope][target][groupName];\n    }\n\n    /**\n    * Adds the given user email to the group with the given name.\n    * @param  {String}  userEmail\n    * @param  {String}  groupName\n    */\n\n  }, {\n    key: 'addToGroup',\n    value: function addToGroup(scope, target, groupName, userEmail) {\n      var myGroups = this.context.groups;\n      if (myGroups[scope] === undefined) {\n        myGroups[scope] = {};\n      }\n      if (myGroups[scope][target] === undefined) {\n        myGroups[scope][target] = {};\n      }\n      if (myGroups[scope][target][groupName] === undefined) {\n        this.createGroup(scope, target, groupName);\n      }\n      if (myGroups[scope][target][groupName].indexOf(userEmail) === -1) {\n        myGroups[scope][target][groupName].push(userEmail);\n      }\n    }\n  }, {\n    key: 'removeFromGroup',\n    value: function removeFromGroup(scope, target, groupName, userEmail) {\n      var myGroups = this.context.groups;\n      var group = myGroups[scope][target][groupName];\n\n      group.splice(group.indexOf(userEmail), 1);\n    }\n  }, {\n    key: 'context',\n    get: function get() {\n      return this._context;\n    },\n    set: function set(context) {\n      this._context = context;\n    }\n  }, {\n    key: 'pdp',\n    get: function get() {\n      return this._pdp;\n    },\n    set: function set(pdp) {\n      this._pdp = pdp;\n    }\n  }, {\n    key: 'pep',\n    get: function get() {\n      return this._pep;\n    },\n    set: function set(pep) {\n      this._pep = pep;\n    }\n  }]);\n  return PolicyEngine;\n}();\n\nexports.default = PolicyEngine;\nmodule.exports = exports['default'];\n\n},{\"./PDP\":423,\"./PEP\":424,\"babel-runtime/helpers/classCallCheck\":13,\"babel-runtime/helpers/createClass\":14}],427:[function(require,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _createClass2 = require('babel-runtime/helpers/createClass');\n\nvar _createClass3 = _interopRequireDefault(_createClass2);\n\nvar _Operators = require('./Operators');\n\nvar _Operators2 = _interopRequireDefault(_Operators);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar Rule = function () {\n  function Rule(authorise, condition, scope, target) {\n    (0, _classCallCheck3.default)(this, Rule);\n\n    this.operators = new _Operators2.default();\n    this.authorise = authorise;\n    this.condition = condition;\n    this.scope = scope;\n    this.target = target;\n  }\n\n  (0, _createClass3.default)(Rule, [{\n    key: 'evaluate',\n    value: function evaluate(context, message) {\n      if (this.condition.isApplicable(context, message, this.scope, this.target)) {\n        return this.authorise;\n      } else {\n        return 'Not Applicable';\n      }\n    }\n  }, {\n    key: 'authorise',\n    get: function get() {\n      return this._authorise;\n    },\n    set: function set(decision) {\n      this._authorise = decision;\n    }\n  }, {\n    key: 'condition',\n    get: function get() {\n      return this._condition;\n    },\n    set: function set(condition) {\n      this._condition = condition;\n    }\n  }, {\n    key: 'scope',\n    get: function get() {\n      return this._scope;\n    },\n    set: function set(scope) {\n      this._scope = scope;\n    }\n  }, {\n    key: 'target',\n    get: function get() {\n      return this._target;\n    },\n    set: function set(target) {\n      this._target = target;\n    }\n  }]);\n  return Rule;\n}();\n\nexports.default = Rule;\nmodule.exports = exports['default'];\n\n},{\"./Operators\":422,\"babel-runtime/helpers/classCallCheck\":13,\"babel-runtime/helpers/createClass\":14}],428:[function(require,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _getPrototypeOf = require('babel-runtime/core-js/object/get-prototype-of');\n\nvar _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);\n\nvar _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _createClass2 = require('babel-runtime/helpers/createClass');\n\nvar _createClass3 = _interopRequireDefault(_createClass2);\n\nvar _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');\n\nvar _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);\n\nvar _inherits2 = require('babel-runtime/helpers/inherits');\n\nvar _inherits3 = _interopRequireDefault(_inherits2);\n\nvar _CombiningAlgorithm2 = require('../CombiningAlgorithm');\n\nvar _CombiningAlgorithm3 = _interopRequireDefault(_CombiningAlgorithm2);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar DenyOverrides = function (_CombiningAlgorithm) {\n  (0, _inherits3.default)(DenyOverrides, _CombiningAlgorithm);\n\n  function DenyOverrides() {\n    (0, _classCallCheck3.default)(this, DenyOverrides);\n    return (0, _possibleConstructorReturn3.default)(this, (0, _getPrototypeOf2.default)(DenyOverrides).apply(this, arguments));\n  }\n\n  (0, _createClass3.default)(DenyOverrides, [{\n    key: 'evaluate',\n    value: function evaluate(individualResults) {\n      if (individualResults.indexOf(false) !== -1) {\n        return false;\n      } else {\n        if (individualResults.indexOf(true) !== -1) {\n          return true;\n        } else {\n          return 'Not Applicable';\n        }\n      }\n    }\n  }]);\n  return DenyOverrides;\n}(_CombiningAlgorithm3.default);\n\nexports.default = DenyOverrides;\nmodule.exports = exports['default'];\n\n},{\"../CombiningAlgorithm\":421,\"babel-runtime/core-js/object/get-prototype-of\":6,\"babel-runtime/helpers/classCallCheck\":13,\"babel-runtime/helpers/createClass\":14,\"babel-runtime/helpers/inherits\":15,\"babel-runtime/helpers/possibleConstructorReturn\":16}],429:[function(require,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _getPrototypeOf = require('babel-runtime/core-js/object/get-prototype-of');\n\nvar _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);\n\nvar _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _createClass2 = require('babel-runtime/helpers/createClass');\n\nvar _createClass3 = _interopRequireDefault(_createClass2);\n\nvar _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');\n\nvar _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);\n\nvar _inherits2 = require('babel-runtime/helpers/inherits');\n\nvar _inherits3 = _interopRequireDefault(_inherits2);\n\nvar _CombiningAlgorithm2 = require('../CombiningAlgorithm');\n\nvar _CombiningAlgorithm3 = _interopRequireDefault(_CombiningAlgorithm2);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar FirstApplicable = function (_CombiningAlgorithm) {\n  (0, _inherits3.default)(FirstApplicable, _CombiningAlgorithm);\n\n  function FirstApplicable() {\n    (0, _classCallCheck3.default)(this, FirstApplicable);\n    return (0, _possibleConstructorReturn3.default)(this, (0, _getPrototypeOf2.default)(FirstApplicable).apply(this, arguments));\n  }\n\n  (0, _createClass3.default)(FirstApplicable, [{\n    key: 'evaluate',\n    value: function evaluate(individualResults) {\n      for (var i in individualResults) {\n        if (individualResults[i] !== 'Not Applicable') {\n          return individualResults[i];\n        }\n      }\n\n      return 'Not Applicable';\n    }\n  }]);\n  return FirstApplicable;\n}(_CombiningAlgorithm3.default);\n\nexports.default = FirstApplicable;\nmodule.exports = exports['default'];\n\n},{\"../CombiningAlgorithm\":421,\"babel-runtime/core-js/object/get-prototype-of\":6,\"babel-runtime/helpers/classCallCheck\":13,\"babel-runtime/helpers/createClass\":14,\"babel-runtime/helpers/inherits\":15,\"babel-runtime/helpers/possibleConstructorReturn\":16}],430:[function(require,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _createClass2 = require('babel-runtime/helpers/createClass');\n\nvar _createClass3 = _interopRequireDefault(_createClass2);\n\nvar _Operators = require('../Operators');\n\nvar _Operators2 = _interopRequireDefault(_Operators);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar Condition = function () {\n  function Condition(attribute, operator, params) {\n    (0, _classCallCheck3.default)(this, Condition);\n\n    this.attribute = attribute;\n    this.operator = operator;\n    this.params = params;\n    this.operators = new _Operators2.default();\n  }\n\n  (0, _createClass3.default)(Condition, [{\n    key: 'isApplicable',\n    value: function isApplicable(context, message) {\n      context[this.attribute] = { message: message };\n      var value = context[this.attribute];\n\n      if (this.operator === 'in') {\n        // source in preauth\n        var dataObjectURL = message.to.split('/');\n        dataObjectURL.pop();\n        dataObjectURL = dataObjectURL[0] + '//' + dataObjectURL[2];\n        this.params = context.runtimeRegistry.getPreAuthSubscribers(dataObjectURL);\n      }\n\n      return this.operators[this.operator]([this.params, value]);\n    }\n  }, {\n    key: 'attribute',\n    get: function get() {\n      return this._attribute;\n    },\n    set: function set(attribute) {\n      this._attribute = attribute;\n    }\n  }, {\n    key: 'operator',\n    get: function get() {\n      return this._operator;\n    },\n    set: function set(operator) {\n      this._operator = operator;\n    }\n  }, {\n    key: 'params',\n    get: function get() {\n      return this._params;\n    },\n    set: function set(params) {\n      this._params = params;\n    }\n  }]);\n  return Condition;\n}();\n\nexports.default = Condition;\nmodule.exports = exports['default'];\n\n},{\"../Operators\":422,\"babel-runtime/helpers/classCallCheck\":13,\"babel-runtime/helpers/createClass\":14}],431:[function(require,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _getPrototypeOf = require('babel-runtime/core-js/object/get-prototype-of');\n\nvar _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);\n\nvar _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _createClass2 = require('babel-runtime/helpers/createClass');\n\nvar _createClass3 = _interopRequireDefault(_createClass2);\n\nvar _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');\n\nvar _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);\n\nvar _inherits2 = require('babel-runtime/helpers/inherits');\n\nvar _inherits3 = _interopRequireDefault(_inherits2);\n\nvar _Condition2 = require('./Condition');\n\nvar _Condition3 = _interopRequireDefault(_Condition2);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar SubscriptionCondition = function (_Condition) {\n  (0, _inherits3.default)(SubscriptionCondition, _Condition);\n\n  function SubscriptionCondition(attribute, operator, params) {\n    (0, _classCallCheck3.default)(this, SubscriptionCondition);\n    return (0, _possibleConstructorReturn3.default)(this, (0, _getPrototypeOf2.default)(SubscriptionCondition).call(this, attribute, operator, params));\n  }\n\n  (0, _createClass3.default)(SubscriptionCondition, [{\n    key: 'isApplicable',\n    value: function isApplicable(context, message, scope, target) {\n      var isSubscription = message.type === 'subscribe';\n      var isFromRemoteSM = context.isFromRemoteSM(message.from);\n      if (isSubscription & isFromRemoteSM) {\n        var applicable = void 0;\n        switch (scope) {\n          case 'global':\n            applicable = true;\n            break;\n          case 'hyperty':\n            var hypertyURL = context.runtimeRegistry.getHypertyName();\n            applicable = target === hypertyURL;\n            break;\n          case 'user':\n            var hyperty = context.runtimeRegistry.getReporterURLSynchonous(context.getURL(message.to));\n            var owner = context.runtimeRegistry.getHypertyOwner(hyperty);\n            applicable = target === owner;\n            break;\n          case 'dataObject':\n            var dataObjectURL = message.body.resource;\n            applicable = target === dataObjectURL;\n            break;\n        }\n        return applicable;\n      } else {\n        return false;\n      }\n    }\n  }]);\n  return SubscriptionCondition;\n}(_Condition3.default);\n\nexports.default = SubscriptionCondition;\nmodule.exports = exports['default'];\n\n},{\"./Condition\":430,\"babel-runtime/core-js/object/get-prototype-of\":6,\"babel-runtime/helpers/classCallCheck\":13,\"babel-runtime/helpers/createClass\":14,\"babel-runtime/helpers/inherits\":15,\"babel-runtime/helpers/possibleConstructorReturn\":16}],432:[function(require,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _createClass2 = require('babel-runtime/helpers/createClass');\n\nvar _createClass3 = _interopRequireDefault(_createClass2);\n\nvar _utils = require('../../utils/utils');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar CommonCtx = function () {\n  function CommonCtx() {\n    (0, _classCallCheck3.default)(this, CommonCtx);\n\n    this.serviceProviderPolicies = {};\n    this.defaultBehavior = true;\n    this.groups = {};\n  }\n\n  (0, _createClass3.default)(CommonCtx, [{\n    key: 'defaultBehavior',\n    get: function get() {\n      return this._defaultBehavior;\n    },\n    set: function set(behavior) {\n      this._defaultBehavior = behavior;\n    }\n  }, {\n    key: 'serviceProviderPolicies',\n    get: function get() {\n      return this._serviceProviderPolicies;\n    },\n    set: function set(policies) {\n      this._serviceProviderPolicies = policies;\n    }\n  }, {\n    key: 'date',\n    set: function set(now) {\n      if (!now.message) {\n        if (typeof now === 'string') {\n          this._date = now;\n        } else {\n          var date = new Date();\n          var day = String(date.getDate());\n          if (day.length === 1) {\n            day = '0' + day;\n          }\n          var month = String(date.getMonth() + 1);\n          if (month.length === 1) {\n            month = '0' + month;\n          }\n\n          this._date = day + '/' + month + '/' + date.getFullYear();\n        }\n      }\n    },\n    get: function get() {\n      return this._date;\n    }\n  }, {\n    key: 'domain',\n    set: function set(params) {\n      this._domain = (0, _utils.divideEmail)(params.message.body.identity.userProfile.username).domain;\n    },\n    get: function get() {\n      return this._domain;\n    }\n  }, {\n    key: 'source',\n    set: function set(params) {\n      this._source = params.message.body.identity.userProfile.username;\n    },\n    get: function get() {\n      var _this = this;\n      return _this._source;\n    }\n  }, {\n    key: 'time',\n    set: function set(now) {\n      if (!now.message) {\n        if (now) {\n          this._time = now;\n        } else {\n          var _now = new Date();\n          var minutes = String(_now.getMinutes());\n          if (minutes.length === 1) {\n            minutes = '0' + minutes;\n          }\n          this._time = parseInt(String(_now.getHours()) + minutes);\n        }\n      }\n    },\n    get: function get() {\n      var _this = this;\n      return _this._time;\n    }\n  }, {\n    key: 'weekday',\n    set: function set(now) {\n      if (!now.message) {\n        if (now) {\n          this._weekday = now;\n        } else {\n          this._weekday = String(new Date().getDay());\n        }\n      }\n    },\n    get: function get() {\n      return this._weekday;\n    }\n  }]);\n  return CommonCtx;\n}();\n\nexports.default = CommonCtx;\nmodule.exports = exports['default'];\n\n},{\"../../utils/utils\":447,\"babel-runtime/helpers/classCallCheck\":13,\"babel-runtime/helpers/createClass\":14}],433:[function(require,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _promise = require('babel-runtime/core-js/promise');\n\nvar _promise2 = _interopRequireDefault(_promise);\n\nvar _getPrototypeOf = require('babel-runtime/core-js/object/get-prototype-of');\n\nvar _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);\n\nvar _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _createClass2 = require('babel-runtime/helpers/createClass');\n\nvar _createClass3 = _interopRequireDefault(_createClass2);\n\nvar _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');\n\nvar _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);\n\nvar _inherits2 = require('babel-runtime/helpers/inherits');\n\nvar _inherits3 = _interopRequireDefault(_inherits2);\n\nvar _CommonCtx2 = require('./CommonCtx');\n\nvar _CommonCtx3 = _interopRequireDefault(_CommonCtx2);\n\nvar _utils = require('../../utils/utils');\n\nvar _PersistenceManager = require('service-framework/dist/PersistenceManager');\n\nvar _PersistenceManager2 = _interopRequireDefault(_PersistenceManager);\n\nvar _Rule = require('../Rule');\n\nvar _Rule2 = _interopRequireDefault(_Rule);\n\nvar _UserPolicy = require('../policies/UserPolicy');\n\nvar _UserPolicy2 = _interopRequireDefault(_UserPolicy);\n\nvar _SubscriptionCondition = require('../conditions/SubscriptionCondition');\n\nvar _SubscriptionCondition2 = _interopRequireDefault(_SubscriptionCondition);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar RuntimeCoreCtx = function (_CommonCtx) {\n  (0, _inherits3.default)(RuntimeCoreCtx, _CommonCtx);\n\n  function RuntimeCoreCtx(idModule, runtimeRegistry) {\n    (0, _classCallCheck3.default)(this, RuntimeCoreCtx);\n\n    var _this2 = (0, _possibleConstructorReturn3.default)(this, (0, _getPrototypeOf2.default)(RuntimeCoreCtx).call(this));\n\n    _this2.idModule = idModule;\n    _this2.runtimeRegistry = runtimeRegistry;\n    _this2.activeUserPolicy = undefined;\n    _this2.userPolicies = {};\n    return _this2;\n  }\n\n  (0, _createClass3.default)(RuntimeCoreCtx, [{\n    key: 'authorise',\n    value: function authorise(message) {\n      var _this = this;\n\n      return new _promise2.default(function (resolve, reject) {\n        console.log('--- Policy Engine ---');\n        console.log(message);\n        message.body = message.body || {};\n        var result = void 0;\n        var isToVerify = _this._isToVerify(message);\n        var isIncomingMessage = _this._isIncomingMessage(message);\n        var isToCypher = _this._isToCypherModule(message);\n        if (isToVerify) {\n          if (isIncomingMessage) {\n            if (isToCypher) {\n              _this.decrypt(message).then(function (message) {\n                var policies = {\n                  serviceProviderPolicy: _this.getServiceProviderPolicy(message, isIncomingMessage),\n                  userPolicy: _this.activeUserPolicy\n                };\n                result = _this.policyEngine.pdp.applyPolicies(message, policies);\n                _this.policyEngine.pep.enforcePolicies(message, policies, result);\n                if (result === 'Not Applicable') {\n                  result = _this.defaultBehavior;\n                  message.body.auth = false;\n                }\n                if (result) {\n                  message.body.auth = message.body.auth === undefined ? true : message.body.auth;\n                  resolve(message);\n                } else {\n                  reject('Message blocked');\n                }\n              }, function (error) {\n                reject(error);\n              });\n            } else {\n              var policies = {\n                serviceProviderPolicy: _this.getServiceProviderPolicy(message, isIncomingMessage),\n                userPolicy: _this.activeUserPolicy\n              };\n              result = _this.policyEngine.pdp.applyPolicies(message, policies);\n              _this.policyEngine.pep.enforcePolicies(message, policies, result);\n              if (result === 'Not Applicable') {\n                result = _this.defaultBehavior;\n                message.body.auth = false;\n              }\n              if (result) {\n                message.body.auth = message.body.auth === undefined ? true : message.body.auth;\n                resolve(message);\n              } else {\n                reject('Message blocked');\n              }\n            }\n          } else {\n            var isToSetID = _this._isToSetID(message);\n            if (isToSetID) {\n              _this._getIdentity(message).then(function (identity) {\n                message.body.identity = identity;\n                var policies = {\n                  serviceProviderPolicy: _this.getServiceProviderPolicy(message, isIncomingMessage),\n                  userPolicy: _this.activeUserPolicy\n                };\n                result = _this.policyEngine.pdp.applyPolicies(message, policies);\n                _this.policyEngine.pep.enforcePolicies(message, policies, result);\n                if (result === 'Not Applicable') {\n                  result = _this.defaultBehavior;\n                  message.body.auth = false;\n                }\n                if (result) {\n                  message.body.auth = message.body.auth === undefined ? true : message.body.auth;\n                  if (isToCypher) {\n                    _this.encrypt(message).then(function (message) {\n                      resolve(message);\n                    }, function (error) {\n                      reject(error);\n                    });\n                  } else {\n                    resolve(message);\n                  }\n                } else {\n                  reject('Message blocked');\n                }\n              }, function (error) {\n                reject(error);\n              });\n            } else {\n              var _policies = {\n                serviceProviderPolicy: _this.getServiceProviderPolicy(message, isIncomingMessage),\n                userPolicy: _this.activeUserPolicy\n              };\n              result = _this.policyEngine.pdp.applyPolicies(message, _policies);\n              _this.policyEngine.pep.enforcePolicies(message, _policies, result);\n              if (result === 'Not Applicable') {\n                result = _this.defaultBehavior;\n                message.body.auth = false;\n              }\n              if (result) {\n                message.body.auth = message.body.auth === undefined ? true : message.body.auth;\n                resolve(message);\n              } else {\n                reject('Message blocked');\n              }\n            }\n          }\n        } else {\n          result = _this.defaultBehavior;\n          message.body.auth = false;\n          if (result) {\n            resolve(message);\n          } else {\n            reject('Message blocked');\n          }\n        }\n      });\n    }\n  }, {\n    key: 'decrypt',\n    value: function decrypt(message) {\n      var _this = this;\n\n      return new _promise2.default(function (resolve, reject) {\n        _this.idModule.decryptMessage(message).then(function (msg) {\n          resolve(msg);\n        }, function (error) {\n          reject(error);\n        });\n      });\n    }\n  }, {\n    key: 'doMutualAuthentication',\n    value: function doMutualAuthentication(message, authDecision) {\n      if (authDecision) {\n        var to = message.to.split('/');\n        var subsIndex = to.indexOf('subscription');\n        var isDataObjectSubscription = subsIndex !== -1;\n        var isFromRemoteSM = this.isFromRemoteSM(message.from);\n        if (isDataObjectSubscription & isFromRemoteSM) {\n          to.pop();\n          var dataObjectURL = to[0] + '//' + to[2] + '/' + to[3];\n          if (to.length > 4) {\n            dataObjectURL = to[0] + '//' + to[2] + '/' + to[3] + '/' + to[4];\n          }\n          this.idModule.doMutualAuthentication(dataObjectURL, message.body.subscriber);\n        }\n      }\n    }\n  }, {\n    key: 'encrypt',\n    value: function encrypt(message) {\n      var _this = this;\n\n      return new _promise2.default(function (resolve, reject) {\n        _this.idModule.encryptMessage(message).then(function (msg) {\n          resolve(msg);\n        }, function (error) {\n          reject(error);\n        });\n      });\n    }\n  }, {\n    key: 'getServiceProviderPolicy',\n    value: function getServiceProviderPolicy(message, isIncoming) {\n      var policy = void 0;\n\n      if (isIncoming) {\n        var toHyperty = this.runtimeRegistry.getHypertyName(message.to);\n        policy = this.serviceProviderPolicies[toHyperty];\n      } else {\n        var fromHyperty = this.runtimeRegistry.getHypertyName(message.from);\n        policy = this.serviceProviderPolicies[fromHyperty];\n      }\n      return policy;\n    }\n  }, {\n    key: 'isFromRemoteSM',\n    value: function isFromRemoteSM(from) {\n      var splitFrom = from.split('://');\n      return splitFrom[0] === 'runtime' && from !== this.runtimeRegistry.runtimeURL + '/sm';\n    }\n  }, {\n    key: '_isToSetID',\n    value: function _isToSetID(message) {\n      var schemasToIgnore = ['domain-idp', 'runtime', 'domain'];\n      var splitFrom = message.from.split('://');\n      var fromSchema = splitFrom[0];\n\n      return schemasToIgnore.indexOf(fromSchema) === -1;\n    }\n  }, {\n    key: '_isIncomingMessage',\n    value: function _isIncomingMessage(message) {\n      return message.body.identity ? true : false;\n    }\n  }, {\n    key: 'getURL',\n    value: function getURL(url) {\n      var splitURL = url.split('/');\n      return splitURL[0] + '//' + splitURL[2] + '/' + splitURL[3];\n    }\n  }, {\n    key: '_getIdentity',\n    value: function _getIdentity(message) {\n      if (message.type === 'update') {\n        return this.idModule.getIdentityOfHyperty(message.body.source);\n      }\n\n      if (message.type === 'response' && message.body.source !== undefined) {\n        return this.idModule.getIdentityOfHyperty(message.body.source);\n      }\n\n      if ((0, _utils.divideURL)(message.from).type === 'hyperty') {\n        return this.idModule.getIdentityOfHyperty(message.from);\n      } else {\n        return this.idModule.getIdentityOfHyperty(this.getURL(message.from));\n      }\n    }\n  }, {\n    key: '_isToVerify',\n    value: function _isToVerify(message) {\n      var schemasToIgnore = ['domain-idp', 'hyperty-runtime', 'runtime', 'domain'];\n      var splitFrom = message.from.split('://');\n      var fromSchema = splitFrom[0];\n      var splitTo = message.to.split('://');\n      var toSchema = splitTo[0];\n      if (fromSchema === message.from || toSchema === message.to) {\n        return false;\n      }\n      return schemasToIgnore.indexOf(fromSchema) === -1 || schemasToIgnore.indexOf(toSchema) === -1;\n    }\n\n    //TODO use schemasToIgnore instead\n\n  }, {\n    key: '_isToCypherModule',\n    value: function _isToCypherModule(message) {\n      var isCreate = message.type === 'create';\n      var isFromHyperty = (0, _utils.divideURL)(message.from).type === 'hyperty';\n      var isToHyperty = (0, _utils.divideURL)(message.to).type === 'hyperty';\n      var isToDataObject = (0, _utils.isDataObjectURL)(message.to);\n      var isHandshake = message.type === 'handshake';\n\n      return isCreate && isFromHyperty && isToHyperty || isCreate && isFromHyperty && isToDataObject || isHandshake;\n    }\n  }, {\n    key: 'registerSubscriber',\n    value: function registerSubscriber(message, authDecision) {\n      if (authDecision) {\n        var to = message.to.split('/');\n        var subsIndex = to.indexOf('subscription');\n        var isDataObjectSubscription = subsIndex !== -1;\n        var isFromRemoteSM = this.isFromRemoteSM(message.from);\n\n        if (isDataObjectSubscription & isFromRemoteSM) {\n          to.pop();\n          var dataObjectURL = to[0] + '//' + to[2] + '/' + to[3];\n          if (to.length > 4) {\n            dataObjectURL = to[0] + '//' + to[2] + '/' + to[3] + '/' + to[4];\n          }\n          this.runtimeRegistry.registerSubscriber(dataObjectURL, message.body.subscriber);\n        }\n      }\n    }\n  }, {\n    key: '_getLastComponentOfURL',\n    value: function _getLastComponentOfURL(url) {\n      var split = url.split('/');\n      return split[split.length - 1];\n    }\n  }, {\n    key: 'activeUserPolicy',\n    get: function get() {\n      return this._activeUserPolicy;\n    },\n    set: function set(policy) {\n      this._activeUserPolicy = policy;\n    }\n  }, {\n    key: 'dataObjectScheme',\n    get: function get() {\n      return this._dataObjectScheme;\n    },\n    set: function set(params) {\n      var from = params.message.from;\n      if ((0, _utils.isDataObjectURL)(from)) {\n        this._dataObjectScheme = (0, _utils.divideURL)(from).type;\n      } else {\n        this._dataObjectScheme = undefined;\n      }\n    }\n  }, {\n    key: 'idModule',\n    get: function get() {\n      return this._idModule;\n    },\n    set: function set(idModule) {\n      this._idModule = idModule;\n    }\n  }, {\n    key: 'policies',\n    get: function get() {\n      var policies = _PersistenceManager2.default.get('policies');\n\n      if (policies === undefined) {\n        policies = {};\n      }\n      return policies;\n    },\n    set: function set(policies) {\n      _PersistenceManager2.default.set('policies', '0', policies);\n    }\n  }, {\n    key: 'policyEngine',\n    get: function get() {\n      return this._policyEngine;\n    },\n    set: function set(policyEngine) {\n      this._policyEngine = policyEngine;\n      var acceptAnySubscriptionRule = new _Rule2.default(true, new _SubscriptionCondition2.default('subscription', 'equals', '*'), 'global', 'global');\n      var policy = new _UserPolicy2.default('My policy', [acceptAnySubscriptionRule], ['registerSubscriber', 'doMutualAuthentication']);\n      this._policyEngine.addPolicy('USER', 'My policy', policy);\n      this.activeUserPolicy = 'My policy';\n    }\n  }, {\n    key: 'runtimeRegistry',\n    get: function get() {\n      return this._runtimeRegistry;\n    },\n    set: function set(registry) {\n      this._runtimeRegistry = registry;\n    }\n  }, {\n    key: 'subscription',\n    get: function get() {\n      return this._subscription;\n    },\n    set: function set(params) {\n      this._subscription = params.message.body.subscriber;\n    }\n  }]);\n  return RuntimeCoreCtx;\n}(_CommonCtx3.default);\n\nexports.default = RuntimeCoreCtx;\nmodule.exports = exports['default'];\n\n},{\"../../utils/utils\":447,\"../Rule\":427,\"../conditions/SubscriptionCondition\":431,\"../policies/UserPolicy\":434,\"./CommonCtx\":432,\"babel-runtime/core-js/object/get-prototype-of\":6,\"babel-runtime/core-js/promise\":10,\"babel-runtime/helpers/classCallCheck\":13,\"babel-runtime/helpers/createClass\":14,\"babel-runtime/helpers/inherits\":15,\"babel-runtime/helpers/possibleConstructorReturn\":16,\"service-framework/dist/PersistenceManager\":414}],434:[function(require,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _getPrototypeOf = require('babel-runtime/core-js/object/get-prototype-of');\n\nvar _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);\n\nvar _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');\n\nvar _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);\n\nvar _inherits2 = require('babel-runtime/helpers/inherits');\n\nvar _inherits3 = _interopRequireDefault(_inherits2);\n\nvar _Policy2 = require('../Policy');\n\nvar _Policy3 = _interopRequireDefault(_Policy2);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar UserPolicy = function (_Policy) {\n  (0, _inherits3.default)(UserPolicy, _Policy);\n\n  function UserPolicy(key, rules, actions, combiningAlgorithm) {\n    (0, _classCallCheck3.default)(this, UserPolicy);\n\n    if (!combiningAlgorithm) {\n      combiningAlgorithm = 'denyOverrides';\n    }\n    return (0, _possibleConstructorReturn3.default)(this, (0, _getPrototypeOf2.default)(UserPolicy).call(this, key, rules, actions, combiningAlgorithm));\n  }\n\n  return UserPolicy;\n}(_Policy3.default);\n\nexports.default = UserPolicy;\nmodule.exports = exports['default'];\n\n},{\"../Policy\":425,\"babel-runtime/core-js/object/get-prototype-of\":6,\"babel-runtime/helpers/classCallCheck\":13,\"babel-runtime/helpers/inherits\":15,\"babel-runtime/helpers/possibleConstructorReturn\":16}],435:[function(require,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _promise = require('babel-runtime/core-js/promise');\n\nvar _promise2 = _interopRequireDefault(_promise);\n\nvar _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _createClass2 = require('babel-runtime/helpers/createClass');\n\nvar _createClass3 = _interopRequireDefault(_createClass2);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n* Copyright 2016 PT Inovação e Sistemas SA\n* Copyright 2016 INESC-ID\n* Copyright 2016 QUOBIS NETWORKS SL\n* Copyright 2016 FRAUNHOFER-GESELLSCHAFT ZUR FOERDERUNG DER ANGEWANDTEN FORSCHUNG E.V\n* Copyright 2016 ORANGE SA\n* Copyright 2016 Deutsche Telekom AG\n* Copyright 2016 Apizee\n* Copyright 2016 TECHNISCHE UNIVERSITAT BERLIN\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n**/\n// import MessageFactory from '../../resources/MessageFactory';\n\n/**\n * Class will ask to the message node for addresses\n */\n\nvar AddressAllocation = function () {\n  /* private\n  _url: URL\n  _bus: MiniBus\n  */\n\n  /**\n   * Create an Address Allocation\n   * @param  {URL.URL}      url - url from who is sending the message\n   * @param  {MiniBus}      bus - MiniBus used for address allocation\n   */\n\n  function AddressAllocation(url, bus) {\n    (0, _classCallCheck3.default)(this, AddressAllocation);\n\n    var _this = this;\n\n    // let messageFactory = new MessageFactory();\n    //\n    // _this._messageFactory = messageFactory;\n    _this._url = url;\n    _this._bus = bus;\n  }\n\n  /**\n   * get the URL value\n   * @return {string} The url value;\n   */\n\n\n  (0, _createClass3.default)(AddressAllocation, [{\n    key: 'create',\n\n\n    /**\n     * Ask for creation of a number of Hyperty addresses, to the domain message node.\n     * @param  {Domain} domain - Domain of the message node.\n     * @param  {number} number - Number of addresses to request\n     * @returns {Promise<HypertyURL>}  A list of HypertyURL's\n     */\n    value: function create(domain, number) {\n      var _this = this;\n\n      // let messageFactory = _this._messageFactory;\n\n      var msg = {\n        type: 'create', from: _this._url, to: 'domain://msg-node.' + domain + '/hyperty-address-allocation',\n        body: { value: { number: number } }\n      };\n\n      // TODO: Apply the message factory\n      // The msg-node-vertx should be changed the body field to receive\n      // the following format body: {value: {number: number}} because\n      // the message is generated in that way by the message factory;\n      // let msg = messageFactory.createMessageRequest(_this._url, 'domain://msg-node.' + domain + '/hyperty-address-allocation', '', {number: number});\n\n      return new _promise2.default(function (resolve, reject) {\n\n        // TODO: change this response Message using the MessageFactory\n        _this._bus.postMessage(msg, function (reply) {\n          if (reply.body.code === 200) {\n            resolve(reply.body.value.allocated);\n          } else {\n            reject(reply.body.desc);\n          }\n        });\n      });\n    }\n\n    /**\n    * Send a request to the domain message node, to deallocate one or more addresses\n    * @param  {Domain} domain - Domain of the message node.\n    * @param  {addresses} addresses to request the deallocation\n    * @returns {Promise}  the response by the message node\n    */\n\n  }, {\n    key: 'delete',\n    value: function _delete(domain, addresses) {\n      var _this = this;\n\n      var message = {\n        type: 'delete', from: _this._url, to: 'domain://msg-node.' + domain + '/hyperty-address-allocation',\n        body: { childrenResources: addresses }\n      };\n\n      return new _promise2.default(function (resolve, reject) {\n\n        _this._bus.postMessage(message, function (reply) {\n          console.log('reply', reply);\n          if (reply.body.code === 200) {\n            resolve(reply.body.code);\n          } else {\n            reject(reply.body.desc);\n          }\n        });\n      });\n    }\n  }, {\n    key: 'url',\n    get: function get() {\n      return this._url;\n    }\n  }]);\n  return AddressAllocation;\n}();\n\nexports.default = AddressAllocation;\nmodule.exports = exports['default'];\n\n},{\"babel-runtime/core-js/promise\":10,\"babel-runtime/helpers/classCallCheck\":13,\"babel-runtime/helpers/createClass\":14}],436:[function(require,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _getPrototypeOf = require('babel-runtime/core-js/object/get-prototype-of');\n\nvar _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);\n\nvar _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _createClass2 = require('babel-runtime/helpers/createClass');\n\nvar _createClass3 = _interopRequireDefault(_createClass2);\n\nvar _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');\n\nvar _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);\n\nvar _inherits2 = require('babel-runtime/helpers/inherits');\n\nvar _inherits3 = _interopRequireDefault(_inherits2);\n\nvar _RegistryDataModel2 = require('./RegistryDataModel');\n\nvar _RegistryDataModel3 = _interopRequireDefault(_RegistryDataModel2);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n*   @author: Gil Dias (gil.dias@tecnico.ulisboa.pt)\n*   HypertyInstance Data Model used to model instances of Hyperties running in devices and servers.\n*/\n\nvar HypertyInstance = function (_RegistryDataModel) {\n  (0, _inherits3.default)(HypertyInstance, _RegistryDataModel);\n\n  function HypertyInstance(id, url, descriptorURL, descriptor, hypertyURL, user, guid, runtime, context) {\n    (0, _classCallCheck3.default)(this, HypertyInstance);\n\n    var _this2 = (0, _possibleConstructorReturn3.default)(this, (0, _getPrototypeOf2.default)(HypertyInstance).call(this, id, url, descriptorURL));\n\n    var _this = _this2;\n    _this._descriptor = descriptor;\n    _this._hypertyURL = hypertyURL;\n    _this._user = user;\n    _this._guid = guid;\n    _this._runtime = runtime;\n    _this._context = context;\n    return _this2;\n  }\n\n  (0, _createClass3.default)(HypertyInstance, [{\n    key: 'user',\n    set: function set(identity) {\n      var _this = this;\n      _this.user = identity;\n    },\n    get: function get() {\n      var _this = this;\n      return _this._user;\n    }\n  }, {\n    key: 'hypertyURL',\n    get: function get() {\n      var _this = this;\n      return _this._hypertyURL;\n    }\n  }, {\n    key: 'descriptor',\n    get: function get() {\n      var _this = this;\n      return _this._descriptor;\n    }\n  }, {\n    key: 'objectName',\n    get: function get() {\n      var _this = this;\n      return _this._descriptor._objectName;\n    }\n  }]);\n  return HypertyInstance;\n}(_RegistryDataModel3.default); /**\n                                * Copyright 2016 PT Inovação e Sistemas SA\n                                * Copyright 2016 INESC-ID\n                                * Copyright 2016 QUOBIS NETWORKS SL\n                                * Copyright 2016 FRAUNHOFER-GESELLSCHAFT ZUR FOERDERUNG DER ANGEWANDTEN FORSCHUNG E.V\n                                * Copyright 2016 ORANGE SA\n                                * Copyright 2016 Deutsche Telekom AG\n                                * Copyright 2016 Apizee\n                                * Copyright 2016 TECHNISCHE UNIVERSITAT BERLIN\n                                *\n                                * Licensed under the Apache License, Version 2.0 (the \"License\");\n                                * you may not use this file except in compliance with the License.\n                                * You may obtain a copy of the License at\n                                *\n                                *   http://www.apache.org/licenses/LICENSE-2.0\n                                *\n                                * Unless required by applicable law or agreed to in writing, software\n                                * distributed under the License is distributed on an \"AS IS\" BASIS,\n                                * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n                                * See the License for the specific language governing permissions and\n                                * limitations under the License.\n                                **/\n\n\nexports.default = HypertyInstance;\nmodule.exports = exports['default'];\n\n},{\"./RegistryDataModel\":438,\"babel-runtime/core-js/object/get-prototype-of\":6,\"babel-runtime/helpers/classCallCheck\":13,\"babel-runtime/helpers/createClass\":14,\"babel-runtime/helpers/inherits\":15,\"babel-runtime/helpers/possibleConstructorReturn\":16}],437:[function(require,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _promise = require('babel-runtime/core-js/promise');\n\nvar _promise2 = _interopRequireDefault(_promise);\n\nvar _getPrototypeOf = require('babel-runtime/core-js/object/get-prototype-of');\n\nvar _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);\n\nvar _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _createClass2 = require('babel-runtime/helpers/createClass');\n\nvar _createClass3 = _interopRequireDefault(_createClass2);\n\nvar _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');\n\nvar _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);\n\nvar _inherits2 = require('babel-runtime/helpers/inherits');\n\nvar _inherits3 = _interopRequireDefault(_inherits2);\n\nvar _EventEmitter2 = require('../utils/EventEmitter');\n\nvar _EventEmitter3 = _interopRequireDefault(_EventEmitter2);\n\nvar _AddressAllocation = require('./AddressAllocation');\n\nvar _AddressAllocation2 = _interopRequireDefault(_AddressAllocation);\n\nvar _ObjectAllocation = require('../syncher/ObjectAllocation');\n\nvar _ObjectAllocation2 = _interopRequireDefault(_ObjectAllocation);\n\nvar _HypertyInstance = require('./HypertyInstance');\n\nvar _HypertyInstance2 = _interopRequireDefault(_HypertyInstance);\n\nvar _MessageFactory = require('service-framework/dist/MessageFactory');\n\nvar _utils = require('../utils/utils.js');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/*import IdentityManager from './IdentityManager';\nimport Discovery from './Discovery';*/\n\n/**\n* Runtime Registry Interface\n*/\n/**\n* Copyright 2016 PT Inovação e Sistemas SA\n* Copyright 2016 INESC-ID\n* Copyright 2016 QUOBIS NETWORKS SL\n* Copyright 2016 FRAUNHOFER-GESELLSCHAFT ZUR FOERDERUNG DER ANGEWANDTEN FORSCHUNG E.V\n* Copyright 2016 ORANGE SA\n* Copyright 2016 Deutsche Telekom AG\n* Copyright 2016 Apizee\n* Copyright 2016 TECHNISCHE UNIVERSITAT BERLIN\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n**/\n\nvar Registry = function (_EventEmitter) {\n  (0, _inherits3.default)(Registry, _EventEmitter);\n\n\n  /**\n  * To initialise the Runtime Registry with the RuntimeURL that will be the basis to derive the internal runtime addresses when allocating addresses to internal runtime component. In addition, the Registry domain back-end to be used to remotely register Runtime components, is also passed as input parameter.\n  * @param  {MessageBus}          msgbus                msgbus\n  * @param  {HypertyRuntimeURL}   runtimeURL            runtimeURL\n  * @param  {AppSandbox}          appSandbox            appSandbox\n  * @param  {runtimeCatalogue}    runtimeCatalogue      runtimeCatalogue\n  * @param  {DomainURL}           remoteRegistry        remoteRegistry\n  */\n\n  function Registry(runtimeURL, appSandbox, identityModule, runtimeCatalogue, remoteRegistry) {\n    (0, _classCallCheck3.default)(this, Registry);\n\n\n    // how some functions receive the parameters for example:\n    // new Registry('hyperty-runtime://sp1/123', appSandbox, idModule, remoteRegistry);\n    // registry.registerStub(sandbox, 'sp1');\n    // registry.registerHyperty(sandBox, 'hyperty-runtime://sp1/123');\n    // registry.resolve('hyperty-runtime://sp1/123');\n\n    var _this2 = (0, _possibleConstructorReturn3.default)(this, (0, _getPrototypeOf2.default)(Registry).call(this));\n\n    if (!runtimeURL) throw new Error('runtimeURL is missing.');\n    /*if (!remoteRegistry) throw new Error('remoteRegistry is missing');*/\n\n    var _this = _this2;\n\n    _this.registryURL = runtimeURL + '/registry/';\n    _this.appSandbox = appSandbox;\n    _this.runtimeURL = runtimeURL;\n    _this.runtimeCatalogue = runtimeCatalogue;\n    _this.remoteRegistry = remoteRegistry;\n    _this.idModule = identityModule;\n    _this.identifier = Math.floor(Math.random() * 10000 + 1);\n\n    // the expires in 3600, represents 1 hour\n    //the expires is in seconds, unit of measure received by the domain registry\n    _this.expiresTime = 3600;\n\n    _this.hypertiesListToRemove = {};\n    _this.hypertiesList = [];\n    _this.protostubsList = {};\n    _this.idpProxyList = {};\n    _this.dataObjectList = {};\n    _this.subscribedDataObjectList = {};\n    _this.sandboxesList = { sandbox: {}, appSandbox: {} };\n    _this.pepList = {};\n\n    _this._domain = (0, _utils.divideURL)(_this.registryURL).domain;\n    _this.sandboxesList.appSandbox[runtimeURL] = appSandbox;\n    var msgFactory = new _MessageFactory.MessageFactory('false', '{}');\n    _this.messageFactory = msgFactory;\n    return _this2;\n  }\n\n  /**\n  * return the messageBus in this Registry\n  * @param {MessageBus}           messageBus\n  */\n\n\n  (0, _createClass3.default)(Registry, [{\n    key: '_getIdentityAssociated',\n    value: function _getIdentityAssociated(type, hypertyURL) {\n      var _this = this;\n\n      for (var hyperty in _this.hypertiesList) {\n        var value = _this.hypertiesList[hyperty];\n        if (value._hypertyURL === hypertyURL) {\n          switch (type) {\n            case 'username':\n              return value._user.username;\n            case 'cn':\n              return value._user.cn;\n            case 'locale':\n              return value._user.locale;\n            case 'avatar':\n              return value._user.avatar;\n            case 'userURL':\n              return value._user.userURL;\n            case '.':\n              return value._user;\n            default:\n              return '';\n          }\n        }\n      }\n      return '';\n    }\n\n    /**\n    * query the domain registry for information from a dataObject URL\n    * @param  {String}   url            dataObject URL\n    * @return {JSON}     dataObject     data object\n    */\n\n  }, {\n    key: 'discoverDataObjectPerURL',\n    value: function discoverDataObjectPerURL(url, domain) {\n      var _this = this;\n      var activeDomain = void 0;\n\n      if (!domain) {\n        activeDomain = _this._domain;\n      } else {\n        activeDomain = domain;\n      }\n\n      var msg = {\n        type: 'read', from: _this.registryURL, to: 'domain://registry.' + activeDomain + '/', body: { resource: url, search: 'dataObjectPerURL' }\n      };\n\n      return new _promise2.default(function (resolve, reject) {\n\n        _this._messageBus.postMessage(msg, function (reply) {\n\n          var dataObject = reply.body.value;\n\n          if (dataObject) {\n            resolve(dataObject);\n          } else {\n            reject('DataObject not found');\n          }\n        });\n      });\n    }\n\n    /**\n    * This function is used to return the sandbox instance where the Application is executing. It is assumed there is just one App per Runtime instance.\n    */\n\n  }, {\n    key: 'getAppSandbox',\n    value: function getAppSandbox() {\n      var _this = this;\n      return _this.appSandbox;\n    }\n\n    /**\n    * This function returns the user associated to the hyperty URL\n    * @param    {String}    hypertyURL      hyperty URL\n    * @return   {String}    userURL         user URL\n    */\n\n  }, {\n    key: 'getHypertyOwner',\n    value: function getHypertyOwner(hypertyURL) {\n\n      var _this = this;\n      var userURL = void 0;\n\n      for (var index in _this.hypertiesList) {\n        var hyperty = _this.hypertiesList[index];\n        if (hyperty.hypertyURL === hypertyURL) {\n          userURL = hyperty.user.userURL;\n        }\n      }\n      return userURL;\n    }\n\n    /**\n    * returns the hyperty Name from a given url. This url could be from a dataObject or hyperty\n    * @param    {String}    url      hyperty or dataObject URL\n    * @return   {String}    hypertyName     hyperty Name\n    */\n\n  }, {\n    key: 'getHypertyName',\n    value: function getHypertyName(url) {\n      var _this = this;\n\n      var isHypertyURL = (0, _utils.divideURL)(url).type === 'hyperty';\n\n      //value to be returned in the end\n      var hypertyName = void 0;\n\n      //if is not an hyperty, check if is a dataObject and obtain his reporter\n      var hypertyURL = isHypertyURL ? hypertyURL = url : _this.getReporterURLSynchonous(url);\n\n      for (var index in _this.hypertiesList) {\n        var hyperty = _this.hypertiesList[index];\n        if (hyperty.hypertyURL === hypertyURL) {\n          hypertyName = hyperty.objectName;\n          break;\n        }\n      }\n      return hypertyName;\n    }\n\n    /**\n    * function to return the reporterURL associated with the dataobject URL\n    * @param    {String}     dataObjectURL    dataObjectURL\n    * @return   {String}     reporterURL      reporterURL\n    */\n\n  }, {\n    key: 'getReporterURL',\n    value: function getReporterURL(dataObjectURL) {\n      var _this = this;\n\n      var dataObject = _this.dataObjectList[dataObjectURL];\n\n      return new _promise2.default(function (resolve, reject) {\n        if (dataObject) {\n          resolve(dataObject.reporter);\n        } else {\n          reject('No reporter was found');\n        }\n      });\n    }\n\n    /**\n    * function to return the reporterURL associated with the dataobject URL. no promise returned\n    * @param    {String}     dataObjectURL    dataObjectURL\n    * @return   {String}     reporterURL      reporterURL\n    */\n\n  }, {\n    key: 'getReporterURLSynchonous',\n    value: function getReporterURLSynchonous(dataObjectURL) {\n      var _this = this;\n\n      var dataObject = _this.dataObjectList[dataObjectURL];\n\n      return dataObject ? dataObject.reporter : undefined;\n    }\n\n    /**\n    * returns the hyperty URL that subscribed the dataObject\n    * @param    {String}     url            url format\n    * @return   {String}    Hyperty URL subscribed to the URL\n    */\n\n  }, {\n    key: 'getDataObjectSubscriberHyperty',\n    value: function getDataObjectSubscriberHyperty(url) {\n      var _this = this;\n\n      return _this.subscribedDataObjectList[url];\n    }\n\n    /**\n    * register a desired dataObject to subscribe\n    * @param    {String}    dataObjectURL      dataObject URL\n    */\n\n  }, {\n    key: 'registerSubscribedDataObject',\n    value: function registerSubscribedDataObject(dataObjectURL, hypertyURL) {\n      var _this = this;\n      if (_this.subscribedDataObjectList[dataObjectURL] === undefined) {\n        _this.subscribedDataObjectList[dataObjectURL] = hypertyURL;\n      }\n    }\n\n    /**\n    * Function to return the list of pre authorised users received in the creation of a data object\n    * @param    {String}            dataObjectURL    dataObjectURL\n    * @return   {Array<String>}     preAuth         List of pre authorised users\n    */\n\n  }, {\n    key: 'getPreAuthSubscribers',\n    value: function getPreAuthSubscribers(dataObjectURL) {\n      var _this = this;\n      var dataObject = _this.dataObjectList[dataObjectURL];\n      var preAuth = [];\n\n      if (dataObject) {\n        preAuth = dataObject.preAuth;\n      }\n      return preAuth;\n    }\n\n    /**\n    * send requests to unregister all hyperties registered in domain registry\n    * @return   {Promise}     return a promise if the result of unregistration all hyperties\n    */\n\n  }, {\n    key: 'unregisterAllHyperties',\n    value: function unregisterAllHyperties() {\n      var _this = this;\n\n      var unregisterResults = [];\n\n      return new _promise2.default(function (resolve, reject) {\n\n        for (var index in _this.hypertiesList) {\n          var hyperty = _this.hypertiesList[index];\n          var result = _this.unregisterHypertyInstance(hyperty.user.userURL, hyperty.hypertyURL);\n          unregisterResults.push(result);\n        }\n\n        _promise2.default.all(unregisterResults).then(function () {\n\n          resolve('successfully unregistered all hyperties');\n        }, function (error) {\n          reject(error);\n        });\n      });\n    }\n\n    /**\n    *  function to unregister an hypertyInstance in the Domain Registry\n    *  @param   {String}      user        user url\n    *  @param   {String}      hypertyInstance   HypertyInsntance url\n    *\n    */\n\n  }, {\n    key: 'unregisterHypertyInstance',\n    value: function unregisterHypertyInstance(user, hypertyInstance) {\n      //TODO working but the user\n      var _this = this;\n\n      var message = { type: 'delete', from: _this.registryURL,\n        to: 'domain://registry.' + _this._domain + '/',\n        body: { value: { user: user, hypertyURL: hypertyInstance } } };\n\n      _this._messageBus.postMessage(message, function (reply) {\n        console.log('unregister hyperty Reply', reply);\n      });\n    }\n\n    /**\n    *  function to delete an dataObjectInstance in the Domain Registry\n    *  @param   {String}    name      DataObjectName\n    */\n\n  }, {\n    key: 'deleteDataObjectInstance',\n    value: function deleteDataObjectInstance(name) {\n      var _this = this;\n\n      var message = { type: 'delete', from: _this.registryURL,\n        to: 'domain://registry.' + _this._domain + '/',\n        body: { value: { name: name } } };\n\n      _this._messageBus.postMessage(message, function (reply) {\n        console.log('unregister dataObject Reply', reply);\n      });\n    }\n\n    /**\n    * Function to update an Hyperty\n    */\n\n  }, {\n    key: 'updateHypertyInstance',\n    value: function updateHypertyInstance(resource, value) {\n      var _this = this;\n\n      var message = { type: 'UPDATE', from: _this.registryURL,\n        to: 'domain://registry.' + _this._domain + '/',\n        body: { resource: resource, value: value } };\n\n      _this._messageBus.post.postMessage(message, function (reply) {\n        console.log('Updated hyperty reply', reply);\n      });\n    }\n\n    /**\n    * register a new subscriber in the dataObject registered\n    * @param  {String}   dataObjectURL    dataObject URL\n    * @param  {String}   subscriberURL    subscriber URL\n    */\n\n  }, {\n    key: 'registerSubscriber',\n    value: function registerSubscriber(dataObjectURL, subscriberURL) {\n      var _this = this;\n      var dataObject = _this.dataObjectList[dataObjectURL];\n\n      if (dataObject) {\n        dataObject.subscribers.push(subscriberURL);\n        _this.dataObjectList[dataObjectURL] = dataObject;\n      }\n    }\n\n    /**\n    * get the subscribers registered within a dataObject\n    * @param  {String}          dataObjectURL    dataObject URL\n    * @param  {Array<String>}   Substribers List\n    */\n\n  }, {\n    key: 'getDataObjectSubscribers',\n    value: function getDataObjectSubscribers(dataObjectURL) {\n      var _this = this;\n      var dataObject = _this.dataObjectList[dataObjectURL];\n\n      if (dataObject) {\n        return dataObject.subscribers;\n      } else {\n        throw 'No dataObject was found';\n      }\n    }\n\n    /**\n    * To register a new Data Object in the runtime which returns the dataObjectURL allocated to the new Data Object.\n    * @param  {String}      identifier            identifier\n    * @param  {String}      dataObjectschema            dataObjectschema\n    * @param  {String}      dataObjectUrl        dataObjectUrl\n    * @return {String}      dataObjectReporter         dataObjectReporter\n    */\n\n  }, {\n    key: 'registerDataObject',\n    value: function registerDataObject(identifier, dataObjectschema, dataObjectUrl, dataObjectReporter, authorise) {\n      var _this = this;\n\n      return new _promise2.default(function (resolve, reject) {\n\n        //message to register the new hyperty, within the domain registry\n        var messageValue = { name: identifier, schema: dataObjectschema, url: dataObjectUrl, expires: _this.expiresTime, reporter: dataObjectReporter, preAuth: authorise, subscribers: [] };\n\n        _this.dataObjectList[dataObjectUrl] = messageValue;\n\n        var message = _this.messageFactory.createCreateMessageRequest(_this.registryURL, 'domain://registry.' + _this.registryDomain + '/', messageValue, 'policy');\n\n        _this._messageBus.postMessage(message, function (reply) {\n          console.log('===> registerDataObject Reply: ', reply);\n          if (reply.body.code === 200) {\n            resolve('ok');\n          } else {\n            reject('error on register DataObject');\n          }\n        });\n      });\n    }\n\n    /**\n    * To register a new Hyperty in the runtime which returns the HypertyURL allocated to the new Hyperty.\n    * @param  {Sandbox}             sandbox               sandbox\n    * @param  {HypertyCatalogueURL} HypertyCatalogueURL   descriptor\n    * @return {HypertyURL}          HypertyURL\n    */\n\n  }, {\n    key: 'registerHyperty',\n    value: function registerHyperty(sandbox, descriptorURL, descriptor) {\n      var _this = this;\n\n      //assuming descriptor come in this format, the service-provider-domain url is retrieved by a split instruction\n      //hyperty-catalogue://<service-provider-domain>/<catalogue-object-identifier>\n      var domainUrl = (0, _utils.divideURL)(descriptorURL).domain;\n\n      if (domainUrl.includes('catalogue')) {\n        domainUrl = domainUrl.replace('catalogue.', '');\n      }\n\n      return new _promise2.default(function (resolve, reject) {\n\n        _this.idModule.getIdentityAssertion().then(function (result) {\n          var userProfile = result.userProfile;\n          var identityURL = userProfile.userURL;\n\n          if (_this._messageBus === undefined) {\n            reject('MessageBus not found on registerStub');\n          } else {\n            //call check if the protostub exist\n            _this.resolve('hyperty-runtime://' + domainUrl).then(function () {\n\n              _this.registryDomain = domainUrl;\n\n              // TODO: should be implemented with addresses poll\n              // In this case we will request and return only one\n              // address\n              var numberOfAddresses = 1;\n              _this.addressAllocation.create(domainUrl, numberOfAddresses).then(function (adderessList) {\n\n                adderessList.forEach(function (address) {\n\n                  _this._messageBus.addListener(address + '/status', function (msg) {\n                    console.log('Message addListener for : ', address + '/status -> ' + msg);\n                  });\n                });\n\n                var hyperty = new _HypertyInstance2.default(_this.identifier, _this.registryURL, descriptorURL, descriptor, adderessList[0], userProfile);\n\n                _this.hypertiesList.push(hyperty);\n\n                //check whether the received sanbox e ApplicationSandbox or a normal sandbox\n                if (sandbox.type === 'app') {\n                  _this.sandboxesList.appSandbox[adderessList[0]] = sandbox;\n                } else if (sandbox.type === 'normal') {\n                  _this.sandboxesList.sandbox[adderessList[0]] = sandbox;\n                } else {\n                  reject('Wrong SandboxType');\n                }\n\n                var resources = void 0;\n\n                // check if the hyperty resources is a vector or a string\n                // TODO delete later when catalogue is fixed\n                if (typeof descriptor.hypertyType === 'string') {\n                  resources = [];\n                  resources.push(descriptor.hypertyType);\n                } else {\n                  resources = descriptor.hypertyType;\n                }\n\n                var descriptorDataSchema = descriptor.dataObjects;\n                var dataSchemasArray = [];\n\n                //this will create a array with a Promise in each position\n                for (var index in descriptorDataSchema) {\n                  dataSchemasArray.push(_this.runtimeCatalogue.getDataSchemaDescriptor(descriptorDataSchema[index]));\n                }\n\n                // as soon as the previous array is completed, this will wait for the resolve of all promises in the array\n                _promise2.default.all(dataSchemasArray).then(function (dataSchemas) {\n\n                  var filteredDataSchemas = [];\n                  for (var _index in dataSchemas) {\n                    var dataSchema = dataSchemas[_index];\n                    filteredDataSchemas.push(dataSchema.sourcePackage.sourceCode.properties.scheme.constant);\n                  }\n\n                  //message to register the new hyperty, within the domain registry\n                  var messageValue = { user: identityURL, hypertyDescriptorURL: descriptorURL, hypertyURL: adderessList[0], expires: _this.expiresTime, resources: resources, dataSchemes: filteredDataSchemas };\n\n                  var message = _this.messageFactory.createCreateMessageRequest(_this.registryURL, 'domain://registry.' + _this.registryDomain + '/', messageValue, 'policy');\n\n                  _this._messageBus.postMessage(message, function (reply) {\n                    console.log('===> RegisterHyperty Reply: ', reply);\n\n                    if (reply.body.code === 200) {\n                      resolve(adderessList[0]);\n                    } else {\n                      reject('Failed to register an Hyperty');\n                    }\n                  });\n\n                  //timer to keep the registration alive\n                  // the time is defined by a little less than half of the expires time defined\n                  var keepAliveTimer = setInterval(function () {\n\n                    var message = _this.messageFactory.createCreateMessageRequest(_this.registryURL, 'domain://registry.' + _this.registryDomain + '/', messageValue, 'policy');\n\n                    _this._messageBus.postMessage(message, function (reply) {\n                      console.log('===> KeepAlive Reply: ', reply);\n                    });\n                  }, _this.expiresTime / 1.1 / 2 * 1000);\n\n                  console.log('Hyperty Schemas', filteredDataSchemas);\n                  console.log('Hyperty resources', resources);\n                });\n              }).catch(function (reason) {\n                console.log('Address Reason: ', reason);\n                reject(reason);\n              });\n            });\n          }\n        }, function (err) {\n          reject('Failed to obtain an identity');\n        });\n      });\n    }\n\n    /**\n    * To unregister a previously registered Hyperty\n    * @param  {HypertyURL}          HypertyURL url        url\n    */\n\n  }, {\n    key: 'unregisterHyperty',\n    value: function unregisterHyperty(url) {\n      var _this = this;\n\n      return new _promise2.default(function (resolve, reject) {\n\n        var found = false;\n        var index = 0;\n\n        for (index = 0; index < _this.hypertiesList.length; index++) {\n          var hyperty = _this.hypertiesList[index];\n          if (hyperty !== undefined) {\n            if (hyperty.hypertyURL === url) {\n              found = true;\n              break;\n            }\n          }\n        }\n\n        if (found === false) {\n          reject('Hyperty not found');\n        } else {\n          delete _this.hypertiesList[index];\n          resolve('Hyperty successfully deleted');\n        }\n      });\n    }\n\n    /**\n    * To discover protocol stubs available in the runtime for a certain domain. If available, it returns the runtime url for the protocol stub that connects to the requested domain. Required by the runtime BUS to route messages to remote servers or peers (do we need something similar for Hyperties?).\n    * @param  {DomainURL}           DomainURL            url\n    * @return {RuntimeURL}           RuntimeURL\n    */\n\n  }, {\n    key: 'discoverProtostub',\n    value: function discoverProtostub(url) {\n      if (!url) throw new Error('Parameter url needed');\n      var _this = this;\n\n      return new _promise2.default(function (resolve, reject) {\n\n        var request = _this.protostubsList[url];\n\n        if (request === undefined) {\n          reject('requestUpdate couldn\\'t get the ProtostubURL');\n        } else {\n          resolve(request);\n        }\n      });\n    }\n\n    /**\n     * To register a new Protocol Stub in the runtime including as input parameters the function to postMessage, the DomainURL that is connected with the stub, which returns the RuntimeURL allocated to the new ProtocolStub.\n     * @param {Sandbox}        Sandbox\n     * @param  {DomainURL}     DomainURL service provider domain\n     * @return {RuntimeProtoStubURL}\n     */\n\n  }, {\n    key: 'registerStub',\n    value: function registerStub(sandbox, domainURL) {\n      var _this = this;\n      var runtimeProtoStubURL = void 0;\n\n      return new _promise2.default(function (resolve, reject) {\n\n        //check if messageBus is registered in registry or not\n        if (_this._messageBus === undefined) {\n          reject('MessageBus not found on registerStub');\n        }\n\n        //TODO implement a unique number for the protostubURL\n        if (!domainURL.indexOf('msg-node.')) {\n          domainURL = domainURL.substring(domainURL.indexOf('.') + 1);\n        }\n\n        runtimeProtoStubURL = 'msg-node.' + domainURL + '/protostub/' + Math.floor(Math.random() * 10000 + 1);\n\n        // TODO: Optimize this\n        _this.protostubsList[domainURL] = runtimeProtoStubURL;\n        _this.sandboxesList.sandbox[runtimeProtoStubURL] = sandbox;\n\n        // sandbox.addListener('*', function(msg) {\n        //   _this._messageBus.postMessage(msg);\n        // });\n\n        resolve(runtimeProtoStubURL);\n\n        _this._messageBus.addListener(runtimeProtoStubURL + '/status', function (msg) {\n          if (msg.resource === msg.to + '/status') {\n            console.log('RuntimeProtostubURL/status message: ', msg.body.value);\n          }\n        });\n      });\n    }\n\n    /**\n    * To unregister a previously registered protocol stub\n    * @param  {HypertyRuntimeURL}   HypertyRuntimeURL     hypertyRuntimeURL\n    */\n\n  }, {\n    key: 'unregisterStub',\n    value: function unregisterStub(hypertyRuntimeURL) {\n      var _this = this;\n      var runtimeProtoStubURL = void 0;\n\n      return new _promise2.default(function (resolve, reject) {\n\n        var data = _this.protostubsList[hypertyRuntimeURL];\n\n        if (data === undefined) {\n          reject('Error on unregisterStub: Hyperty not found');\n        } else {\n          delete _this.protostubsList[hypertyRuntimeURL];\n          resolve('ProtostubURL removed');\n        }\n      });\n    }\n\n    /**\n     * To register a new Identity Provider proxy in the runtime including as input parameters the function to postMessage, the DomainURL that is connected with the stub, which returns the RuntimeURL allocated to the new ProtocolStub.\n     * @param {Sandbox}        Sandbox\n     * @param  {DomainURL}     DomainURL service provider domain\n     * @return {RuntimeIdpProxyURL}\n     */\n\n  }, {\n    key: 'registerIdpProxy',\n    value: function registerIdpProxy(sandbox, domainURL) {\n      var _this = this;\n      var idpProxyStubURL = void 0;\n\n      return new _promise2.default(function (resolve, reject) {\n\n        //check if messageBus is registered in registry or not\n        if (_this._messageBus === undefined) {\n          reject('MessageBus not found on registerStub');\n        }\n\n        idpProxyStubURL = 'domain-idp://' + domainURL + '/stub/' + Math.floor(Math.random() * 10000 + 1);\n\n        // TODO: Optimize this\n        _this.idpProxyList[domainURL] = idpProxyStubURL;\n        _this.sandboxesList.sandbox[idpProxyStubURL] = sandbox;\n\n        // sandbox.addListener('*', function(msg) {\n        //   _this._messageBus.postMessage(msg);\n        // });\n\n        resolve(idpProxyStubURL);\n\n        _this._messageBus.addListener(idpProxyStubURL + '/status', function (msg) {\n          if (msg.resource === msg.to + '/status') {\n            console.log('idpProxyStubURL/status message: ', msg.body.value);\n          }\n        });\n      });\n    }\n\n    /**\n    * To discover idpProxy stubs available in the runtime for a certain domain. If available, it returns the runtime url for the idpProxy stub that connects to the requested domain. Required by the runtime BUS to route messages to remote servers or peers\n    * @param  {DomainURL}           DomainURL            url\n    * @return {RuntimeURL}           RuntimeURL         idpProxyUrl\n    */\n\n  }, {\n    key: 'discoverIdpProxy',\n    value: function discoverIdpProxy(url) {\n      if (!url) throw new Error('Parameter url needed');\n      var _this = this;\n\n      return new _promise2.default(function (resolve, reject) {\n\n        var request = _this.idpProxyList[url];\n\n        if (request === undefined) {\n          reject('requestUpdate couldn\\'t get the idpProxyURL');\n        } else {\n          resolve(request);\n        }\n      });\n    }\n\n    /**\n    * To register a new Policy Enforcer in the runtime including as input parameters the function to postMessage, the HypertyURL associated with the PEP, which returns the RuntimeURL allocated to the new Policy Enforcer component.\n    * @param  {Message.Message} postMessage postMessage\n    * @param  {HypertyURL}          HypertyURL            hyperty\n    * @return {HypertyRuntimeURL}   HypertyRuntimeURL\n    */\n\n  }, {\n    key: 'registerPEP',\n    value: function registerPEP(postMessage, hyperty) {\n      var _this = this;\n\n      return new _promise2.default(function (resolve, reject) {\n        //TODO check what parameter in the postMessage the pep is.\n        _this.pepList[hyperty] = postMessage;\n        resolve('PEP registered with success');\n      });\n    }\n\n    /**\n    * To unregister a previously registered protocol stub\n    * @param  {HypertyRuntimeURL}   HypertyRuntimeURL     HypertyRuntimeURL\n    */\n\n  }, {\n    key: 'unregisterPEP',\n    value: function unregisterPEP(HypertyRuntimeURL) {\n      var _this = this;\n\n      return new _promise2.default(function (resolve, reject) {\n\n        var result = _this.pepList[HypertyRuntimeURL];\n\n        if (result === undefined) {\n          reject('Pep Not found.');\n        } else {\n          resolve('PEP successfully removed.');\n        }\n      });\n    }\n\n    /**\n    * To receive status events from components registered in the Registry.\n    * @param  {Message.Message}     Message.Message       event\n    */\n\n  }, {\n    key: 'onEvent',\n    value: function onEvent(event) {\n      // TODO body...\n      console.log('onEvent');\n    }\n\n    /**\n    * To discover sandboxes available in the runtime for a certain domain. Required by the runtime UA to avoid more than one sandbox for the same domain.\n    * @param  {DomainURL} DomainURL url\n    * @return {RuntimeSandbox}           RuntimeSandbox\n    */\n\n  }, {\n    key: 'getSandbox',\n    value: function getSandbox(url) {\n      if (!url) throw new Error('Parameter url needed');\n      console.log('getSandbox: ', url);\n\n      var _this = this;\n      return new _promise2.default(function (resolve, reject) {\n\n        var request = void 0;\n\n        //first try to find the url in the appSandbox list\n        request = _this.sandboxesList.appSandbox[url];\n\n        //if no appSandbox was found, try to search in the normal sandboxes list\n        if (!request) {\n          request = _this.sandboxesList.sandbox[url];\n\n          if (!request) {\n\n            var domain = (0, _utils.divideURL)(url).domain;\n\n            // search in the sandboxes list for a entry containing the domain given\n            for (var sandbox in _this.sandboxesList.sandbox) {\n              if (sandbox.includes(domain)) {\n                request = _this.sandboxesList.sandbox[sandbox];\n                break;\n              }\n            }\n          }\n        }\n\n        if (!request) {\n          reject('no sandbox found for: ' + url);\n        } else {\n          resolve(request);\n        }\n      });\n    }\n\n    /**\n    * To verify if source is valid and to resolve target runtime url address if needed (eg protostub runtime url in case the message is to be dispatched to a remote endpoint).\n    * @param  {URL.URL}  url       url\n    * @return {Promise<URL.URL>}                 Promise <URL.URL>\n    */\n\n  }, {\n    key: 'resolve',\n    value: function resolve(url) {\n      console.log('resolve ' + url);\n      var _this = this;\n\n      //split the url to find the domainURL. deals with the url for example as:\n      //\"hyperty-runtime://sp1/protostub/123\",\n      var dividedURL = (0, _utils.divideURL)(url);\n      var domainUrl = dividedURL.domain;\n      var type = dividedURL.type;\n\n      // resolve the domain protostub in case of a message to global registry\n      if (url.includes('global://registry')) {\n        domainUrl = _this._domain;\n      }\n\n      return new _promise2.default(function (resolve, reject) {\n\n        if (!domainUrl.indexOf('msg-node.') || !domainUrl.indexOf('registry.')) {\n          domainUrl = domainUrl.substring(domainUrl.indexOf('.') + 1);\n        }\n\n        var request = void 0;\n        if (type === 'domain-idp') {\n          request = _this.idpProxyList[domainUrl];\n        } else {\n          request = _this.protostubsList[domainUrl];\n        }\n\n        _this.addEventListener('runtime:stubLoaded', function (domainUrl) {\n          request = _this.protostubsList[domainUrl];\n          console.info('Resolved Protostub: ', request);\n          resolve(request);\n        });\n\n        _this.addEventListener('runtime:idpProxyLoaded', function (domainUrl) {\n          request = _this.idpProxyList[domainUrl];\n          console.info('Resolved IDPProxy: ', request);\n          resolve(request);\n        });\n\n        if (request !== undefined) {\n          console.info('Resolved: ', request);\n          resolve(request);\n        } else {\n          if (type === 'domain-idp') {\n            _this.trigger('runtime:loadIdpProxy', domainUrl);\n          } else {\n            _this.trigger('runtime:loadStub', domainUrl);\n          }\n        }\n      });\n    }\n  }, {\n    key: 'messageBus',\n    get: function get() {\n      var _this = this;\n      return _this._messageBus;\n    }\n\n    /**\n    * Set the messageBus in this Registry\n    * @param {MessageBus}           messageBus\n    */\n    ,\n    set: function set(messageBus) {\n      var _this = this;\n      _this._messageBus = messageBus;\n\n      _this._messageBus.addListener(_this.registryURL, function (msg) {\n\n        var userUrl = _this._getIdentityAssociated(msg.body.resource, msg.body.criteria);\n\n        var reply = { id: msg.id, type: 'response', to: msg.from, from: msg.to, body: { resource: userUrl } };\n        reply.body.code = userUrl ? 200 : 404;\n\n        _this._messageBus.postMessage(reply);\n      });\n\n      // also set up messageBus in the IdentityModule component\n      // TODO redefine a better way to add the messageBus in the IdModule\n      _this.idModule.messageBus = messageBus;\n\n      // Install AddressAllocation\n      var addressAllocation = new _AddressAllocation2.default(_this.registryURL, messageBus);\n      _this.addressAllocation = addressAllocation;\n\n      //Install ObjectAllocation\n      var objectAllocation = new _ObjectAllocation2.default(_this.registryURL + '/object-allocation', messageBus);\n      _this.objectAllocation = objectAllocation;\n\n      /*let discovery = new Discovery(_this.registryURL, messageBus);\n      _this.discovery = discovery;\n       let identityManager = new IdentityManager('hyperty://localhost/833a6e52-515b-498b-a57b-e3daeece48d2', _this.runtimeURL, messageBus);\n      _this.identityManager = identityManager;*/\n    }\n  }]);\n  return Registry;\n}(_EventEmitter3.default);\n\nexports.default = Registry;\nmodule.exports = exports['default'];\n\n},{\"../syncher/ObjectAllocation\":440,\"../utils/EventEmitter\":445,\"../utils/utils.js\":447,\"./AddressAllocation\":435,\"./HypertyInstance\":436,\"babel-runtime/core-js/object/get-prototype-of\":6,\"babel-runtime/core-js/promise\":10,\"babel-runtime/helpers/classCallCheck\":13,\"babel-runtime/helpers/createClass\":14,\"babel-runtime/helpers/inherits\":15,\"babel-runtime/helpers/possibleConstructorReturn\":16,\"service-framework/dist/MessageFactory\":413}],438:[function(require,module,exports){\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _classCallCheck2 = require(\"babel-runtime/helpers/classCallCheck\");\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _createClass2 = require(\"babel-runtime/helpers/createClass\");\n\nvar _createClass3 = _interopRequireDefault(_createClass2);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n* Copyright 2016 PT Inovação e Sistemas SA\n* Copyright 2016 INESC-ID\n* Copyright 2016 QUOBIS NETWORKS SL\n* Copyright 2016 FRAUNHOFER-GESELLSCHAFT ZUR FOERDERUNG DER ANGEWANDTEN FORSCHUNG E.V\n* Copyright 2016 ORANGE SA\n* Copyright 2016 Deutsche Telekom AG\n* Copyright 2016 Apizee\n* Copyright 2016 TECHNISCHE UNIVERSITAT BERLIN\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n**/\n/**\n*   @author: Gil Dias (gil.dias@tecnico.ulisboa.pt)\n*   Registry Data Model includes all Objects to be handled by the Registry functionality including\n*/\n\nvar RegistryDataModel = function () {\n  function RegistryDataModel(id, url, descriptorURL, startingTime, lastModified, status, stubs, stubsConfiguration) {\n    (0, _classCallCheck3.default)(this, RegistryDataModel);\n\n    var _this = this;\n\n    _this._id = id;\n    _this._url = url;\n    _this._descriptorURL = descriptorURL;\n    _this._startingTime = startingTime;\n    _this._lastModified = lastModified;\n    _this._status = status;\n    _this._stubs = stubs;\n    _this._stubsConfiguration = stubsConfiguration;\n  }\n\n  (0, _createClass3.default)(RegistryDataModel, [{\n    key: \"id\",\n    get: function get() {\n      var _this = this;\n      return _this._id;\n    }\n  }, {\n    key: \"url\",\n    get: function get() {\n      var _this = this;\n      return _this._url;\n    }\n  }, {\n    key: \"descriptor\",\n    get: function get() {\n      var _this = this;\n      return _this._descriptorURL;\n    }\n  }]);\n  return RegistryDataModel;\n}();\n\nexports.default = RegistryDataModel;\nmodule.exports = exports['default'];\n\n},{\"babel-runtime/helpers/classCallCheck\":13,\"babel-runtime/helpers/createClass\":14}],439:[function(require,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _assign = require('babel-runtime/core-js/object/assign');\n\nvar _assign2 = _interopRequireDefault(_assign);\n\nvar _promise = require('babel-runtime/core-js/promise');\n\nvar _promise2 = _interopRequireDefault(_promise);\n\nvar _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _createClass2 = require('babel-runtime/helpers/createClass');\n\nvar _createClass3 = _interopRequireDefault(_createClass2);\n\nrequire('babel-polyfill');\n\nvar _Registry = require('../registry/Registry');\n\nvar _Registry2 = _interopRequireDefault(_Registry);\n\nvar _IdentityModule = require('../identity/IdentityModule');\n\nvar _IdentityModule2 = _interopRequireDefault(_IdentityModule);\n\nvar _PolicyEngine = require('../policy/PolicyEngine');\n\nvar _PolicyEngine2 = _interopRequireDefault(_PolicyEngine);\n\nvar _MessageBus = require('../bus/MessageBus');\n\nvar _MessageBus2 = _interopRequireDefault(_MessageBus);\n\nvar _SyncherManager = require('../syncher/SyncherManager');\n\nvar _SyncherManager2 = _interopRequireDefault(_SyncherManager);\n\nvar _RuntimeCoreCtx = require('../policy/context/RuntimeCoreCtx');\n\nvar _RuntimeCoreCtx2 = _interopRequireDefault(_RuntimeCoreCtx);\n\nvar _utils = require('../utils/utils');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * Runtime User Agent Interface will process all the dependecies of the core runtime;\n * @author Vitor Silva [vitor-t-silva@telecom.pt]\n * @version 0.4.0\n *\n * @property {runtimeFactory} runtimeFactory - Specific implementation for all environments;\n * @property {RuntimeCatalogue} runtimeCatalogue - Catalogue of components can be installed;\n * @property {runtimeURL} runtimeURL - This identify the core runtime, should be unique;\n * @property {IdentityModule} identityModule - Identity Module;\n * @property {PolicyEngine} policyEngine - Policy Engine Module;\n * @property {Registry} registry - Registry Module;\n * @property {MessageBus} messageBus - Message Bus is used like a router to redirect the messages from one component to other(s)\n * @property {GraphConnector} graphConnector - Graph Connector handling GUID and contacts\n */\n/**\n* Copyright 2016 PT Inovação e Sistemas SA\n* Copyright 2016 INESC-ID\n* Copyright 2016 QUOBIS NETWORKS SL\n* Copyright 2016 FRAUNHOFER-GESELLSCHAFT ZUR FOERDERUNG DER ANGEWANDTEN FORSCHUNG E.V\n* Copyright 2016 ORANGE SA\n* Copyright 2016 Deutsche Telekom AG\n* Copyright 2016 Apizee\n* Copyright 2016 TECHNISCHE UNIVERSITAT BERLIN\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n**/\n\nvar RuntimeUA = function () {\n\n  /**\n   * Create a new instance of Runtime User Agent\n   * @param {runtimeFactory} runtimeFactory - Specific implementation for the environment where the core runtime will run;\n   * @param {domain} domainURL - specify the domain base for the runtime;\n   */\n\n  function RuntimeUA(runtimeFactory, domain) {\n    (0, _classCallCheck3.default)(this, RuntimeUA);\n\n\n    if (!runtimeFactory) throw new Error('The sandbox factory is a needed parameter');\n    if (!domain) throw new Error('You need the domain of runtime');\n\n    var _this = this;\n\n    _this.runtimeFactory = runtimeFactory;\n    _this.runtimeCatalogue = runtimeFactory.createRuntimeCatalogue();\n\n    // TODO: post and return registry/hypertyRuntimeInstance to and from Back-end Service\n    // the response is like: runtime://sp1/123\n\n    var runtimeURL = 'runtime://' + domain + '/' + Math.floor(Math.random() * 10000 + 1);\n    _this.runtimeURL = runtimeURL;\n    _this.domain = domain;\n\n    // TODO: check if runtime catalogue need the runtimeURL;\n    _this.runtimeCatalogue.runtimeURL = runtimeURL;\n\n    // Instantiate the identity Module\n    _this.identityModule = new _IdentityModule2.default(runtimeURL);\n\n    // Use the sandbox factory to create an AppSandbox;\n    // In the future can be decided by policyEngine if we need\n    // create a AppSandbox or not;\n    var appSandbox = runtimeFactory.createAppSandbox();\n\n    // Instantiate the Registry Module\n    _this.registry = new _Registry2.default(runtimeURL, appSandbox, _this.identityModule, _this.runtimeCatalogue);\n\n    // Instantiate the Message Bus\n    _this.messageBus = new _MessageBus2.default(_this.registry);\n\n    // Instantiate the Policy Engine\n    _this.policyEngine = new _PolicyEngine2.default(new _RuntimeCoreCtx2.default(_this.identityModule, _this.registry));\n\n    _this.messageBus.pipeline.handlers = [\n\n    // Policy message authorise\n    function (ctx) {\n      _this.policyEngine.authorise(ctx.msg).then(function (changedMgs) {\n        ctx.msg = changedMgs;\n        ctx.next();\n      }).catch(function (reason) {\n        console.error(reason);\n        ctx.fail(reason);\n      });\n    }];\n\n    // Add to App Sandbox the listener;\n    appSandbox.addListener('*', function (msg) {\n      _this.messageBus.postMessage(msg);\n    });\n\n    // Register messageBus on Registry\n    _this.registry.messageBus = _this.messageBus;\n\n    // Register registry on IdentityModule\n    _this.identityModule.registry = _this.registry;\n\n    _this.registry.addEventListener('runtime:loadStub', function (domainURL) {\n      _this.loadStub(domainURL).then(function () {\n        _this.registry.trigger('runtime:stubLoaded', domainURL);\n      }).catch(function (reason) {\n        console.error('Failed to deploy the ProtocolStub component ', reason);\n      });\n    });\n\n    _this.registry.addEventListener('runtime:loadIdpProxy', function (domainURL) {\n      _this.loadIdpProxy(domainURL).then(function () {\n        _this.registry.trigger('runtime:idpProxyLoaded', domainURL);\n      }).catch(function (reason) {\n        console.error('Failed to deploy the IDP Proxy component ', reason);\n      });\n    });\n\n    // Use sandbox factory to use specific methods\n    // and set the message bus to the factory\n    runtimeFactory.messageBus = _this.messageBus;\n\n    // Instanciate the SyncherManager;\n    _this.syncherManager = new _SyncherManager2.default(_this.runtimeURL, _this.messageBus, _this.registry, _this.runtimeCatalogue);\n\n    // Instantiate the Graph Connector\n    // _this.graphConnector = new GraphConnector(_this.runtimeURL, _this.messageBus);\n  }\n\n  /**\n  * Accomodate interoperability in H2H and proto on the fly for newly discovered devices in M2M\n  * @param  {CatalogueDataObject.HypertyDescriptor}   descriptor    descriptor\n  */\n\n\n  (0, _createClass3.default)(RuntimeUA, [{\n    key: 'discoverHiperty',\n    value: function discoverHiperty(descriptor) {}\n    // Body...\n\n\n    /**\n    * Register Hyperty deployed by the App that is passed as input parameter. To be used when App and Hyperties are from the same domain otherwise the RuntimeUA will raise an exception and the App has to use the loadHyperty(..) function.\n    * @param  {Object} Object                   hypertyInstance\n    * @param  {URL.HypertyCatalogueURL}         descriptor      descriptor\n    */\n\n  }, {\n    key: 'registerHyperty',\n    value: function registerHyperty(hypertyInstance, descriptor) {}\n    // Body...\n\n\n    /**\n    * Deploy Hyperty from Catalogue URL\n    * @param  {URL.HypertyCatalogueURL}    hyperty hypertyDescriptor url;\n    */\n\n  }, {\n    key: 'loadHyperty',\n    value: function loadHyperty(hypertyDescriptorURL) {\n\n      var _this = this;\n\n      if (!hypertyDescriptorURL) throw new Error('Hyperty descriptor url parameter is needed');\n\n      return new _promise2.default(function (resolve, reject) {\n\n        var _hypertyURL = void 0;\n        var _hypertySandbox = void 0;\n        var _hypertyDescriptor = void 0;\n        var _hypertySourcePackage = void 0;\n\n        var errorReason = function errorReason(reason) {\n          console.error('Something failed on the deploy hyperty: ', reason);\n          reject(reason);\n        };\n\n        // Get Hyperty descriptor\n        // TODO: the request Module should be changed,\n        // because at this moment it is incompatible with nodejs;\n        // Probably we need to pass a factory like we do for sandboxes;\n        console.info('------------------ Hyperty ------------------------');\n        console.info('Get hyperty descriptor for :', hypertyDescriptorURL);\n        return _this.runtimeCatalogue.getHypertyDescriptor(hypertyDescriptorURL).then(function (hypertyDescriptor) {\n          // at this point, we have completed \"step 2 and 3\" as shown in https://github.com/reTHINK-project/core-framework/blob/master/docs/specs/runtime/dynamic-view/basics/deploy-hyperty.md\n          console.info('1: return hyperty descriptor');\n\n          // hyperty contains the full path of the catalogue URL, e.g.\n          // catalogue.rethink.eu/.well-known/..........\n          _hypertyDescriptor = hypertyDescriptor;\n\n          var sourcePackageURL = hypertyDescriptor.sourcePackageURL;\n\n          if (sourcePackageURL === '/sourcePackage') {\n            return hypertyDescriptor.sourcePackage;\n          }\n\n          // Get the hyperty source code\n          return _this.runtimeCatalogue.getSourcePackageFromURL(sourcePackageURL);\n        }).then(function (sourcePackage) {\n          console.info('2: return hyperty source code');\n\n          // at this point, we have completed \"step 4 and 5\" as shown in https://github.com/reTHINK-project/core-framework/blob/master/docs/specs/runtime/dynamic-view/basics/deploy-hyperty.md\n\n          _hypertySourcePackage = sourcePackage;\n\n          //\n          // steps 6 -- 9 are skipped.\n          // TODO: on release of core 0.2;\n          // TODO: Promise to check the policy engine\n\n          // mock-up code;\n          // temporary code, only\n          var policy = true;\n\n          return policy;\n        }).then(function (policyResult) {\n          console.info('3: return policy engine result: ', policyResult);\n\n          // we have completed step 6 to 9 of https://github.com/reTHINK-project/core-framework/blob/master/docs/specs/runtime/dynamic-view/basics/deploy-hyperty.md right now.\n          //\n          // Steps 6 -- 9\n          // As a result of the sipped steps, we know at this point if we execute\n          // inSameSandbox or not.\n          //\n\n          // For testing, just assume we execute in same Sandbox.\n          var inSameSandbox = true;\n          var sandbox = void 0;\n\n          if (inSameSandbox) {\n\n            // this don't need be a Promise;\n            sandbox = _this.registry.getAppSandbox();\n\n            // we have completed step 11 here.\n          } else {\n\n            var domain = (0, _utils.divideURL)(hypertyDescriptorURL).domain;\n\n            // getSandbox, this will return a promise;\n            sandbox = _this.registry.getSandbox(domain);\n          }\n\n          // this will return the sandbox or one promise to getSandbox;\n          return sandbox;\n        }).then(function (sandbox) {\n          console.info('4: return the sandbox', sandbox);\n\n          // Return the sandbox indepentely if it running in the same sandbox or not\n          // we have completed step 14 here.\n          return sandbox;\n        }, function (reason) {\n          console.error('4.1: Try to register a new sandbox ', reason);\n\n          // check if the sandbox is registed for this hyperty descriptor url;\n          // Make Steps xxx --- xxx\n          // Instantiate the Sandbox\n          var sandbox = _this.runtimeFactory.createSandbox();\n\n          sandbox.addListener('*', function (msg) {\n            _this.messageBus.postMessage(msg);\n          });\n\n          return sandbox;\n        }).then(function (sandbox) {\n          console.info('5: return sandbox and register');\n\n          _hypertySandbox = sandbox;\n\n          // Register hyperty\n          return _this.registry.registerHyperty(sandbox, hypertyDescriptorURL, _hypertyDescriptor);\n        }).then(function (hypertyURL) {\n          console.info('6: Hyperty url, after register hyperty', hypertyURL);\n\n          // we have completed step 16 of https://github.com/reTHINK-project/core-framework/blob/master/docs/specs/runtime/dynamic-view/basics/deploy-hyperty.md right now.\n          _hypertyURL = hypertyURL;\n\n          // Extend original hyperty configuration;\n          var configuration = {};\n          if (!(0, _utils.emptyObject)(_hypertyDescriptor.configuration)) {\n            try {\n              configuration = (0, _assign2.default)({}, JSON.parse(_hypertyDescriptor.configuration));\n            } catch (e) {\n              configuration = _hypertyDescriptor.configuration;\n            }\n          }\n          configuration.runtimeURL = _this.runtimeURL;\n\n          // We will deploy the component - step 17 of https://github.com/reTHINK-project/core-framework/blob/master/docs/specs/runtime/dynamic-view/basics/deploy-hyperty.md right now.\n          return _hypertySandbox.deployComponent(_hypertySourcePackage.sourceCode, _hypertyURL, configuration);\n        }).then(function (deployComponentStatus) {\n          console.info('7: Deploy component status for hyperty: ', deployComponentStatus);\n\n          // we have completed step 19 https://github.com/reTHINK-project/core-framework/blob/master/docs/specs/runtime/dynamic-view/basics/deploy-hyperty.md right now.\n\n          // Add the message bus listener to the appSandbox or hypertSandbox;\n          _this.messageBus.addListener(_hypertyURL, function (msg) {\n            _hypertySandbox.postMessage(msg);\n          });\n\n          // we have completed step 20 of https://github.com/reTHINK-project/core-framework/blob/master/docs/specs/runtime/dynamic-view/basics/deploy-hyperty.md right now.\n          var hyperty = {\n            runtimeHypertyURL: _hypertyURL,\n            status: deployComponentStatus\n          };\n\n          resolve(hyperty);\n\n          // we have completed step 21 https://github.com/reTHINK-project/core-framework/blob/master/docs/specs/runtime/dynamic-view/basics/deploy-hyperty.md right now.\n          console.log('------------------ END ------------------------');\n        }).catch(errorReason);\n      });\n    }\n\n    /**\n    * Deploy Stub from Catalogue URL or domain url\n    * @param  {URL.URL}     domain          domain\n    */\n\n  }, {\n    key: 'loadStub',\n    value: function loadStub(protostubURL) {\n\n      var _this = this;\n\n      if (!protostubURL) throw new Error('domain parameter is needed');\n\n      return new _promise2.default(function (resolve, reject) {\n\n        var domain = (0, _utils.divideURL)(protostubURL).domain;\n\n        if (!domain) {\n          domain = protostubURL;\n        }\n\n        var _stubSandbox = void 0;\n        var _stubDescriptor = void 0;\n        var _runtimeProtoStubURL = void 0;\n        var _stubSourcePackage = void 0;\n\n        var errorReason = function errorReason(reason) {\n          console.error('Something failed on the deploy of protocolstub: ', reason);\n          reject(reason);\n        };\n\n        // Discover Protocol Stub\n        console.info('------------------- ProtoStub ---------------------------\\n');\n        console.info('Discover or Create a new ProtoStub for domain: ', domain);\n        _this.registry.discoverProtostub(domain).then(function (runtimeProtoStubURL) {\n          // Is registed?\n          console.info('1. Proto Stub Discovered: ', runtimeProtoStubURL);\n\n          // we have completed step 2 https://github.com/reTHINK-project/core-framework/blob/master/docs/specs/runtime/dynamic-view/basics/deploy-protostub.md\n\n          // TODO: Check if the status is saved in the status of sandbox;\n          var stub = {\n            runtimeProtoStubURL: runtimeProtoStubURL,\n            status: 'deployed'\n          };\n\n          resolve(stub);\n          console.info('------------------- END ---------------------------\\n');\n        }).catch(function (reason) {\n\n          // is not registed?\n          console.info('1. Proto Stub not found:', reason);\n\n          // we have completed step 3 https://github.com/reTHINK-project/core-framework/blob/master/docs/specs/runtime/dynamic-view/basics/deploy-protostub.md\n\n          // we need to get ProtoStub descriptor step 4 https://github.com/reTHINK-project/core-framework/blob/master/docs/specs/runtime/dynamic-view/basics/deploy-protostub.md\n          _this.runtimeCatalogue.getStubDescriptor(protostubURL).then(function (stubDescriptor) {\n\n            console.info('2. return the ProtoStub descriptor:', stubDescriptor);\n\n            // we have completed step 5 https://github.com/reTHINK-project/core-framework/blob/master/docs/specs/runtime/dynamic-view/basics/deploy-protostub.md\n            _stubDescriptor = stubDescriptor;\n\n            var sourcePackageURL = stubDescriptor.sourcePackageURL;\n\n            if (sourcePackageURL === '/sourcePackage') {\n              return stubDescriptor.sourcePackage;\n            }\n\n            // we need to get ProtoStub Source code from descriptor - step 6 https://github.com/reTHINK-project/core-framework/blob/master/docs/specs/runtime/dynamic-view/basics/deploy-protostub.md\n            return _this.runtimeCatalogue.getSourcePackageFromURL(sourcePackageURL);\n          }).catch(errorReason).then(function (stubSourcePackage) {\n            console.info('3. return the ProtoStub Source Code: ', stubSourcePackage);\n\n            // we have completed step 7 https://github.com/reTHINK-project/core-framework/blob/master/docs/specs/runtime/dynamic-view/basics/deploy-protostub.md\n\n            _stubSourcePackage = stubSourcePackage;\n\n            // TODO: Check on PEP (policy Engine) if we need the sandbox and check if the Sandbox Factory have the context sandbox;\n            var policy = true;\n            return policy;\n          }).then(function (policy) {\n            // this will return the sandbox or one promise to getSandbox;\n            return _this.registry.getSandbox(domain);\n          }).then(function (stubSandbox) {\n\n            console.info('4. if the sandbox is registered then return the sandbox ', stubSandbox);\n\n            // we have completed step xxx https://github.com/reTHINK-project/core-framework/blob/master/docs/specs/runtime/dynamic-view/basics/deploy-protostub.md\n\n            _stubSandbox = stubSandbox;\n            return stubSandbox;\n          }).catch(function (reason) {\n            console.info('5. Sandbox was not found, creating a new one ', reason);\n\n            // check if the sandbox is registed for this stub descriptor url;\n            // Make Steps xxx --- xxx\n            // Instantiate the Sandbox\n            var sandbox = _this.runtimeFactory.createSandbox();\n            sandbox.addListener('*', function (msg) {\n              _this.messageBus.postMessage(msg);\n            });\n\n            return sandbox;\n          }).then(function (sandbox) {\n            console.info('6. return the sandbox instance and register', sandbox, 'to domain ', domain);\n\n            _stubSandbox = sandbox;\n\n            // we need register stub on registry - step xxx https://github.com/reTHINK-project/core-framework/blob/master/docs/specs/runtime/dynamic-view/basics/deploy-protostub.md\n            return _this.registry.registerStub(_stubSandbox, domain);\n          }).then(function (runtimeProtoStubURL) {\n\n            console.info('7. return the runtime protostub url: ', runtimeProtoStubURL);\n\n            // we have completed step xxx https://github.com/reTHINK-project/core-framework/blob/master/docs/specs/runtime/dynamic-view/basics/deploy-protostub.md\n\n            _runtimeProtoStubURL = runtimeProtoStubURL;\n\n            // Extend original hyperty configuration;\n            var configuration = {};\n            if (!(0, _utils.emptyObject)(_stubDescriptor.configuration)) {\n              try {\n                configuration = (0, _assign2.default)({}, JSON.parse(_stubDescriptor.configuration));\n              } catch (e) {\n                configuration = _stubDescriptor.configuration;\n              }\n            }\n\n            configuration.runtimeURL = _this.runtimeURL;\n\n            // Deploy Component step xxx\n            return _stubSandbox.deployComponent(_stubSourcePackage.sourceCode, runtimeProtoStubURL, configuration);\n          }).then(function (deployComponentStatus) {\n            console.info('8: return deploy component for sandbox status: ', deployComponentStatus);\n\n            // we have completed step xxx https://github.com/reTHINK-project/core-framework/blob/master/docs/specs/runtime/dynamic-view/basics/deploy-protostub.md\n\n            // Add the message bus listener\n            _this.messageBus.addListener(_runtimeProtoStubURL, function (msg) {\n              _stubSandbox.postMessage(msg);\n            });\n\n            // we have completed step xxx https://github.com/reTHINK-project/core-framework/blob/master/docs/specs/runtime/dynamic-view/basics/deploy-protostub.md\n\n            // Load Stub function resolved with success;\n            var stub = {\n              runtimeProtoStubURL: _runtimeProtoStubURL,\n              status: deployComponentStatus\n            };\n\n            resolve(stub);\n            console.info('------------------- END ---------------------------\\n');\n          }).catch(errorReason);\n        });\n      });\n    }\n\n    /**\n    * Deploy Stub from Catalogue URL or domain url\n    * @param  {URL.URL}     domain          domain\n    */\n\n  }, {\n    key: 'loadIdpProxy',\n    value: function loadIdpProxy(idpProxyURL) {\n\n      var _this = this;\n\n      if (!idpProxyURL) throw new Error('The IDP Proxy URL is a needed parameter, could be a DOMAIN or a URL');\n\n      return new _promise2.default(function (resolve, reject) {\n\n        var domain = (0, _utils.divideURL)(idpProxyURL).domain;\n\n        if (!domain) {\n          domain = idpProxyURL;\n        }\n\n        var _proxySandbox = void 0;\n        var _proxyDescriptor = void 0;\n        var _runtimeIdpProxyURL = void 0;\n        var _proxySourcePackage = void 0;\n\n        var errorReason = function errorReason(reason) {\n          console.error('Something failed on the deploy of IdpProxy: ', reason);\n          reject(reason);\n        };\n\n        // Discover IDPProxy\n        console.info('------------------- IDP Proxy Deploy ---------------------------\\n');\n        console.info('Discover or Create a new IdpProxy for domain/URL: ', domain);\n        return _this.registry.discoverIdpProxy(domain).then(function (runtimeIdpProxyURL) {\n          // Is registed?\n          console.info('1. IDPProxy Discovered: ', runtimeIdpProxyURL);\n\n          // we have completed step 2 https://github.com/reTHINK-project/core-framework/blob/master/docs/specs/runtime/dynamic-view/basics/deploy-protostub.md\n\n          // TODO: Check if the status is saved in the status of sandbox;\n          var idpProxy = {\n            runtimeIdpProxyURL: runtimeIdpProxyURL,\n            status: 'deployed'\n          };\n\n          resolve(idpProxy);\n          console.info('------------------- END ---------------------------\\n');\n        }).catch(function (reason) {\n\n          // is not registed?\n          console.info('1. IdpProxy not found:', reason);\n\n          // we have completed step 3 https://github.com/reTHINK-project/core-framework/blob/master/docs/specs/runtime/dynamic-view/basics/deploy-protostub.md\n\n          // we need to get ProtoStub descriptor step 4 https://github.com/reTHINK-project/core-framework/blob/master/docs/specs/runtime/dynamic-view/basics/deploy-protostub.md\n          _this.runtimeCatalogue.getIdpProxyDescriptor(idpProxyURL).then(function (proxyDescriptor) {\n\n            console.info('2. Return the IDPProxy descriptor:', proxyDescriptor);\n\n            // we have completed step 5 https://github.com/reTHINK-project/core-framework/blob/master/docs/specs/runtime/dynamic-view/basics/deploy-protostub.md\n            _proxyDescriptor = proxyDescriptor;\n\n            var sourcePackageURL = proxyDescriptor.sourcePackageURL;\n\n            if (sourcePackageURL === '/sourcePackage') {\n              return proxyDescriptor.sourcePackage;\n            }\n\n            // we need to get ProtoStub Source code from descriptor - step 6 https://github.com/reTHINK-project/core-framework/blob/master/docs/specs/runtime/dynamic-view/basics/deploy-protostub.md\n            return _this.runtimeCatalogue.getSourcePackageFromURL(sourcePackageURL);\n          }).catch(errorReason).then(function (sourcePackage) {\n            console.info('3. return the IDPProxy source package: ', sourcePackage);\n\n            // we have completed step 7 https://github.com/reTHINK-project/core-framework/blob/master/docs/specs/runtime/dynamic-view/basics/deploy-protostub.md\n\n            _proxySourcePackage = sourcePackage;\n\n            // TODO: Check on PEP (policy Engine) if we need the sandbox and check if the Sandbox Factory have the context sandbox;\n            var policy = true;\n            return policy;\n          }).then(function (policy) {\n            // this will return the sandbox or one promise to getSandbox;\n            return _this.registry.getSandbox(domain);\n          }).then(function (proxySandbox) {\n\n            console.info('4. if the sandbox is registered then return the sandbox', proxySandbox);\n\n            _proxySandbox = proxySandbox;\n            return proxySandbox;\n          }).catch(function (reason) {\n            console.info('5. Sandbox was not found, creating a new one', reason);\n\n            // check if the sandbox is registed for this proxy descriptor url;\n            // Make Steps xxx --- xxx\n            // Instantiate the Sandbox\n            var sandbox = _this.runtimeFactory.createSandbox();\n            sandbox.addListener('*', function (msg) {\n              _this.messageBus.postMessage(msg);\n            });\n\n            return sandbox;\n          }).then(function (sandbox) {\n            console.info('6. return the sandbox instance and register', sandbox, 'to domain ', domain);\n\n            _proxySandbox = sandbox;\n\n            // we need register stub on registry - step xxx https://github.com/reTHINK-project/core-framework/blob/master/docs/specs/runtime/dynamic-view/basics/deploy-protostub.md\n            return _this.registry.registerIdpProxy(sandbox, domain);\n          }).then(function (runtimeIdpProxyURL) {\n\n            console.info('7. Return the runtime Idp Proxy URL: ', runtimeIdpProxyURL);\n\n            // we have completed step xxx https://github.com/reTHINK-project/core-framework/blob/master/docs/specs/runtime/dynamic-view/basics/deploy-protostub.md\n\n            _runtimeIdpProxyURL = runtimeIdpProxyURL;\n\n            // Extend original hyperty configuration;\n            var configuration = {};\n            if (!(0, _utils.emptyObject)(_proxyDescriptor.configuration)) {\n              try {\n                configuration = (0, _assign2.default)({}, JSON.parse(_proxyDescriptor.configuration));\n              } catch (e) {\n                configuration = _proxyDescriptor.configuration;\n              }\n            }\n            configuration.runtimeURL = _this.runtimeURL;\n\n            // Deploy Component step xxx\n            return _proxySandbox.deployComponent(_proxySourcePackage.sourceCode, runtimeIdpProxyURL, configuration);\n          }).then(function (deployComponentStatus) {\n            console.info('8: return deploy component for sandbox status: ', deployComponentStatus);\n\n            // we have completed step xxx https://github.com/reTHINK-project/core-framework/blob/master/docs/specs/runtime/dynamic-view/basics/deploy-protostub.md\n\n            // Add the message bus listener\n            _this.messageBus.addListener(_runtimeIdpProxyURL, function (msg) {\n              _proxySandbox.postMessage(msg);\n            });\n\n            // we have completed step xxx https://github.com/reTHINK-project/core-framework/blob/master/docs/specs/runtime/dynamic-view/basics/deploy-protostub.md\n\n            // Load Stub function resolved with success;\n            var idpProxy = {\n              runtimeIdpProxyURL: _runtimeIdpProxyURL,\n              status: deployComponentStatus\n            };\n\n            resolve(idpProxy);\n            console.info('------------------- END ---------------------------\\n');\n          }).catch(errorReason);\n        });\n      });\n    }\n\n    /**\n     * Used to close all the runtime; Unregister all hyperties;\n     * @return {Promise<Boolean>} result of the close method, with true or false to the operation success;\n     */\n\n  }, {\n    key: 'close',\n    value: function close() {\n      var _this = this;\n\n      console.info('Unregister all hyperties');\n      return new _promise2.default(function (resolve, reject) {\n\n        _this.registry.unregisterAllHyperties().then(function (result) {\n          console.info('All the hyperties are unregisted with Success:', result);\n          resolve(true);\n        }).catch(function (reason) {\n          console.error('Failed to unregister the hyperties', reason);\n          reject(false);\n        });\n      });\n    }\n\n    /**\n    * Used to check for updates about components handled in the Catalogue including protocol stubs and Hyperties. check relationship with lifecycle management provided by Service Workers\n    * @param  {CatalogueURL}       url url\n    */\n\n  }, {\n    key: 'checkForUpdate',\n    value: function checkForUpdate(url) {\n      // Body...\n    }\n  }]);\n  return RuntimeUA;\n}();\n// import GraphConnector from '../graphconnector/GraphConnector';\n\n//Main dependecies\n\n\nexports.default = RuntimeUA;\nmodule.exports = exports['default'];\n\n},{\"../bus/MessageBus\":416,\"../identity/IdentityModule\":420,\"../policy/PolicyEngine\":426,\"../policy/context/RuntimeCoreCtx\":433,\"../registry/Registry\":437,\"../syncher/SyncherManager\":444,\"../utils/utils\":447,\"babel-polyfill\":1,\"babel-runtime/core-js/object/assign\":3,\"babel-runtime/core-js/promise\":10,\"babel-runtime/helpers/classCallCheck\":13,\"babel-runtime/helpers/createClass\":14}],440:[function(require,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _promise = require('babel-runtime/core-js/promise');\n\nvar _promise2 = _interopRequireDefault(_promise);\n\nvar _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _createClass2 = require('babel-runtime/helpers/createClass');\n\nvar _createClass3 = _interopRequireDefault(_createClass2);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n* Copyright 2016 PT Inovação e Sistemas SA\n* Copyright 2016 INESC-ID\n* Copyright 2016 QUOBIS NETWORKS SL\n* Copyright 2016 FRAUNHOFER-GESELLSCHAFT ZUR FOERDERUNG DER ANGEWANDTEN FORSCHUNG E.V\n* Copyright 2016 ORANGE SA\n* Copyright 2016 Deutsche Telekom AG\n* Copyright 2016 Apizee\n* Copyright 2016 TECHNISCHE UNIVERSITAT BERLIN\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n**/\n\nvar ObjectAllocation = function () {\n  /* private\n  _url: URL\n  _bus: MiniBus\n  */\n\n  /**\n   * Create an Object Allocation\n   * @param  {URL.URL}      url - url from who is sending the message\n   * @param  {MiniBus}      bus - MiniBus used for address allocation\n   */\n\n  function ObjectAllocation(url, bus) {\n    (0, _classCallCheck3.default)(this, ObjectAllocation);\n\n    var _this = this;\n\n    _this._url = url;\n    _this._bus = bus;\n  }\n\n  /**\n   * get the URL value\n   * @return {string} The url value;\n   */\n\n\n  (0, _createClass3.default)(ObjectAllocation, [{\n    key: 'create',\n\n\n    /**\n     * Ask for creation of a number of Object addresses, to the domain message node.\n     * @param  {Domain} domain - Domain of the message node.\n     * @param  {number} number - Number of addresses to request\n     * @returns {Promise<ObjectURL>}  A list of ObjectURL's\n     */\n    value: function create(domain, scheme, number) {\n      var _this = this;\n\n      //FLOW-OUT: message sent to msg-node ObjectAllocationManager component\n      var msg = {\n        type: 'create', from: _this._url, to: 'domain://msg-node.' + domain + '/object-address-allocation',\n        body: { scheme: scheme, value: { number: number } }\n      };\n\n      return new _promise2.default(function (resolve, reject) {\n        _this._bus.postMessage(msg, function (reply) {\n          if (reply.body.code === 200) {\n            resolve(reply.body.value.allocated);\n          } else {\n            reject(reply.body.desc);\n          }\n        });\n      });\n    }\n  }, {\n    key: 'url',\n    get: function get() {\n      return this._url;\n    }\n  }]);\n  return ObjectAllocation;\n}();\n\nexports.default = ObjectAllocation;\nmodule.exports = exports['default'];\n\n},{\"babel-runtime/core-js/promise\":10,\"babel-runtime/helpers/classCallCheck\":13,\"babel-runtime/helpers/createClass\":14}],441:[function(require,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _createClass2 = require('babel-runtime/helpers/createClass');\n\nvar _createClass3 = _interopRequireDefault(_createClass2);\n\nvar _utils = require('../utils/utils');\n\nvar _Subscription = require('./Subscription');\n\nvar _Subscription2 = _interopRequireDefault(_Subscription);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar ObserverObject = function () {\n  function ObserverObject(parent, url, childrens) {\n    (0, _classCallCheck3.default)(this, ObserverObject);\n\n    var _this = this;\n\n    _this._parent = parent;\n    _this._url = url;\n    _this._childrens = childrens;\n\n    _this._bus = parent._bus;\n    _this._subscriptions = {};\n  }\n\n  (0, _createClass3.default)(ObserverObject, [{\n    key: 'addSubscription',\n    value: function addSubscription(hyperty) {\n      var _this = this;\n\n      _this._subscriptions[hyperty] = new _Subscription2.default(_this._bus, hyperty, _this._url, _this._childrens, false);\n    }\n  }, {\n    key: 'removeSubscription',\n    value: function removeSubscription(hyperty) {\n      var _this = this;\n\n      var domain = (0, _utils.divideURL)(hyperty).domain;\n      var objURLSubscription = _this._url + '/subscription';\n\n      var subscription = _this._subscriptions[hyperty];\n      if (subscription) {\n        //FLOW-OUT: message sent to remote ReporterObject -> _onRemoteUnSubscribe\n        _this._bus.postMessage({\n          type: 'unsubscribe', from: _this._parent._url, to: objURLSubscription,\n          body: { resource: _this._url }\n        });\n\n        //TODO: should I wait for response before unsubscribe on msg-node\n        //FLOW-OUT: message sent to msg-node SubscriptionManager component\n        _this._bus.postMessage({\n          type: 'unsubscribe', from: _this._parent._url, to: 'domain://msg-node.' + domain + '/sm',\n          body: { resource: _this._url, childrenResources: _this._childrens }\n        });\n\n        subscription._releaseListeners();\n        delete _this._subscriptions[hyperty];\n      }\n    }\n  }]);\n  return ObserverObject;\n}();\n\nexports.default = ObserverObject;\nmodule.exports = exports['default'];\n\n},{\"../utils/utils\":447,\"./Subscription\":443,\"babel-runtime/helpers/classCallCheck\":13,\"babel-runtime/helpers/createClass\":14}],442:[function(require,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _promise = require('babel-runtime/core-js/promise');\n\nvar _promise2 = _interopRequireDefault(_promise);\n\nvar _keys = require('babel-runtime/core-js/object/keys');\n\nvar _keys2 = _interopRequireDefault(_keys);\n\nvar _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _createClass2 = require('babel-runtime/helpers/createClass');\n\nvar _createClass3 = _interopRequireDefault(_createClass2);\n\nvar _utils = require('../utils/utils');\n\nvar _Subscription = require('./Subscription');\n\nvar _Subscription2 = _interopRequireDefault(_Subscription);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar ReporterObject = function () {\n  function ReporterObject(parent, owner, url) {\n    (0, _classCallCheck3.default)(this, ReporterObject);\n\n    var _this = this;\n\n    _this._parent = parent;\n    _this._owner = owner;\n    _this._url = url;\n\n    _this._bus = parent._bus;\n\n    _this._domain = (0, _utils.divideURL)(owner).domain;\n    _this._objSubscriptorURL = _this._url + '/subscription';\n\n    _this._subscriptions = {};\n    _this._childrens = [];\n    _this._childrenListeners = [];\n\n    _this._forwards = {};\n\n    _this._allocateListeners();\n  }\n\n  (0, _createClass3.default)(ReporterObject, [{\n    key: '_allocateListeners',\n    value: function _allocateListeners() {\n      var _this = this;\n\n      //add subscription listener...\n      _this._subscriptionListener = _this._bus.addListener(_this._objSubscriptorURL, function (msg) {\n        console.log(_this._objSubscriptorURL + '-RCV: ', msg);\n        switch (msg.type) {\n          case 'subscribe':\n            _this._onRemoteSubscribe(msg);break;\n          case 'unsubscribe':\n            _this._onRemoteUnSubscribe(msg);break;\n          case 'response':\n            _this._onRemoteResponse(msg);break;\n        }\n      });\n\n      var changeURL = _this._url + '/changes';\n      _this._changeListener = _this._bus.addListener(changeURL, function (msg) {\n        //TODO: what todo here? Save changes?\n        console.log('SyncherManager-' + changeURL + '-RCV: ', msg);\n      });\n    }\n  }, {\n    key: '_releaseListeners',\n    value: function _releaseListeners() {\n      var _this = this;\n\n      _this._subscriptionListener.remove();\n\n      _this._changeListener.remove();\n\n      _this._childrenListeners.forEach(function (cl) {\n        cl.remove();\n      });\n\n      (0, _keys2.default)(_this._forwards).forEach(function (key) {\n        _this.forwardUnSubscribe(key);\n      });\n\n      //remove all subscriptions\n      (0, _keys2.default)(_this._subscriptions).forEach(function (key) {\n        _this._subscriptions[key]._releaseListeners();\n      });\n    }\n\n    /**\n     * Register a listener in the msg-node and in the local MessageBus, so that messages on this address are forwarded to the reporter object\n     * @param  {string} address - URL to register the listeners\n     * @return {Promise} Return Promise OK or error\n     */\n\n  }, {\n    key: 'forwardSubscribe',\n    value: function forwardSubscribe(addresses) {\n      var _this = this;\n\n      //FLOW-OUT: message sent to the msg-node SubscriptionManager component\n      var nodeSubscribeMsg = {\n        type: 'subscribe', from: _this._parent._url, to: 'domain://msg-node.' + _this._domain + '/sm',\n        body: { subscribe: addresses, source: _this._owner }\n      };\n\n      return new _promise2.default(function (resolve, reject) {\n        _this._bus.postMessage(nodeSubscribeMsg, function (reply) {\n          console.log('forward-subscribe-response(reporter): ', reply);\n          if (reply.body.code === 200) {\n            var newForward = _this._bus.addForward(_this._url, _this._owner);\n            _this._forwards[addresses[0]] = newForward;\n            resolve();\n          } else {\n            reject('Error on msg-node subscription: ' + reply.body.desc);\n          }\n        });\n      });\n    }\n\n    /**\n     * UnRegister a listener in the msg-node and in the local MessageBus, so that messages on this address are removed from forward\n     * @param  {string} address - URL to un-register the listeners\n     */\n\n  }, {\n    key: 'forwardUnSubscribe',\n    value: function forwardUnSubscribe(address) {\n      var _this = this;\n\n      _this._forwards[address].remove();\n      delete _this._forwards[address];\n\n      //FLOW-OUT: message sent to the msg-node SubscriptionManager component\n      var nodeUnSubscribeMsg = {\n        type: 'unsubscribe', from: _this._parent._url, to: 'domain://msg-node.' + _this._domain + '/sm',\n        body: { subscribe: [address], source: _this._owner }\n      };\n\n      _this._bus.postMessage(nodeUnSubscribeMsg);\n    }\n\n    /**\n     * Register listeners for a list of childrens. Public channels used to transmit messages.\n     * @param  {string[]} childrens - channels to register\n     * @return {Promise} Return Promise OK or error\n     */\n\n  }, {\n    key: 'addChildrens',\n    value: function addChildrens(childrens) {\n      var _this = this;\n\n      return new _promise2.default(function (resolve, reject) {\n        if (childrens.length === 0) {\n          resolve();\n          return;\n        }\n\n        var childBaseURL = _this._url + '/children/';\n        _this._childrens.push(childrens);\n\n        /*\n        _this._childrens.forEach((child) => {\n          let childId = childBaseURL + child;\n           let selfForward = _this._bus.addForward(childId, owner);\n          _this._childrenListeners.push(selfForward);\n        });*/\n\n        var subscriptions = [];\n        childrens.forEach(function (child) {\n          return subscriptions.push(childBaseURL + child);\n        });\n\n        //FLOW-OUT: message sent to the msg-node SubscriptionManager component\n        var nodeSubscribeMsg = {\n          type: 'subscribe', from: _this._parent._url, to: 'domain://msg-node.' + _this._domain + '/sm',\n          body: { subscribe: subscriptions, source: _this._owner }\n        };\n\n        _this._bus.postMessage(nodeSubscribeMsg, function (reply) {\n          console.log('node-subscribe-response(reporter): ', reply);\n          if (reply.body.code === 200) {\n\n            //add children listeners on local ...\n            subscriptions.forEach(function (childURL) {\n              var childListener = _this._bus.addListener(childURL, function (msg) {\n                //TODO: what todo here? Save childrens?\n                console.log('SyncherManager-' + childURL + '-RCV: ', msg);\n              });\n              _this._childrenListeners.push(childListener);\n\n              var selfForward = _this._bus.addForward(childURL, _this._owner);\n              _this._childrenListeners.push(selfForward);\n            });\n\n            resolve();\n          } else {\n            reject('Error on msg-node subscription: ' + reply.body.desc);\n          }\n        });\n      });\n    }\n  }, {\n    key: 'delete',\n    value: function _delete() {\n      var _this = this;\n      var domain = (0, _utils.divideURL)(_this._owner).domain;\n\n      //FLOW-OUT: message sent directly to all subscribers of the reporter\n      _this._bus.postMessage({\n        type: 'delete', from: _this._objSubscriptorURL, to: _this._url + '/changes'\n      });\n\n      //FLOW-OUT: message sent to the msg-node ObjectAllocationManager component\n      _this._bus.postMessage({\n        type: 'delete', from: _this._parent._url, to: 'domain://msg-node.' + domain + '/object-address-allocation',\n        body: { resource: _this._url, childrenResources: _this._childrens }\n      });\n\n      _this._releaseListeners();\n      delete _this._parent._reporters[_this._url];\n    }\n  }, {\n    key: '_onRemoteResponse',\n    value: function _onRemoteResponse(msg) {\n      var _this = this;\n\n      _this._bus.postMessage({\n        id: msg.id, type: 'response', from: msg.to, to: _this._url,\n        body: { code: msg.body.code, identity: msg.body.identity, source: msg.from }\n      });\n    }\n\n    //FLOW-IN: message received from Syncher -> subscribe\n\n  }, {\n    key: '_onRemoteSubscribe',\n    value: function _onRemoteSubscribe(msg) {\n      var _this = this;\n      var hypertyURL = msg.body.subscriber;\n\n      //validate if subscription already exists?\n      if (_this._subscriptions[hypertyURL]) {\n        var errorMsg = {\n          id: msg.id, type: 'response', from: msg.to, to: hypertyURL,\n          body: { code: 500, desc: 'Subscription for (' + _this._url + ' : ' + hypertyURL + ') already exists!' }\n        };\n\n        _this._bus.postMessage(errorMsg);\n        return;\n      }\n\n      //ask to subscribe to Syncher? (depends on the operation mode)\n      //TODO: get mode from object!\n      var mode = 'sub/pub';\n\n      if (mode === 'sub/pub') {\n        //FLOW-OUT: message sent to local hyperty address Syncher -> _onForward\n        var forwardMsg = {\n          type: 'forward', from: _this._url, to: _this._owner,\n          body: { type: msg.type, from: hypertyURL, to: _this._url, identity: msg.body.identity }\n        };\n\n        _this._bus.postMessage(forwardMsg, function (reply) {\n          console.log('forward-reply: ', reply);\n          if (reply.body.code === 200) {\n            _this._subscriptions[hypertyURL] = new _Subscription2.default(_this._bus, _this._owner, _this._url, _this._childrens, true);\n          }\n\n          //FLOW-OUT: subscription response sent (forward from internal Hyperty)\n          _this._bus.postMessage({\n            id: msg.id, type: 'response', from: msg.to, to: msg.from,\n            body: reply.body\n          });\n        });\n      }\n    }\n\n    //FLOW-IN: message received from remote ObserverObject -> removeSubscription\n\n  }, {\n    key: '_onRemoteUnSubscribe',\n    value: function _onRemoteUnSubscribe(msg) {\n      var _this = this;\n      var hypertyURL = msg.body.subscriber;\n\n      var subscription = _this._subscriptions[hypertyURL];\n      if (subscription) {\n        subscription._releaseListeners();\n        delete _this._subscriptions[hypertyURL];\n\n        //TODO: send un-subscribe message to Syncher? (depends on the operation mode)\n      }\n    }\n  }]);\n  return ReporterObject;\n}();\n\nexports.default = ReporterObject;\nmodule.exports = exports['default'];\n\n},{\"../utils/utils\":447,\"./Subscription\":443,\"babel-runtime/core-js/object/keys\":8,\"babel-runtime/core-js/promise\":10,\"babel-runtime/helpers/classCallCheck\":13,\"babel-runtime/helpers/createClass\":14}],443:[function(require,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _createClass2 = require('babel-runtime/helpers/createClass');\n\nvar _createClass3 = _interopRequireDefault(_createClass2);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar Subscription = function () {\n  function Subscription(bus, owner, url, childrens, isReporter) {\n    (0, _classCallCheck3.default)(this, Subscription);\n\n    var _this = this;\n    var childBaseURL = url + '/children/';\n    var changeURL = url + '/changes';\n\n    //process delete message\n    _this._deleteListener = bus.addListener(changeURL, function (msg) {\n      if (msg.type === 'delete') {\n        console.log('Subscription-DELETE: ', msg);\n\n        //FLOW-OUT: message sent to all subscribers\n        var deleteMessageToHyperty = {\n          type: 'delete', from: msg.from, to: owner,\n          body: { identity: msg.body.identity, resource: url }\n        };\n\n        //send delete to hyperty\n        bus.postMessage(deleteMessageToHyperty, function (reply) {\n          console.log('Subscription-DELETE-REPLY: ', reply);\n          if (reply.body.code === 200) {\n            _this._releaseListeners();\n          }\n        });\n      }\n    });\n\n    //add change publish address or forward\n    if (isReporter) {\n      _this._changeListener = bus.addPublish(changeURL);\n    } else {\n      _this._changeListener = bus.addForward(changeURL, owner);\n    }\n\n    _this._childrenListeners = [];\n    childrens.forEach(function (child) {\n      var childId = childBaseURL + child;\n\n      //add children publish address\n      var childrenForward = bus.addPublish(childId);\n      _this._childrenListeners.push(childrenForward);\n\n      //add self forward if an observer\n      if (!isReporter) {\n        var selfForward = bus.addForward(childId, owner);\n        _this._childrenListeners.push(selfForward);\n      }\n    });\n  }\n\n  (0, _createClass3.default)(Subscription, [{\n    key: '_releaseListeners',\n    value: function _releaseListeners() {\n      var _this = this;\n\n      _this._deleteListener.remove();\n\n      _this._changeListener.remove();\n\n      _this._childrenListeners.forEach(function (forward) {\n        forward.remove();\n      });\n    }\n  }]);\n  return Subscription;\n}();\n\nexports.default = Subscription;\nmodule.exports = exports['default'];\n\n},{\"babel-runtime/helpers/classCallCheck\":13,\"babel-runtime/helpers/createClass\":14}],444:[function(require,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _stringify = require('babel-runtime/core-js/json/stringify');\n\nvar _stringify2 = _interopRequireDefault(_stringify);\n\nvar _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _createClass2 = require('babel-runtime/helpers/createClass');\n\nvar _createClass3 = _interopRequireDefault(_createClass2);\n\nvar _utils = require('../utils/utils');\n\nvar _ObjectAllocation = require('./ObjectAllocation');\n\nvar _ObjectAllocation2 = _interopRequireDefault(_ObjectAllocation);\n\nvar _ReporterObject = require('./ReporterObject');\n\nvar _ReporterObject2 = _interopRequireDefault(_ReporterObject);\n\nvar _ObserverObject = require('./ObserverObject');\n\nvar _ObserverObject2 = _interopRequireDefault(_ObserverObject);\n\nvar _tv = require('../utils/tv4');\n\nvar _tv2 = _interopRequireDefault(_tv);\n\nvar _MessageFactory = require('service-framework/dist/MessageFactory');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * @author micaelpedrosa@gmail.com\n * Core Syncronization system.\n */\n/**\n* Copyright 2016 PT Inovação e Sistemas SA\n* Copyright 2016 INESC-ID\n* Copyright 2016 QUOBIS NETWORKS SL\n* Copyright 2016 FRAUNHOFER-GESELLSCHAFT ZUR FOERDERUNG DER ANGEWANDTEN FORSCHUNG E.V\n* Copyright 2016 ORANGE SA\n* Copyright 2016 Deutsche Telekom AG\n* Copyright 2016 Apizee\n* Copyright 2016 TECHNISCHE UNIVERSITAT BERLIN\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n**/\n\nvar SyncherManager = function () {\n  /* private\n  _url: URL\n  _bus: MiniBus\n  _registry: Registry\n  _allocator: ObjectAllocation\n   _reporters: { ObjectURL: ReporterObject }\n  _observers: { ObjectURL: ObserverObject }\n  */\n\n  function SyncherManager(runtimeURL, bus, registry, catalog, allocator) {\n    (0, _classCallCheck3.default)(this, SyncherManager);\n\n    var _this = this;\n\n    _this._bus = bus;\n    _this._registry = registry;\n    _this._catalog = catalog;\n\n    //TODO: these should be saved in persistence engine?\n    _this._url = runtimeURL + '/sm';\n    _this._objectURL = runtimeURL + '/object-allocation';\n\n    _this._reporters = {};\n    _this._observers = {};\n\n    //TODO: this should not be hardcoded!\n    _this._domain = (0, _utils.divideURL)(runtimeURL).domain;\n\n    _this._mf = new _MessageFactory.MessageFactory(false, {});\n\n    if (allocator) {\n      _this._allocator = allocator;\n    } else {\n      _this._allocator = new _ObjectAllocation2.default(_this._objectURL, bus);\n    }\n\n    bus.addListener(_this._url, function (msg) {\n      console.log('SyncherManager-RCV: ', msg);\n      switch (msg.type) {\n        case 'create':\n          _this._onCreate(msg);break;\n        case 'delete':\n          _this._onDelete(msg);break;\n        case 'subscribe':\n          _this._onLocalSubscribe(msg);break;\n        case 'unsubscribe':\n          _this._onLocalUnSubscribe(msg);break;\n      }\n    });\n  }\n\n  (0, _createClass3.default)(SyncherManager, [{\n    key: '_onCreate',\n\n\n    //FLOW-IN: message received from Syncher -> create\n    value: function _onCreate(msg) {\n\n      var _this = this;\n      var owner = msg.from;\n      var domain = (0, _utils.divideURL)(msg.from).domain;\n\n      if (msg.body.resource) {\n        _this._authorise(msg, msg.body.resource);\n        return;\n      }\n\n      //get schema from catalogue and parse -> (scheme, children)\n      _this._catalog.getDataSchemaDescriptor(msg.body.schema).then(function (descriptor) {\n\n        var properties = descriptor.sourcePackage.sourceCode.properties;\n        var scheme = properties.scheme ? properties.scheme.constant : 'resource';\n        var childrens = properties.children ? properties.children.constant : [];\n\n        console.log('Scheme: ', scheme);\n\n        // schema validation\n        console.log(\"Running object validation...\");\n        try {\n          var obj = msg.body.value;\n          var schema = descriptor.sourcePackage.sourceCode;\n\n          // add support for schema referencing itself\n          _tv2.default.addSchema(schema.id, schema);\n\n          // validate\n          var result = _tv2.default.validateMultiple(obj, schema);\n\n          // delete error stacks to improve logging\n          result.errors.forEach(function (error) {\n            delete error.stack;\n          });\n\n          // print more details about validation if it fails or schema contains $refs\n          if (!result.valid || result.missing.length > 0) {\n            console.warn(\"Object validation \" + (result.valid ? \"succeeded, but schema contained references:\" : \"failed:\"), (0, _stringify2.default)(result, null, 2));\n            console.debug(\"Object:\", (0, _stringify2.default)(obj, null, 2), \"\\r\\nSchema:\", (0, _stringify2.default)(schema, null, 2));\n          } else {\n            console.log(\"Object validation succeeded\");\n          }\n        } catch (e) {\n          console.warn(\"Error during object validation:\", e);\n        }\n\n        //request address allocation of a new object from the msg-node\n        _this._allocator.create(domain, scheme, 1).then(function (allocated) {\n          var objURL = allocated[0];\n\n          console.log('ALLOCATOR CREATE:', allocated);\n\n          var subscriptionURL = objURL + '/subscription';\n\n          console.log('Subscription URL', subscriptionURL);\n\n          //To register the dataObject in the runtimeRegistry\n          _this._registry.registerDataObject(msg.body.value.name, msg.body.value.schema, objURL, msg.body.value.reporter, msg.body.authorise).then(function (resolve) {\n            console.log('DataObject successfully registered', resolve);\n\n            //all OK -> create reporter and register listeners\n            var reporter = new _ReporterObject2.default(_this, owner, objURL);\n            reporter.forwardSubscribe([objURL, subscriptionURL]).then(function () {\n              reporter.addChildrens(childrens).then(function () {\n                _this._reporters[objURL] = reporter;\n\n                //FLOW-OUT: message response to Syncher -> create\n                _this._bus.postMessage({\n                  id: msg.id, type: 'response', from: msg.to, to: owner,\n                  body: { code: 200, resource: objURL, childrenResources: childrens }\n                });\n\n                //send create to all observers, responses will be deliver to the Hyperty owner?\n                //schedule for next cycle needed, because the Reporter should be available.\n                setTimeout(function () {\n                  //will invite other hyperties\n                  _this._authorise(msg, objURL);\n                });\n              });\n            });\n          }, function (error) {\n            console.error(error);\n          });\n        });\n      }).catch(function (reason) {\n        //FLOW-OUT: error message response to Syncher -> create\n        var responseMsg = {\n          id: msg.id, type: 'response', from: msg.to, to: owner,\n          body: { code: 500, desc: reason }\n        };\n\n        _this._bus.postMessage(responseMsg);\n      });\n    }\n  }, {\n    key: '_authorise',\n    value: function _authorise(msg, objURL) {\n      var _this = this;\n      var objSubscriptorURL = objURL + '/subscription';\n\n      msg.body.authorise.forEach(function (hypertyURL) {\n        //FLOW-OUT: send invites to list of remote Syncher -> _onRemoteCreate -> onNotification\n        _this._bus.postMessage({\n          type: 'create', from: objSubscriptorURL, to: hypertyURL,\n          body: { identity: msg.body.identity, source: msg.from, value: msg.body.value, schema: msg.body.schema }\n        });\n      });\n    }\n\n    //FLOW-IN: message received from DataObjectReporter -> delete\n\n  }, {\n    key: '_onDelete',\n    value: function _onDelete(msg) {\n      var _this = this;\n\n      var objURL = msg.body.resource;\n\n      var object = _this._reporters[objURL];\n      if (object) {\n        //TODO: is there any policy verification before delete?\n        object.delete();\n\n        //TODO: unregister object?\n        _this._bus.postMessage({\n          id: msg.id, type: 'response', from: msg.to, to: msg.from,\n          body: { code: 200 }\n        });\n      }\n    }\n\n    //FLOW-IN: message received from local Syncher -> subscribe\n\n  }, {\n    key: '_onLocalSubscribe',\n    value: function _onLocalSubscribe(msg) {\n      var _this2 = this;\n\n      var _this = this;\n\n      var hypertyURL = msg.from;\n      var objURL = msg.body.resource;\n      var objURLSubscription = objURL + '/subscription';\n      var childBaseURL = objURL + '/children/';\n\n      var domain = (0, _utils.divideURL)(objURL).domain;\n\n      //get schema from catalogue and parse -> (children)\n      _this._catalog.getDataSchemaDescriptor(msg.body.schema).then(function (descriptor) {\n        var properties = descriptor.sourcePackage.sourceCode.properties;\n        var childrens = properties.children ? properties.children.constant : [];\n\n        //children addresses\n        var subscriptions = [];\n        subscriptions.push(objURL + '/changes');\n        childrens.forEach(function (child) {\n          return subscriptions.push(childBaseURL + child);\n        });\n\n        //FLOW-OUT: subscribe message to the msg-node, registering listeners on the broker\n        var nodeSubscribeMsg = {\n          type: 'subscribe', from: _this._url, to: 'domain://msg-node.' + domain + '/sm',\n          body: { identity: msg.body.identity, subscribe: subscriptions, source: hypertyURL }\n        };\n\n        //subscribe in msg-node\n        _this._bus.postMessage(nodeSubscribeMsg, function (reply) {\n          console.log('node-subscribe-response(observer): ', reply);\n          if (reply.body.code === 200) {\n\n            //FLOW-OUT: reply with provisional response\n            _this._bus.postMessage({\n              id: msg.id, type: 'response', from: msg.to, to: hypertyURL,\n              body: { code: 100, childrenResources: childrens }\n            });\n\n            //FLOW-OUT: subscribe message to remote ReporterObject -> _onRemoteSubscribe\n            var objSubscribeMsg = {\n              type: 'subscribe', from: _this._url, to: objURLSubscription,\n              body: { identity: nodeSubscribeMsg.body.identity, subscriber: hypertyURL }\n            };\n\n            //subscribe to reporter SM\n            _this._bus.postMessage(objSubscribeMsg, function (reply) {\n              console.log('reporter-subscribe-response: ', reply);\n              if (reply.body.code === 200) {\n\n                var observer = _this._observers[objURL];\n                if (!observer) {\n                  observer = new _ObserverObject2.default(_this, objURL, childrens);\n                  _this._observers[objURL] = observer;\n                }\n\n                //register hyperty subscription\n                observer.addSubscription(hypertyURL);\n\n                //forward to hyperty:\n                reply.id = msg.id;\n                reply.from = _this._url;\n                reply.to = hypertyURL;\n                _this2._bus.postMessage(reply);\n              }\n            });\n          } else {\n            //listener rejected\n            _this._bus.postMessage({\n              id: msg.id, type: 'response', from: msg.to, to: hypertyURL,\n              body: reply.body\n            });\n          }\n        });\n      });\n    }\n\n    //FLOW-IN: message received from local DataObjectObserver -> unsubscribe\n\n  }, {\n    key: '_onLocalUnSubscribe',\n    value: function _onLocalUnSubscribe(msg) {\n      var _this = this;\n\n      var hypertyURL = msg.from;\n      var objURL = msg.body.resource;\n\n      var observer = _this._observers[objURL];\n      if (observer) {\n        //TODO: is there any policy verification before delete?\n        observer.removeSubscription(hypertyURL);\n\n        //TODO: destroy object in the registry?\n        _this._bus.postMessage({\n          id: msg.id, type: 'response', from: msg.to, to: msg.from,\n          body: { code: 200 }\n        });\n\n        //TODO: remove Object if no more subscription?\n        //delete _this._observers[objURL];\n      }\n    }\n  }, {\n    key: 'url',\n    get: function get() {\n      return this._url;\n    }\n  }]);\n  return SyncherManager;\n}();\n\nexports.default = SyncherManager;\nmodule.exports = exports['default'];\n\n},{\"../utils/tv4\":446,\"../utils/utils\":447,\"./ObjectAllocation\":440,\"./ObserverObject\":441,\"./ReporterObject\":442,\"babel-runtime/core-js/json/stringify\":2,\"babel-runtime/helpers/classCallCheck\":13,\"babel-runtime/helpers/createClass\":14,\"service-framework/dist/MessageFactory\":413}],445:[function(require,module,exports){\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _classCallCheck2 = require(\"babel-runtime/helpers/classCallCheck\");\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _createClass2 = require(\"babel-runtime/helpers/createClass\");\n\nvar _createClass3 = _interopRequireDefault(_createClass2);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n* Copyright 2016 PT Inovação e Sistemas SA\n* Copyright 2016 INESC-ID\n* Copyright 2016 QUOBIS NETWORKS SL\n* Copyright 2016 FRAUNHOFER-GESELLSCHAFT ZUR FOERDERUNG DER ANGEWANDTEN FORSCHUNG E.V\n* Copyright 2016 ORANGE SA\n* Copyright 2016 Deutsche Telekom AG\n* Copyright 2016 Apizee\n* Copyright 2016 TECHNISCHE UNIVERSITAT BERLIN\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n**/\n/**\n * EventEmitter\n * All classes which extends this, can have addEventListener and trigger events;\n */\n\nvar EventEmitter = function () {\n  function EventEmitter() {\n    (0, _classCallCheck3.default)(this, EventEmitter);\n  }\n\n  (0, _createClass3.default)(EventEmitter, [{\n    key: \"addEventListener\",\n\n\n    /**\n     * addEventListener listen for an eventType\n     * @param  {string}         eventType - listening for this type of event\n     * @param  {Function}       cb        - callback function will be executed when the event it is invoked\n     */\n    value: function addEventListener(eventType, cb) {\n      var _this = this;\n      _this[eventType] = cb;\n    }\n\n    /**\n     * Invoke the eventType\n     * @param  {string} eventType - event will be invoked\n     * @param  {object} params - parameters will be passed to the addEventListener\n     */\n\n  }, {\n    key: \"trigger\",\n    value: function trigger(eventType, params) {\n      var _this = this;\n\n      if (_this[eventType]) {\n        _this[eventType](params);\n      }\n    }\n  }]);\n  return EventEmitter;\n}();\n\nexports.default = EventEmitter;\nmodule.exports = exports['default'];\n\n},{\"babel-runtime/helpers/classCallCheck\":13,\"babel-runtime/helpers/createClass\":14}],446:[function(require,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _stringify = require('babel-runtime/core-js/json/stringify');\n\nvar _stringify2 = _interopRequireDefault(_stringify);\n\nvar _defineProperty = require('babel-runtime/core-js/object/define-property');\n\nvar _defineProperty2 = _interopRequireDefault(_defineProperty);\n\nvar _isFrozen = require('babel-runtime/core-js/object/is-frozen');\n\nvar _isFrozen2 = _interopRequireDefault(_isFrozen);\n\nvar _create = require('babel-runtime/core-js/object/create');\n\nvar _create2 = _interopRequireDefault(_create);\n\nvar _typeof2 = require('babel-runtime/helpers/typeof');\n\nvar _typeof3 = _interopRequireDefault(_typeof2);\n\nvar _keys = require('babel-runtime/core-js/object/keys');\n\nvar _keys2 = _interopRequireDefault(_keys);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/*\n Author: Geraint Luff and others\n Year: 2013\n\n This code is released into the \"public domain\" by its author(s).  Anybody may use, alter and distribute the code without restriction.  The author makes no guarantees, and takes no liability of any kind for use of this code.\n\n If you find a bug or make an improvement, it would be courteous to let the author know, but it is not compulsory.\n */\n// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/keys?redirectlocale=en-US&redirectslug=JavaScript%2FReference%2FGlobal_Objects%2FObject%2Fkeys\nif (!_keys2.default) {\n    Object.keys = function () {\n        var hasOwnProperty = Object.prototype.hasOwnProperty,\n            hasDontEnumBug = !{ toString: null }.propertyIsEnumerable('toString'),\n            dontEnums = ['toString', 'toLocaleString', 'valueOf', 'hasOwnProperty', 'isPrototypeOf', 'propertyIsEnumerable', 'constructor'],\n            dontEnumsLength = dontEnums.length;\n\n        return function (obj) {\n            if ((typeof obj === 'undefined' ? 'undefined' : (0, _typeof3.default)(obj)) !== 'object' && typeof obj !== 'function' || obj === null) {\n                throw new TypeError('Object.keys called on non-object');\n            }\n\n            var result = [];\n\n            for (var prop in obj) {\n                if (hasOwnProperty.call(obj, prop)) {\n                    result.push(prop);\n                }\n            }\n\n            if (hasDontEnumBug) {\n                for (var i = 0; i < dontEnumsLength; i++) {\n                    if (hasOwnProperty.call(obj, dontEnums[i])) {\n                        result.push(dontEnums[i]);\n                    }\n                }\n            }\n            return result;\n        };\n    }();\n}\n// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/create\nif (!_create2.default) {\n    Object.create = function () {\n        function F() {}\n\n        return function (o) {\n            if (arguments.length !== 1) {\n                throw new Error('Object.create implementation only accepts one parameter.');\n            }\n            F.prototype = o;\n            return new F();\n        };\n    }();\n}\n// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/isArray?redirectlocale=en-US&redirectslug=JavaScript%2FReference%2FGlobal_Objects%2FArray%2FisArray\nif (!Array.isArray) {\n    Array.isArray = function (vArg) {\n        return Object.prototype.toString.call(vArg) === \"[object Array]\";\n    };\n}\n// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/indexOf?redirectlocale=en-US&redirectslug=JavaScript%2FReference%2FGlobal_Objects%2FArray%2FindexOf\nif (!Array.prototype.indexOf) {\n    Array.prototype.indexOf = function (searchElement /*, fromIndex */) {\n        if (this === null) {\n            throw new TypeError();\n        }\n        var t = Object(this);\n        var len = t.length >>> 0;\n\n        if (len === 0) {\n            return -1;\n        }\n        var n = 0;\n        if (arguments.length > 1) {\n            n = Number(arguments[1]);\n            if (n !== n) {\n                // shortcut for verifying if it's NaN\n                n = 0;\n            } else if (n !== 0 && n !== Infinity && n !== -Infinity) {\n                n = (n > 0 || -1) * Math.floor(Math.abs(n));\n            }\n        }\n        if (n >= len) {\n            return -1;\n        }\n        var k = n >= 0 ? n : Math.max(len - Math.abs(n), 0);\n        for (; k < len; k++) {\n            if (k in t && t[k] === searchElement) {\n                return k;\n            }\n        }\n        return -1;\n    };\n}\n\n// Grungey Object.isFrozen hack\nif (!_isFrozen2.default) {\n    Object.isFrozen = function (obj) {\n        var key = \"tv4_test_frozen_key\";\n        while (obj.hasOwnProperty(key)) {\n            key += Math.random();\n        }\n        try {\n            obj[key] = true;\n            delete obj[key];\n            return false;\n        } catch (e) {\n            return true;\n        }\n    };\n}\n// Based on: https://github.com/geraintluff/uri-templates, but with all the de-substitution stuff removed\n\nvar uriTemplateGlobalModifiers = {\n    \"+\": true,\n    \"#\": true,\n    \".\": true,\n    \"/\": true,\n    \";\": true,\n    \"?\": true,\n    \"&\": true\n};\nvar uriTemplateSuffices = {\n    \"*\": true\n};\n\nfunction notReallyPercentEncode(string) {\n    return encodeURI(string).replace(/%25[0-9][0-9]/g, function (doubleEncoded) {\n        return \"%\" + doubleEncoded.substring(3);\n    });\n}\n\nfunction uriTemplateSubstitution(spec) {\n    var modifier = \"\";\n    if (uriTemplateGlobalModifiers[spec.charAt(0)]) {\n        modifier = spec.charAt(0);\n        spec = spec.substring(1);\n    }\n    var separator = \"\";\n    var prefix = \"\";\n    var shouldEscape = true;\n    var showVariables = false;\n    var trimEmptyString = false;\n    if (modifier === '+') {\n        shouldEscape = false;\n    } else if (modifier === \".\") {\n        prefix = \".\";\n        separator = \".\";\n    } else if (modifier === \"/\") {\n        prefix = \"/\";\n        separator = \"/\";\n    } else if (modifier === '#') {\n        prefix = \"#\";\n        shouldEscape = false;\n    } else if (modifier === ';') {\n        prefix = \";\";\n        separator = \";\";\n        showVariables = true;\n        trimEmptyString = true;\n    } else if (modifier === '?') {\n        prefix = \"?\";\n        separator = \"&\";\n        showVariables = true;\n    } else if (modifier === '&') {\n        prefix = \"&\";\n        separator = \"&\";\n        showVariables = true;\n    }\n\n    var varNames = [];\n    var varList = spec.split(\",\");\n    var varSpecs = [];\n    var varSpecMap = {};\n    for (var i = 0; i < varList.length; i++) {\n        var varName = varList[i];\n        var truncate = null;\n        if (varName.indexOf(\":\") !== -1) {\n            var parts = varName.split(\":\");\n            varName = parts[0];\n            truncate = parseInt(parts[1], 10);\n        }\n        var suffices = {};\n        while (uriTemplateSuffices[varName.charAt(varName.length - 1)]) {\n            suffices[varName.charAt(varName.length - 1)] = true;\n            varName = varName.substring(0, varName.length - 1);\n        }\n        var varSpec = {\n            truncate: truncate,\n            name: varName,\n            suffices: suffices\n        };\n        varSpecs.push(varSpec);\n        varSpecMap[varName] = varSpec;\n        varNames.push(varName);\n    }\n    var subFunction = function subFunction(valueFunction) {\n        var result = \"\";\n        var startIndex = 0;\n        for (var i = 0; i < varSpecs.length; i++) {\n            var varSpec = varSpecs[i];\n            var value = valueFunction(varSpec.name);\n            if (value === null || value === undefined || Array.isArray(value) && value.length === 0 || (typeof value === 'undefined' ? 'undefined' : (0, _typeof3.default)(value)) === 'object' && (0, _keys2.default)(value).length === 0) {\n                startIndex++;\n                continue;\n            }\n            if (i === startIndex) {\n                result += prefix;\n            } else {\n                result += separator || \",\";\n            }\n            if (Array.isArray(value)) {\n                if (showVariables) {\n                    result += varSpec.name + \"=\";\n                }\n                for (var j = 0; j < value.length; j++) {\n                    if (j > 0) {\n                        result += varSpec.suffices['*'] ? separator || \",\" : \",\";\n                        if (varSpec.suffices['*'] && showVariables) {\n                            result += varSpec.name + \"=\";\n                        }\n                    }\n                    result += shouldEscape ? encodeURIComponent(value[j]).replace(/!/g, \"%21\") : notReallyPercentEncode(value[j]);\n                }\n            } else if ((typeof value === 'undefined' ? 'undefined' : (0, _typeof3.default)(value)) === \"object\") {\n                if (showVariables && !varSpec.suffices['*']) {\n                    result += varSpec.name + \"=\";\n                }\n                var first = true;\n                for (var key in value) {\n                    if (!first) {\n                        result += varSpec.suffices['*'] ? separator || \",\" : \",\";\n                    }\n                    first = false;\n                    result += shouldEscape ? encodeURIComponent(key).replace(/!/g, \"%21\") : notReallyPercentEncode(key);\n                    result += varSpec.suffices['*'] ? '=' : \",\";\n                    result += shouldEscape ? encodeURIComponent(value[key]).replace(/!/g, \"%21\") : notReallyPercentEncode(value[key]);\n                }\n            } else {\n                if (showVariables) {\n                    result += varSpec.name;\n                    if (!trimEmptyString || value !== \"\") {\n                        result += \"=\";\n                    }\n                }\n                if (varSpec.truncate != null) {\n                    value = value.substring(0, varSpec.truncate);\n                }\n                result += shouldEscape ? encodeURIComponent(value).replace(/!/g, \"%21\") : notReallyPercentEncode(value);\n            }\n        }\n        return result;\n    };\n    subFunction.varNames = varNames;\n    return {\n        prefix: prefix,\n        substitution: subFunction\n    };\n}\n\nfunction UriTemplate(template) {\n    if (!(this instanceof UriTemplate)) {\n        return new UriTemplate(template);\n    }\n    var parts = template.split(\"{\");\n    var textParts = [parts.shift()];\n    var prefixes = [];\n    var substitutions = [];\n    var varNames = [];\n    while (parts.length > 0) {\n        var part = parts.shift();\n        var spec = part.split(\"}\")[0];\n        var remainder = part.substring(spec.length + 1);\n        var funcs = uriTemplateSubstitution(spec);\n        substitutions.push(funcs.substitution);\n        prefixes.push(funcs.prefix);\n        textParts.push(remainder);\n        varNames = varNames.concat(funcs.substitution.varNames);\n    }\n    this.fill = function (valueFunction) {\n        var result = textParts[0];\n        for (var i = 0; i < substitutions.length; i++) {\n            var substitution = substitutions[i];\n            result += substitution(valueFunction);\n            result += textParts[i + 1];\n        }\n        return result;\n    };\n    this.varNames = varNames;\n    this.template = template;\n}\n\nUriTemplate.prototype = {\n    toString: function toString() {\n        return this.template;\n    },\n    fillFromObject: function fillFromObject(obj) {\n        return this.fill(function (varName) {\n            return obj[varName];\n        });\n    }\n};\nvar ValidatorContext = function ValidatorContext(parent, collectMultiple, errorReporter, checkRecursive, trackUnknownProperties) {\n    this.missing = [];\n    this.missingMap = {};\n    this.formatValidators = parent ? (0, _create2.default)(parent.formatValidators) : {};\n    this.schemas = parent ? (0, _create2.default)(parent.schemas) : {};\n    this.collectMultiple = collectMultiple;\n    this.errors = [];\n    this.handleError = collectMultiple ? this.collectError : this.returnError;\n    if (checkRecursive) {\n        this.checkRecursive = true;\n        this.scanned = [];\n        this.scannedFrozen = [];\n        this.scannedFrozenSchemas = [];\n        this.scannedFrozenValidationErrors = [];\n        this.validatedSchemasKey = 'tv4_validation_id';\n        this.validationErrorsKey = 'tv4_validation_errors_id';\n    }\n    if (trackUnknownProperties) {\n        this.trackUnknownProperties = true;\n        this.knownPropertyPaths = {};\n        this.unknownPropertyPaths = {};\n    }\n    this.errorReporter = errorReporter || defaultErrorReporter('en');\n    if (typeof this.errorReporter === 'string') {\n        throw new Error('debug');\n    }\n    this.definedKeywords = {};\n    if (parent) {\n        for (var key in parent.definedKeywords) {\n            this.definedKeywords[key] = parent.definedKeywords[key].slice(0);\n        }\n    }\n};\nValidatorContext.prototype.defineKeyword = function (keyword, keywordFunction) {\n    this.definedKeywords[keyword] = this.definedKeywords[keyword] || [];\n    this.definedKeywords[keyword].push(keywordFunction);\n};\nValidatorContext.prototype.createError = function (code, messageParams, dataPath, schemaPath, subErrors, data, schema) {\n    var error = new ValidationError(code, messageParams, dataPath, schemaPath, subErrors);\n    error.message = this.errorReporter(error, data, schema);\n    return error;\n};\nValidatorContext.prototype.returnError = function (error) {\n    return error;\n};\nValidatorContext.prototype.collectError = function (error) {\n    if (error) {\n        this.errors.push(error);\n    }\n    return null;\n};\nValidatorContext.prototype.prefixErrors = function (startIndex, dataPath, schemaPath) {\n    for (var i = startIndex; i < this.errors.length; i++) {\n        this.errors[i] = this.errors[i].prefixWith(dataPath, schemaPath);\n    }\n    return this;\n};\nValidatorContext.prototype.banUnknownProperties = function (data, schema) {\n    for (var unknownPath in this.unknownPropertyPaths) {\n        var error = this.createError(ErrorCodes.UNKNOWN_PROPERTY, { path: unknownPath }, unknownPath, \"\", null, data, schema);\n        var result = this.handleError(error);\n        if (result) {\n            return result;\n        }\n    }\n    return null;\n};\n\nValidatorContext.prototype.addFormat = function (format, validator) {\n    if ((typeof format === 'undefined' ? 'undefined' : (0, _typeof3.default)(format)) === 'object') {\n        for (var key in format) {\n            this.addFormat(key, format[key]);\n        }\n        return this;\n    }\n    this.formatValidators[format] = validator;\n};\nValidatorContext.prototype.resolveRefs = function (schema, urlHistory) {\n    if (schema['$ref'] !== undefined) {\n        urlHistory = urlHistory || {};\n        if (urlHistory[schema['$ref']]) {\n            return this.createError(ErrorCodes.CIRCULAR_REFERENCE, { urls: (0, _keys2.default)(urlHistory).join(', ') }, '', '', null, undefined, schema);\n        }\n        urlHistory[schema['$ref']] = true;\n        schema = this.getSchema(schema['$ref'], urlHistory);\n    }\n    return schema;\n};\nValidatorContext.prototype.getSchema = function (url, urlHistory) {\n    var schema;\n    if (this.schemas[url] !== undefined) {\n        schema = this.schemas[url];\n        return this.resolveRefs(schema, urlHistory);\n    }\n    var baseUrl = url;\n    var fragment = \"\";\n    if (url.indexOf('#') !== -1) {\n        fragment = url.substring(url.indexOf(\"#\") + 1);\n        baseUrl = url.substring(0, url.indexOf(\"#\"));\n    }\n    if ((0, _typeof3.default)(this.schemas[baseUrl]) === 'object') {\n        schema = this.schemas[baseUrl];\n        var pointerPath = decodeURIComponent(fragment);\n        if (pointerPath === \"\") {\n            return this.resolveRefs(schema, urlHistory);\n        } else if (pointerPath.charAt(0) !== \"/\") {\n            return undefined;\n        }\n        var parts = pointerPath.split(\"/\").slice(1);\n        for (var i = 0; i < parts.length; i++) {\n            var component = parts[i].replace(/~1/g, \"/\").replace(/~0/g, \"~\");\n            if (schema[component] === undefined) {\n                schema = undefined;\n                break;\n            }\n            schema = schema[component];\n        }\n        if (schema !== undefined) {\n            return this.resolveRefs(schema, urlHistory);\n        }\n    }\n    if (this.missing[baseUrl] === undefined) {\n        this.missing.push(baseUrl);\n        this.missing[baseUrl] = baseUrl;\n        this.missingMap[baseUrl] = baseUrl;\n    }\n};\nValidatorContext.prototype.searchSchemas = function (schema, url) {\n    if (Array.isArray(schema)) {\n        for (var i = 0; i < schema.length; i++) {\n            this.searchSchemas(schema[i], url);\n        }\n    } else if (schema && (typeof schema === 'undefined' ? 'undefined' : (0, _typeof3.default)(schema)) === \"object\") {\n        if (typeof schema.id === \"string\") {\n            if (isTrustedUrl(url, schema.id)) {\n                if (this.schemas[schema.id] === undefined) {\n                    this.schemas[schema.id] = schema;\n                }\n            }\n        }\n        for (var key in schema) {\n            if (key !== \"enum\") {\n                if ((0, _typeof3.default)(schema[key]) === \"object\") {\n                    this.searchSchemas(schema[key], url);\n                } else if (key === \"$ref\") {\n                    var uri = getDocumentUri(schema[key]);\n                    if (uri && this.schemas[uri] === undefined && this.missingMap[uri] === undefined) {\n                        this.missingMap[uri] = uri;\n                    }\n                }\n            }\n        }\n    }\n};\nValidatorContext.prototype.addSchema = function (url, schema) {\n    //overload\n    if (typeof url !== 'string' || typeof schema === 'undefined') {\n        if ((typeof url === 'undefined' ? 'undefined' : (0, _typeof3.default)(url)) === 'object' && typeof url.id === 'string') {\n            schema = url;\n            url = schema.id;\n        } else {\n            return;\n        }\n    }\n    if (url === getDocumentUri(url) + \"#\") {\n        // Remove empty fragment\n        url = getDocumentUri(url);\n    }\n    this.schemas[url] = schema;\n    delete this.missingMap[url];\n    normSchema(schema, url);\n    this.searchSchemas(schema, url);\n};\n\nValidatorContext.prototype.getSchemaMap = function () {\n    var map = {};\n    for (var key in this.schemas) {\n        map[key] = this.schemas[key];\n    }\n    return map;\n};\n\nValidatorContext.prototype.getSchemaUris = function (filterRegExp) {\n    var list = [];\n    for (var key in this.schemas) {\n        if (!filterRegExp || filterRegExp.test(key)) {\n            list.push(key);\n        }\n    }\n    return list;\n};\n\nValidatorContext.prototype.getMissingUris = function (filterRegExp) {\n    var list = [];\n    for (var key in this.missingMap) {\n        if (!filterRegExp || filterRegExp.test(key)) {\n            list.push(key);\n        }\n    }\n    return list;\n};\n\nValidatorContext.prototype.dropSchemas = function () {\n    this.schemas = {};\n    this.reset();\n};\nValidatorContext.prototype.reset = function () {\n    this.missing = [];\n    this.missingMap = {};\n    this.errors = [];\n};\n\nValidatorContext.prototype.validateAll = function (data, schema, dataPathParts, schemaPathParts, dataPointerPath) {\n    var topLevel;\n    schema = this.resolveRefs(schema);\n    if (!schema) {\n        return null;\n    } else if (schema instanceof ValidationError) {\n        this.errors.push(schema);\n        return schema;\n    }\n\n    var startErrorCount = this.errors.length;\n    var frozenIndex,\n        scannedFrozenSchemaIndex = null,\n        scannedSchemasIndex = null;\n    if (this.checkRecursive && data && (typeof data === 'undefined' ? 'undefined' : (0, _typeof3.default)(data)) === 'object') {\n        topLevel = !this.scanned.length;\n        if (data[this.validatedSchemasKey]) {\n            var schemaIndex = data[this.validatedSchemasKey].indexOf(schema);\n            if (schemaIndex !== -1) {\n                this.errors = this.errors.concat(data[this.validationErrorsKey][schemaIndex]);\n                return null;\n            }\n        }\n        if ((0, _isFrozen2.default)(data)) {\n            frozenIndex = this.scannedFrozen.indexOf(data);\n            if (frozenIndex !== -1) {\n                var frozenSchemaIndex = this.scannedFrozenSchemas[frozenIndex].indexOf(schema);\n                if (frozenSchemaIndex !== -1) {\n                    this.errors = this.errors.concat(this.scannedFrozenValidationErrors[frozenIndex][frozenSchemaIndex]);\n                    return null;\n                }\n            }\n        }\n        this.scanned.push(data);\n        if ((0, _isFrozen2.default)(data)) {\n            if (frozenIndex === -1) {\n                frozenIndex = this.scannedFrozen.length;\n                this.scannedFrozen.push(data);\n                this.scannedFrozenSchemas.push([]);\n            }\n            scannedFrozenSchemaIndex = this.scannedFrozenSchemas[frozenIndex].length;\n            this.scannedFrozenSchemas[frozenIndex][scannedFrozenSchemaIndex] = schema;\n            this.scannedFrozenValidationErrors[frozenIndex][scannedFrozenSchemaIndex] = [];\n        } else {\n            if (!data[this.validatedSchemasKey]) {\n                try {\n                    (0, _defineProperty2.default)(data, this.validatedSchemasKey, {\n                        value: [],\n                        configurable: true\n                    });\n                    (0, _defineProperty2.default)(data, this.validationErrorsKey, {\n                        value: [],\n                        configurable: true\n                    });\n                } catch (e) {\n                    //IE 7/8 workaround\n                    data[this.validatedSchemasKey] = [];\n                    data[this.validationErrorsKey] = [];\n                }\n            }\n            scannedSchemasIndex = data[this.validatedSchemasKey].length;\n            data[this.validatedSchemasKey][scannedSchemasIndex] = schema;\n            data[this.validationErrorsKey][scannedSchemasIndex] = [];\n        }\n    }\n\n    var errorCount = this.errors.length;\n    var error = this.validateBasic(data, schema, dataPointerPath) || this.validateNumeric(data, schema, dataPointerPath) || this.validateString(data, schema, dataPointerPath) || this.validateArray(data, schema, dataPointerPath) || this.validateObject(data, schema, dataPointerPath) || this.validateCombinations(data, schema, dataPointerPath) || this.validateHypermedia(data, schema, dataPointerPath) || this.validateFormat(data, schema, dataPointerPath) || this.validateDefinedKeywords(data, schema, dataPointerPath) || null;\n\n    if (topLevel) {\n        while (this.scanned.length) {\n            var item = this.scanned.pop();\n            delete item[this.validatedSchemasKey];\n        }\n        this.scannedFrozen = [];\n        this.scannedFrozenSchemas = [];\n    }\n\n    if (error || errorCount !== this.errors.length) {\n        while (dataPathParts && dataPathParts.length || schemaPathParts && schemaPathParts.length) {\n            var dataPart = dataPathParts && dataPathParts.length ? \"\" + dataPathParts.pop() : null;\n            var schemaPart = schemaPathParts && schemaPathParts.length ? \"\" + schemaPathParts.pop() : null;\n            if (error) {\n                error = error.prefixWith(dataPart, schemaPart);\n            }\n            this.prefixErrors(errorCount, dataPart, schemaPart);\n        }\n    }\n\n    if (scannedFrozenSchemaIndex !== null) {\n        this.scannedFrozenValidationErrors[frozenIndex][scannedFrozenSchemaIndex] = this.errors.slice(startErrorCount);\n    } else if (scannedSchemasIndex !== null) {\n        data[this.validationErrorsKey][scannedSchemasIndex] = this.errors.slice(startErrorCount);\n    }\n\n    return this.handleError(error);\n};\nValidatorContext.prototype.validateFormat = function (data, schema) {\n    if (typeof schema.format !== 'string' || !this.formatValidators[schema.format]) {\n        return null;\n    }\n    var errorMessage = this.formatValidators[schema.format].call(null, data, schema);\n    if (typeof errorMessage === 'string' || typeof errorMessage === 'number') {\n        return this.createError(ErrorCodes.FORMAT_CUSTOM, { message: errorMessage }, '', '/format', null, data, schema);\n    } else if (errorMessage && (typeof errorMessage === 'undefined' ? 'undefined' : (0, _typeof3.default)(errorMessage)) === 'object') {\n        return this.createError(ErrorCodes.FORMAT_CUSTOM, { message: errorMessage.message || \"?\" }, errorMessage.dataPath || '', errorMessage.schemaPath || \"/format\", null, data, schema);\n    }\n    return null;\n};\nValidatorContext.prototype.validateDefinedKeywords = function (data, schema, dataPointerPath) {\n    for (var key in this.definedKeywords) {\n        if (typeof schema[key] === 'undefined') {\n            continue;\n        }\n        var validationFunctions = this.definedKeywords[key];\n        for (var i = 0; i < validationFunctions.length; i++) {\n            var func = validationFunctions[i];\n            var result = func(data, schema[key], schema, dataPointerPath);\n            if (typeof result === 'string' || typeof result === 'number') {\n                return this.createError(ErrorCodes.KEYWORD_CUSTOM, {\n                    key: key,\n                    message: result\n                }, '', '', null, data, schema).prefixWith(null, key);\n            } else if (result && (typeof result === 'undefined' ? 'undefined' : (0, _typeof3.default)(result)) === 'object') {\n                var code = result.code;\n                if (typeof code === 'string') {\n                    if (!ErrorCodes[code]) {\n                        throw new Error('Undefined error code (use defineError): ' + code);\n                    }\n                    code = ErrorCodes[code];\n                } else if (typeof code !== 'number') {\n                    code = ErrorCodes.KEYWORD_CUSTOM;\n                }\n                var messageParams = (0, _typeof3.default)(result.message) === 'object' ? result.message : {\n                    key: key,\n                    message: result.message || \"?\"\n                };\n                var schemaPath = result.schemaPath || \"/\" + key.replace(/~/g, '~0').replace(/\\//g, '~1');\n                return this.createError(code, messageParams, result.dataPath || null, schemaPath, null, data, schema);\n            }\n        }\n    }\n    return null;\n};\n\nfunction recursiveCompare(A, B) {\n    if (A === B) {\n        return true;\n    }\n    if (A && B && (typeof A === 'undefined' ? 'undefined' : (0, _typeof3.default)(A)) === \"object\" && (typeof B === 'undefined' ? 'undefined' : (0, _typeof3.default)(B)) === \"object\") {\n        if (Array.isArray(A) !== Array.isArray(B)) {\n            return false;\n        } else if (Array.isArray(A)) {\n            if (A.length !== B.length) {\n                return false;\n            }\n            for (var i = 0; i < A.length; i++) {\n                if (!recursiveCompare(A[i], B[i])) {\n                    return false;\n                }\n            }\n        } else {\n            var key;\n            for (key in A) {\n                if (B[key] === undefined && A[key] !== undefined) {\n                    return false;\n                }\n            }\n            for (key in B) {\n                if (A[key] === undefined && B[key] !== undefined) {\n                    return false;\n                }\n            }\n            for (key in A) {\n                if (!recursiveCompare(A[key], B[key])) {\n                    return false;\n                }\n            }\n        }\n        return true;\n    }\n    return false;\n}\n\nValidatorContext.prototype.validateBasic = function validateBasic(data, schema, dataPointerPath) {\n    var error;\n    if (error = this.validateType(data, schema, dataPointerPath)) {\n        return error.prefixWith(null, \"type\");\n    }\n    if (error = this.validateEnum(data, schema, dataPointerPath)) {\n        return error.prefixWith(null, \"type\");\n    }\n    return null;\n};\n\nValidatorContext.prototype.validateType = function validateType(data, schema) {\n    if (schema.type === undefined) {\n        return null;\n    }\n    var dataType = typeof data === 'undefined' ? 'undefined' : (0, _typeof3.default)(data);\n    if (data === null) {\n        dataType = \"null\";\n    } else if (Array.isArray(data)) {\n        dataType = \"array\";\n    }\n    var allowedTypes = schema.type;\n    if (!Array.isArray(allowedTypes)) {\n        allowedTypes = [allowedTypes];\n    }\n\n    for (var i = 0; i < allowedTypes.length; i++) {\n        var type = allowedTypes[i];\n        if (type === dataType || type === \"integer\" && dataType === \"number\" && data % 1 === 0) {\n            return null;\n        }\n    }\n    return this.createError(ErrorCodes.INVALID_TYPE, {\n        type: dataType,\n        expected: allowedTypes.join(\"/\")\n    }, '', '', null, data, schema);\n};\n\nValidatorContext.prototype.validateEnum = function validateEnum(data, schema) {\n    if (schema[\"enum\"] === undefined) {\n        return null;\n    }\n    for (var i = 0; i < schema[\"enum\"].length; i++) {\n        var enumVal = schema[\"enum\"][i];\n        if (recursiveCompare(data, enumVal)) {\n            return null;\n        }\n    }\n    return this.createError(ErrorCodes.ENUM_MISMATCH, { value: typeof JSON !== 'undefined' ? (0, _stringify2.default)(data) : data }, '', '', null, data, schema);\n};\n\nValidatorContext.prototype.validateNumeric = function validateNumeric(data, schema, dataPointerPath) {\n    return this.validateMultipleOf(data, schema, dataPointerPath) || this.validateMinMax(data, schema, dataPointerPath) || this.validateNaN(data, schema, dataPointerPath) || null;\n};\n\nvar CLOSE_ENOUGH_LOW = Math.pow(2, -51);\nvar CLOSE_ENOUGH_HIGH = 1 - CLOSE_ENOUGH_LOW;\nValidatorContext.prototype.validateMultipleOf = function validateMultipleOf(data, schema) {\n    var multipleOf = schema.multipleOf || schema.divisibleBy;\n    if (multipleOf === undefined) {\n        return null;\n    }\n    if (typeof data === \"number\") {\n        var remainder = data / multipleOf % 1;\n        if (remainder >= CLOSE_ENOUGH_LOW && remainder < CLOSE_ENOUGH_HIGH) {\n            return this.createError(ErrorCodes.NUMBER_MULTIPLE_OF, {\n                value: data,\n                multipleOf: multipleOf\n            }, '', '', null, data, schema);\n        }\n    }\n    return null;\n};\n\nValidatorContext.prototype.validateMinMax = function validateMinMax(data, schema) {\n    if (typeof data !== \"number\") {\n        return null;\n    }\n    if (schema.minimum !== undefined) {\n        if (data < schema.minimum) {\n            return this.createError(ErrorCodes.NUMBER_MINIMUM, {\n                value: data,\n                minimum: schema.minimum\n            }, '', '/minimum', null, data, schema);\n        }\n        if (schema.exclusiveMinimum && data === schema.minimum) {\n            return this.createError(ErrorCodes.NUMBER_MINIMUM_EXCLUSIVE, {\n                value: data,\n                minimum: schema.minimum\n            }, '', '/exclusiveMinimum', null, data, schema);\n        }\n    }\n    if (schema.maximum !== undefined) {\n        if (data > schema.maximum) {\n            return this.createError(ErrorCodes.NUMBER_MAXIMUM, {\n                value: data,\n                maximum: schema.maximum\n            }, '', '/maximum', null, data, schema);\n        }\n        if (schema.exclusiveMaximum && data === schema.maximum) {\n            return this.createError(ErrorCodes.NUMBER_MAXIMUM_EXCLUSIVE, {\n                value: data,\n                maximum: schema.maximum\n            }, '', '/exclusiveMaximum', null, data, schema);\n        }\n    }\n    return null;\n};\n\nValidatorContext.prototype.validateNaN = function validateNaN(data, schema) {\n    if (typeof data !== \"number\") {\n        return null;\n    }\n    if (isNaN(data) === true || data === Infinity || data === -Infinity) {\n        return this.createError(ErrorCodes.NUMBER_NOT_A_NUMBER, { value: data }, '', '/type', null, data, schema);\n    }\n    return null;\n};\n\nValidatorContext.prototype.validateString = function validateString(data, schema, dataPointerPath) {\n    return this.validateStringLength(data, schema, dataPointerPath) || this.validateStringPattern(data, schema, dataPointerPath) || null;\n};\n\nValidatorContext.prototype.validateStringLength = function validateStringLength(data, schema) {\n    if (typeof data !== \"string\") {\n        return null;\n    }\n    if (schema.minLength !== undefined) {\n        if (data.length < schema.minLength) {\n            return this.createError(ErrorCodes.STRING_LENGTH_SHORT, {\n                length: data.length,\n                minimum: schema.minLength\n            }, '', '/minLength', null, data, schema);\n        }\n    }\n    if (schema.maxLength !== undefined) {\n        if (data.length > schema.maxLength) {\n            return this.createError(ErrorCodes.STRING_LENGTH_LONG, {\n                length: data.length,\n                maximum: schema.maxLength\n            }, '', '/maxLength', null, data, schema);\n        }\n    }\n    return null;\n};\n\nValidatorContext.prototype.validateStringPattern = function validateStringPattern(data, schema) {\n    if (typeof data !== \"string\" || typeof schema.pattern !== \"string\" && !(schema.pattern instanceof RegExp)) {\n        return null;\n    }\n    var regexp;\n    if (schema.pattern instanceof RegExp) {\n        regexp = schema.pattern;\n    } else {\n        var body,\n            flags = '';\n        // Check for regular expression literals\n        // @see http://www.ecma-international.org/ecma-262/5.1/#sec-7.8.5\n        var literal = schema.pattern.match(/^\\/(.+)\\/([img]*)$/);\n        if (literal) {\n            body = literal[1];\n            flags = literal[2];\n        } else {\n            body = schema.pattern;\n        }\n        regexp = new RegExp(body, flags);\n    }\n    if (!regexp.test(data)) {\n        return this.createError(ErrorCodes.STRING_PATTERN, { pattern: schema.pattern }, '', '/pattern', null, data, schema);\n    }\n    return null;\n};\n\nValidatorContext.prototype.validateArray = function validateArray(data, schema, dataPointerPath) {\n    if (!Array.isArray(data)) {\n        return null;\n    }\n    return this.validateArrayLength(data, schema, dataPointerPath) || this.validateArrayUniqueItems(data, schema, dataPointerPath) || this.validateArrayItems(data, schema, dataPointerPath) || null;\n};\n\nValidatorContext.prototype.validateArrayLength = function validateArrayLength(data, schema) {\n    var error;\n    if (schema.minItems !== undefined) {\n        if (data.length < schema.minItems) {\n            error = this.createError(ErrorCodes.ARRAY_LENGTH_SHORT, {\n                length: data.length,\n                minimum: schema.minItems\n            }, '', '/minItems', null, data, schema);\n            if (this.handleError(error)) {\n                return error;\n            }\n        }\n    }\n    if (schema.maxItems !== undefined) {\n        if (data.length > schema.maxItems) {\n            error = this.createError(ErrorCodes.ARRAY_LENGTH_LONG, {\n                length: data.length,\n                maximum: schema.maxItems\n            }, '', '/maxItems', null, data, schema);\n            if (this.handleError(error)) {\n                return error;\n            }\n        }\n    }\n    return null;\n};\n\nValidatorContext.prototype.validateArrayUniqueItems = function validateArrayUniqueItems(data, schema) {\n    if (schema.uniqueItems) {\n        for (var i = 0; i < data.length; i++) {\n            for (var j = i + 1; j < data.length; j++) {\n                if (recursiveCompare(data[i], data[j])) {\n                    var error = this.createError(ErrorCodes.ARRAY_UNIQUE, {\n                        match1: i,\n                        match2: j\n                    }, '', '/uniqueItems', null, data, schema);\n                    if (this.handleError(error)) {\n                        return error;\n                    }\n                }\n            }\n        }\n    }\n    return null;\n};\n\nValidatorContext.prototype.validateArrayItems = function validateArrayItems(data, schema, dataPointerPath) {\n    if (schema.items === undefined) {\n        return null;\n    }\n    var error, i;\n    if (Array.isArray(schema.items)) {\n        for (i = 0; i < data.length; i++) {\n            if (i < schema.items.length) {\n                if (error = this.validateAll(data[i], schema.items[i], [i], [\"items\", i], dataPointerPath + \"/\" + i)) {\n                    return error;\n                }\n            } else if (schema.additionalItems !== undefined) {\n                if (typeof schema.additionalItems === \"boolean\") {\n                    if (!schema.additionalItems) {\n                        error = this.createError(ErrorCodes.ARRAY_ADDITIONAL_ITEMS, {}, '/' + i, '/additionalItems', null, data, schema);\n                        if (this.handleError(error)) {\n                            return error;\n                        }\n                    }\n                } else if (error = this.validateAll(data[i], schema.additionalItems, [i], [\"additionalItems\"], dataPointerPath + \"/\" + i)) {\n                    return error;\n                }\n            }\n        }\n    } else {\n        for (i = 0; i < data.length; i++) {\n            if (error = this.validateAll(data[i], schema.items, [i], [\"items\"], dataPointerPath + \"/\" + i)) {\n                return error;\n            }\n        }\n    }\n    return null;\n};\n\nValidatorContext.prototype.validateObject = function validateObject(data, schema, dataPointerPath) {\n    if ((typeof data === 'undefined' ? 'undefined' : (0, _typeof3.default)(data)) !== \"object\" || data === null || Array.isArray(data)) {\n        return null;\n    }\n    return this.validateObjectMinMaxProperties(data, schema, dataPointerPath) || this.validateObjectRequiredProperties(data, schema, dataPointerPath) || this.validateObjectProperties(data, schema, dataPointerPath) || this.validateObjectDependencies(data, schema, dataPointerPath) || null;\n};\n\nValidatorContext.prototype.validateObjectMinMaxProperties = function validateObjectMinMaxProperties(data, schema) {\n    var keys = (0, _keys2.default)(data);\n    var error;\n    if (schema.minProperties !== undefined) {\n        if (keys.length < schema.minProperties) {\n            error = this.createError(ErrorCodes.OBJECT_PROPERTIES_MINIMUM, {\n                propertyCount: keys.length,\n                minimum: schema.minProperties\n            }, '', '/minProperties', null, data, schema);\n            if (this.handleError(error)) {\n                return error;\n            }\n        }\n    }\n    if (schema.maxProperties !== undefined) {\n        if (keys.length > schema.maxProperties) {\n            error = this.createError(ErrorCodes.OBJECT_PROPERTIES_MAXIMUM, {\n                propertyCount: keys.length,\n                maximum: schema.maxProperties\n            }, '', '/maxProperties', null, data, schema);\n            if (this.handleError(error)) {\n                return error;\n            }\n        }\n    }\n    return null;\n};\n\nValidatorContext.prototype.validateObjectRequiredProperties = function validateObjectRequiredProperties(data, schema) {\n    if (schema.required !== undefined) {\n        for (var i = 0; i < schema.required.length; i++) {\n            var key = schema.required[i];\n            if (data[key] === undefined) {\n                var error = this.createError(ErrorCodes.OBJECT_REQUIRED, { key: key }, '', '/required/' + i, null, data, schema);\n                if (this.handleError(error)) {\n                    return error;\n                }\n            }\n        }\n    }\n    return null;\n};\n\nValidatorContext.prototype.validateObjectProperties = function validateObjectProperties(data, schema, dataPointerPath) {\n    var error;\n    for (var key in data) {\n        var keyPointerPath = dataPointerPath + \"/\" + key.replace(/~/g, '~0').replace(/\\//g, '~1');\n        var foundMatch = false;\n        if (schema.properties !== undefined && schema.properties[key] !== undefined) {\n            foundMatch = true;\n            if (error = this.validateAll(data[key], schema.properties[key], [key], [\"properties\", key], keyPointerPath)) {\n                return error;\n            }\n        }\n        if (schema.patternProperties !== undefined) {\n            for (var patternKey in schema.patternProperties) {\n                var regexp = new RegExp(patternKey);\n                if (regexp.test(key)) {\n                    foundMatch = true;\n                    if (error = this.validateAll(data[key], schema.patternProperties[patternKey], [key], [\"patternProperties\", patternKey], keyPointerPath)) {\n                        return error;\n                    }\n                }\n            }\n        }\n        if (!foundMatch) {\n            if (schema.additionalProperties !== undefined) {\n                if (this.trackUnknownProperties) {\n                    this.knownPropertyPaths[keyPointerPath] = true;\n                    delete this.unknownPropertyPaths[keyPointerPath];\n                }\n                if (typeof schema.additionalProperties === \"boolean\") {\n                    if (!schema.additionalProperties) {\n                        error = this.createError(ErrorCodes.OBJECT_ADDITIONAL_PROPERTIES, { key: key }, '', '/additionalProperties', null, data, schema).prefixWith(key, null);\n                        if (this.handleError(error)) {\n                            return error;\n                        }\n                    }\n                } else {\n                    if (error = this.validateAll(data[key], schema.additionalProperties, [key], [\"additionalProperties\"], keyPointerPath)) {\n                        return error;\n                    }\n                }\n            } else if (this.trackUnknownProperties && !this.knownPropertyPaths[keyPointerPath]) {\n                this.unknownPropertyPaths[keyPointerPath] = true;\n            }\n        } else if (this.trackUnknownProperties) {\n            this.knownPropertyPaths[keyPointerPath] = true;\n            delete this.unknownPropertyPaths[keyPointerPath];\n        }\n    }\n    return null;\n};\n\nValidatorContext.prototype.validateObjectDependencies = function validateObjectDependencies(data, schema, dataPointerPath) {\n    var error;\n    if (schema.dependencies !== undefined) {\n        for (var depKey in schema.dependencies) {\n            if (data[depKey] !== undefined) {\n                var dep = schema.dependencies[depKey];\n                if (typeof dep === \"string\") {\n                    if (data[dep] === undefined) {\n                        error = this.createError(ErrorCodes.OBJECT_DEPENDENCY_KEY, {\n                            key: depKey,\n                            missing: dep\n                        }, '', '', null, data, schema).prefixWith(null, depKey).prefixWith(null, \"dependencies\");\n                        if (this.handleError(error)) {\n                            return error;\n                        }\n                    }\n                } else if (Array.isArray(dep)) {\n                    for (var i = 0; i < dep.length; i++) {\n                        var requiredKey = dep[i];\n                        if (data[requiredKey] === undefined) {\n                            error = this.createError(ErrorCodes.OBJECT_DEPENDENCY_KEY, {\n                                key: depKey,\n                                missing: requiredKey\n                            }, '', '/' + i, null, data, schema).prefixWith(null, depKey).prefixWith(null, \"dependencies\");\n                            if (this.handleError(error)) {\n                                return error;\n                            }\n                        }\n                    }\n                } else {\n                    if (error = this.validateAll(data, dep, [], [\"dependencies\", depKey], dataPointerPath)) {\n                        return error;\n                    }\n                }\n            }\n        }\n    }\n    return null;\n};\n\nValidatorContext.prototype.validateCombinations = function validateCombinations(data, schema, dataPointerPath) {\n    return this.validateAllOf(data, schema, dataPointerPath) || this.validateAnyOf(data, schema, dataPointerPath) || this.validateOneOf(data, schema, dataPointerPath) || this.validateNot(data, schema, dataPointerPath) || null;\n};\n\nValidatorContext.prototype.validateAllOf = function validateAllOf(data, schema, dataPointerPath) {\n    if (schema.allOf === undefined) {\n        return null;\n    }\n    var error;\n    for (var i = 0; i < schema.allOf.length; i++) {\n        var subSchema = schema.allOf[i];\n        if (error = this.validateAll(data, subSchema, [], [\"allOf\", i], dataPointerPath)) {\n            return error;\n        }\n    }\n    return null;\n};\n\nValidatorContext.prototype.validateAnyOf = function validateAnyOf(data, schema, dataPointerPath) {\n    if (schema.anyOf === undefined) {\n        return null;\n    }\n    var errors = [];\n    var startErrorCount = this.errors.length;\n    var oldUnknownPropertyPaths, oldKnownPropertyPaths;\n    if (this.trackUnknownProperties) {\n        oldUnknownPropertyPaths = this.unknownPropertyPaths;\n        oldKnownPropertyPaths = this.knownPropertyPaths;\n    }\n    var errorAtEnd = true;\n    for (var i = 0; i < schema.anyOf.length; i++) {\n        if (this.trackUnknownProperties) {\n            this.unknownPropertyPaths = {};\n            this.knownPropertyPaths = {};\n        }\n        var subSchema = schema.anyOf[i];\n\n        var errorCount = this.errors.length;\n        var error = this.validateAll(data, subSchema, [], [\"anyOf\", i], dataPointerPath);\n\n        if (error === null && errorCount === this.errors.length) {\n            this.errors = this.errors.slice(0, startErrorCount);\n\n            if (this.trackUnknownProperties) {\n                for (var knownKey in this.knownPropertyPaths) {\n                    oldKnownPropertyPaths[knownKey] = true;\n                    delete oldUnknownPropertyPaths[knownKey];\n                }\n                for (var unknownKey in this.unknownPropertyPaths) {\n                    if (!oldKnownPropertyPaths[unknownKey]) {\n                        oldUnknownPropertyPaths[unknownKey] = true;\n                    }\n                }\n                // We need to continue looping so we catch all the property definitions, but we don't want to return an error\n                errorAtEnd = false;\n                continue;\n            }\n\n            return null;\n        }\n        if (error) {\n            errors.push(error.prefixWith(null, \"\" + i).prefixWith(null, \"anyOf\"));\n        }\n    }\n    if (this.trackUnknownProperties) {\n        this.unknownPropertyPaths = oldUnknownPropertyPaths;\n        this.knownPropertyPaths = oldKnownPropertyPaths;\n    }\n    if (errorAtEnd) {\n        errors = errors.concat(this.errors.slice(startErrorCount));\n        this.errors = this.errors.slice(0, startErrorCount);\n        return this.createError(ErrorCodes.ANY_OF_MISSING, {}, \"\", \"/anyOf\", errors, data, schema);\n    }\n};\n\nValidatorContext.prototype.validateOneOf = function validateOneOf(data, schema, dataPointerPath) {\n    if (schema.oneOf === undefined) {\n        return null;\n    }\n    var validIndex = null;\n    var errors = [];\n    var startErrorCount = this.errors.length;\n    var oldUnknownPropertyPaths, oldKnownPropertyPaths;\n    if (this.trackUnknownProperties) {\n        oldUnknownPropertyPaths = this.unknownPropertyPaths;\n        oldKnownPropertyPaths = this.knownPropertyPaths;\n    }\n    for (var i = 0; i < schema.oneOf.length; i++) {\n        if (this.trackUnknownProperties) {\n            this.unknownPropertyPaths = {};\n            this.knownPropertyPaths = {};\n        }\n        var subSchema = schema.oneOf[i];\n\n        var errorCount = this.errors.length;\n        var error = this.validateAll(data, subSchema, [], [\"oneOf\", i], dataPointerPath);\n\n        if (error === null && errorCount === this.errors.length) {\n            if (validIndex === null) {\n                validIndex = i;\n            } else {\n                this.errors = this.errors.slice(0, startErrorCount);\n                return this.createError(ErrorCodes.ONE_OF_MULTIPLE, {\n                    index1: validIndex,\n                    index2: i\n                }, \"\", \"/oneOf\", null, data, schema);\n            }\n            if (this.trackUnknownProperties) {\n                for (var knownKey in this.knownPropertyPaths) {\n                    oldKnownPropertyPaths[knownKey] = true;\n                    delete oldUnknownPropertyPaths[knownKey];\n                }\n                for (var unknownKey in this.unknownPropertyPaths) {\n                    if (!oldKnownPropertyPaths[unknownKey]) {\n                        oldUnknownPropertyPaths[unknownKey] = true;\n                    }\n                }\n            }\n        } else if (error) {\n            errors.push(error);\n        }\n    }\n    if (this.trackUnknownProperties) {\n        this.unknownPropertyPaths = oldUnknownPropertyPaths;\n        this.knownPropertyPaths = oldKnownPropertyPaths;\n    }\n    if (validIndex === null) {\n        errors = errors.concat(this.errors.slice(startErrorCount));\n        this.errors = this.errors.slice(0, startErrorCount);\n        return this.createError(ErrorCodes.ONE_OF_MISSING, {}, \"\", \"/oneOf\", errors, data, schema);\n    } else {\n        this.errors = this.errors.slice(0, startErrorCount);\n    }\n    return null;\n};\n\nValidatorContext.prototype.validateNot = function validateNot(data, schema, dataPointerPath) {\n    if (schema.not === undefined) {\n        return null;\n    }\n    var oldErrorCount = this.errors.length;\n    var oldUnknownPropertyPaths, oldKnownPropertyPaths;\n    if (this.trackUnknownProperties) {\n        oldUnknownPropertyPaths = this.unknownPropertyPaths;\n        oldKnownPropertyPaths = this.knownPropertyPaths;\n        this.unknownPropertyPaths = {};\n        this.knownPropertyPaths = {};\n    }\n    var error = this.validateAll(data, schema.not, null, null, dataPointerPath);\n    var notErrors = this.errors.slice(oldErrorCount);\n    this.errors = this.errors.slice(0, oldErrorCount);\n    if (this.trackUnknownProperties) {\n        this.unknownPropertyPaths = oldUnknownPropertyPaths;\n        this.knownPropertyPaths = oldKnownPropertyPaths;\n    }\n    if (error === null && notErrors.length === 0) {\n        return this.createError(ErrorCodes.NOT_PASSED, {}, \"\", \"/not\", null, data, schema);\n    }\n    return null;\n};\n\nValidatorContext.prototype.validateHypermedia = function validateCombinations(data, schema, dataPointerPath) {\n    if (!schema.links) {\n        return null;\n    }\n    var error;\n    for (var i = 0; i < schema.links.length; i++) {\n        var ldo = schema.links[i];\n        if (ldo.rel === \"describedby\") {\n            var template = new UriTemplate(ldo.href);\n            var allPresent = true;\n            for (var j = 0; j < template.varNames.length; j++) {\n                if (!(template.varNames[j] in data)) {\n                    allPresent = false;\n                    break;\n                }\n            }\n            if (allPresent) {\n                var schemaUrl = template.fillFromObject(data);\n                var subSchema = { \"$ref\": schemaUrl };\n                if (error = this.validateAll(data, subSchema, [], [\"links\", i], dataPointerPath)) {\n                    return error;\n                }\n            }\n        }\n    }\n};\n\n// parseURI() and resolveUrl() are from https://gist.github.com/1088850\n//   -  released as public domain by author (\"Yaffle\") - see comments on gist\n\nfunction parseURI(url) {\n    var m = String(url).replace(/^\\s+|\\s+$/g, '').match(/^([^:\\/?#]+:)?(\\/\\/(?:[^:@]*(?::[^:@]*)?@)?(([^:\\/?#]*)(?::(\\d*))?))?([^?#]*)(\\?[^#]*)?(#[\\s\\S]*)?/);\n    // authority = '//' + user + ':' + pass '@' + hostname + ':' port\n    return m ? {\n        href: m[0] || '',\n        protocol: m[1] || '',\n        authority: m[2] || '',\n        host: m[3] || '',\n        hostname: m[4] || '',\n        port: m[5] || '',\n        pathname: m[6] || '',\n        search: m[7] || '',\n        hash: m[8] || ''\n    } : null;\n}\n\nfunction resolveUrl(base, href) {\n    // RFC 3986\n\n    function removeDotSegments(input) {\n        var output = [];\n        input.replace(/^(\\.\\.?(\\/|$))+/, '').replace(/\\/(\\.(\\/|$))+/g, '/').replace(/\\/\\.\\.$/, '/../').replace(/\\/?[^\\/]*/g, function (p) {\n            if (p === '/..') {\n                output.pop();\n            } else {\n                output.push(p);\n            }\n        });\n        return output.join('').replace(/^\\//, input.charAt(0) === '/' ? '/' : '');\n    }\n\n    href = parseURI(href || '');\n    base = parseURI(base || '');\n\n    return !href || !base ? null : (href.protocol || base.protocol) + (href.protocol || href.authority ? href.authority : base.authority) + removeDotSegments(href.protocol || href.authority || href.pathname.charAt(0) === '/' ? href.pathname : href.pathname ? (base.authority && !base.pathname ? '/' : '') + base.pathname.slice(0, base.pathname.lastIndexOf('/') + 1) + href.pathname : base.pathname) + (href.protocol || href.authority || href.pathname ? href.search : href.search || base.search) + href.hash;\n}\n\nfunction getDocumentUri(uri) {\n    return uri.split('#')[0];\n}\n\nfunction normSchema(schema, baseUri) {\n    if (schema && (typeof schema === 'undefined' ? 'undefined' : (0, _typeof3.default)(schema)) === \"object\") {\n        if (baseUri === undefined) {\n            baseUri = schema.id;\n        } else if (typeof schema.id === \"string\") {\n            baseUri = resolveUrl(baseUri, schema.id);\n            schema.id = baseUri;\n        }\n        if (Array.isArray(schema)) {\n            for (var i = 0; i < schema.length; i++) {\n                normSchema(schema[i], baseUri);\n            }\n        } else {\n            if (typeof schema['$ref'] === \"string\") {\n                schema['$ref'] = resolveUrl(baseUri, schema['$ref']);\n            }\n            for (var key in schema) {\n                if (key !== \"enum\") {\n                    normSchema(schema[key], baseUri);\n                }\n            }\n        }\n    }\n}\n\nfunction defaultErrorReporter(language) {\n    language = language || 'en';\n\n    var errorMessages = languages[language];\n\n    return function (error) {\n        var messageTemplate = errorMessages[error.code] || ErrorMessagesDefault[error.code];\n        if (typeof messageTemplate !== 'string') {\n            return \"Unknown error code \" + error.code + \": \" + (0, _stringify2.default)(error.messageParams);\n        }\n        var messageParams = error.params;\n        // Adapted from Crockford's supplant()\n        return messageTemplate.replace(/\\{([^{}]*)\\}/g, function (whole, varName) {\n            var subValue = messageParams[varName];\n            return typeof subValue === 'string' || typeof subValue === 'number' ? subValue : whole;\n        });\n    };\n}\n\nvar ErrorCodes = {\n    INVALID_TYPE: 0,\n    ENUM_MISMATCH: 1,\n    ANY_OF_MISSING: 10,\n    ONE_OF_MISSING: 11,\n    ONE_OF_MULTIPLE: 12,\n    NOT_PASSED: 13,\n    // Numeric errors\n    NUMBER_MULTIPLE_OF: 100,\n    NUMBER_MINIMUM: 101,\n    NUMBER_MINIMUM_EXCLUSIVE: 102,\n    NUMBER_MAXIMUM: 103,\n    NUMBER_MAXIMUM_EXCLUSIVE: 104,\n    NUMBER_NOT_A_NUMBER: 105,\n    // String errors\n    STRING_LENGTH_SHORT: 200,\n    STRING_LENGTH_LONG: 201,\n    STRING_PATTERN: 202,\n    // Object errors\n    OBJECT_PROPERTIES_MINIMUM: 300,\n    OBJECT_PROPERTIES_MAXIMUM: 301,\n    OBJECT_REQUIRED: 302,\n    OBJECT_ADDITIONAL_PROPERTIES: 303,\n    OBJECT_DEPENDENCY_KEY: 304,\n    // Array errors\n    ARRAY_LENGTH_SHORT: 400,\n    ARRAY_LENGTH_LONG: 401,\n    ARRAY_UNIQUE: 402,\n    ARRAY_ADDITIONAL_ITEMS: 403,\n    // Custom/user-defined errors\n    FORMAT_CUSTOM: 500,\n    KEYWORD_CUSTOM: 501,\n    // Schema structure\n    CIRCULAR_REFERENCE: 600,\n    // Non-standard validation options\n    UNKNOWN_PROPERTY: 1000\n};\nvar ErrorCodeLookup = {};\nfor (var key in ErrorCodes) {\n    ErrorCodeLookup[ErrorCodes[key]] = key;\n}\nvar ErrorMessagesDefault = {\n    INVALID_TYPE: \"Invalid type: {type} (expected {expected})\",\n    ENUM_MISMATCH: \"No enum match for: {value}\",\n    ANY_OF_MISSING: \"Data does not match any schemas from \\\"anyOf\\\"\",\n    ONE_OF_MISSING: \"Data does not match any schemas from \\\"oneOf\\\"\",\n    ONE_OF_MULTIPLE: \"Data is valid against more than one schema from \\\"oneOf\\\": indices {index1} and {index2}\",\n    NOT_PASSED: \"Data matches schema from \\\"not\\\"\",\n    // Numeric errors\n    NUMBER_MULTIPLE_OF: \"Value {value} is not a multiple of {multipleOf}\",\n    NUMBER_MINIMUM: \"Value {value} is less than minimum {minimum}\",\n    NUMBER_MINIMUM_EXCLUSIVE: \"Value {value} is equal to exclusive minimum {minimum}\",\n    NUMBER_MAXIMUM: \"Value {value} is greater than maximum {maximum}\",\n    NUMBER_MAXIMUM_EXCLUSIVE: \"Value {value} is equal to exclusive maximum {maximum}\",\n    NUMBER_NOT_A_NUMBER: \"Value {value} is not a valid number\",\n    // String errors\n    STRING_LENGTH_SHORT: \"String is too short ({length} chars), minimum {minimum}\",\n    STRING_LENGTH_LONG: \"String is too long ({length} chars), maximum {maximum}\",\n    STRING_PATTERN: \"String does not match pattern: {pattern}\",\n    // Object errors\n    OBJECT_PROPERTIES_MINIMUM: \"Too few properties defined ({propertyCount}), minimum {minimum}\",\n    OBJECT_PROPERTIES_MAXIMUM: \"Too many properties defined ({propertyCount}), maximum {maximum}\",\n    OBJECT_REQUIRED: \"Missing required property: {key}\",\n    OBJECT_ADDITIONAL_PROPERTIES: \"Additional properties not allowed\",\n    OBJECT_DEPENDENCY_KEY: \"Dependency failed - key must exist: {missing} (due to key: {key})\",\n    // Array errors\n    ARRAY_LENGTH_SHORT: \"Array is too short ({length}), minimum {minimum}\",\n    ARRAY_LENGTH_LONG: \"Array is too long ({length}), maximum {maximum}\",\n    ARRAY_UNIQUE: \"Array items are not unique (indices {match1} and {match2})\",\n    ARRAY_ADDITIONAL_ITEMS: \"Additional items not allowed\",\n    // Format errors\n    FORMAT_CUSTOM: \"Format validation failed ({message})\",\n    KEYWORD_CUSTOM: \"Keyword failed: {key} ({message})\",\n    // Schema structure\n    CIRCULAR_REFERENCE: \"Circular $refs: {urls}\",\n    // Non-standard validation options\n    UNKNOWN_PROPERTY: \"Unknown property (not in schema)\"\n};\n\nfunction ValidationError(code, params, dataPath, schemaPath, subErrors) {\n    Error.call(this);\n    if (code === undefined) {\n        throw new Error(\"No error code supplied: \" + schemaPath);\n    }\n    this.message = '';\n    this.params = params;\n    this.code = code;\n    this.dataPath = dataPath || \"\";\n    this.schemaPath = schemaPath || \"\";\n    this.subErrors = subErrors || null;\n\n    var err = new Error(this.message);\n    this.stack = err.stack || err.stacktrace;\n    if (!this.stack) {\n        try {\n            throw err;\n        } catch (err) {\n            this.stack = err.stack || err.stacktrace;\n        }\n    }\n}\n\nValidationError.prototype = (0, _create2.default)(Error.prototype);\nValidationError.prototype.constructor = ValidationError;\nValidationError.prototype.name = 'ValidationError';\n\nValidationError.prototype.prefixWith = function (dataPrefix, schemaPrefix) {\n    if (dataPrefix !== null) {\n        dataPrefix = dataPrefix.replace(/~/g, \"~0\").replace(/\\//g, \"~1\");\n        this.dataPath = \"/\" + dataPrefix + this.dataPath;\n    }\n    if (schemaPrefix !== null) {\n        schemaPrefix = schemaPrefix.replace(/~/g, \"~0\").replace(/\\//g, \"~1\");\n        this.schemaPath = \"/\" + schemaPrefix + this.schemaPath;\n    }\n    if (this.subErrors !== null) {\n        for (var i = 0; i < this.subErrors.length; i++) {\n            this.subErrors[i].prefixWith(dataPrefix, schemaPrefix);\n        }\n    }\n    return this;\n};\n\nfunction isTrustedUrl(baseUrl, testUrl) {\n    if (testUrl.substring(0, baseUrl.length) === baseUrl) {\n        var remainder = testUrl.substring(baseUrl.length);\n        if (testUrl.length > 0 && testUrl.charAt(baseUrl.length - 1) === \"/\" || remainder.charAt(0) === \"#\" || remainder.charAt(0) === \"?\") {\n            return true;\n        }\n    }\n    return false;\n}\n\nvar languages = {};\n\nfunction createApi(language) {\n    var globalContext = new ValidatorContext();\n    var currentLanguage;\n    var customErrorReporter;\n    var api = {\n        setErrorReporter: function setErrorReporter(reporter) {\n            if (typeof reporter === 'string') {\n                return this.language(reporter);\n            }\n            customErrorReporter = reporter;\n            return true;\n        },\n        addFormat: function addFormat() {\n            globalContext.addFormat.apply(globalContext, arguments);\n        },\n        language: function language(code) {\n            if (!code) {\n                return currentLanguage;\n            }\n            if (!languages[code]) {\n                code = code.split('-')[0]; // fall back to base language\n            }\n            if (languages[code]) {\n                currentLanguage = code;\n                return code; // so you can tell if fall-back has happened\n            }\n            return false;\n        },\n        addLanguage: function addLanguage(code, messageMap) {\n            var key;\n            for (key in ErrorCodes) {\n                if (messageMap[key] && !messageMap[ErrorCodes[key]]) {\n                    messageMap[ErrorCodes[key]] = messageMap[key];\n                }\n            }\n            var rootCode = code.split('-')[0];\n            if (!languages[rootCode]) {\n                // use for base language if not yet defined\n                languages[code] = messageMap;\n                languages[rootCode] = messageMap;\n            } else {\n                languages[code] = (0, _create2.default)(languages[rootCode]);\n                for (key in messageMap) {\n                    if (typeof languages[rootCode][key] === 'undefined') {\n                        languages[rootCode][key] = messageMap[key];\n                    }\n                    languages[code][key] = messageMap[key];\n                }\n            }\n            return this;\n        },\n        freshApi: function freshApi(language) {\n            var result = createApi();\n            if (language) {\n                result.language(language);\n            }\n            return result;\n        },\n        validate: function validate(data, schema, checkRecursive, banUnknownProperties) {\n            var def = defaultErrorReporter(currentLanguage);\n            var errorReporter = customErrorReporter ? function (error, data, schema) {\n                return customErrorReporter(error, data, schema) || def(error, data, schema);\n            } : def;\n            var context = new ValidatorContext(globalContext, false, errorReporter, checkRecursive, banUnknownProperties);\n            if (typeof schema === \"string\") {\n                schema = { \"$ref\": schema };\n            }\n            context.addSchema(\"\", schema);\n            var error = context.validateAll(data, schema, null, null, \"\");\n            if (!error && banUnknownProperties) {\n                error = context.banUnknownProperties(data, schema);\n            }\n            this.error = error;\n            this.missing = context.missing;\n            this.valid = error === null;\n            return this.valid;\n        },\n        validateResult: function validateResult() {\n            var result = {};\n            this.validate.apply(result, arguments);\n            return result;\n        },\n        validateMultiple: function validateMultiple(data, schema, checkRecursive, banUnknownProperties) {\n            var def = defaultErrorReporter(currentLanguage);\n            var errorReporter = customErrorReporter ? function (error, data, schema) {\n                return customErrorReporter(error, data, schema) || def(error, data, schema);\n            } : def;\n            var context = new ValidatorContext(globalContext, true, errorReporter, checkRecursive, banUnknownProperties);\n            if (typeof schema === \"string\") {\n                schema = { \"$ref\": schema };\n            }\n            context.addSchema(\"\", schema);\n            context.validateAll(data, schema, null, null, \"\");\n            if (banUnknownProperties) {\n                context.banUnknownProperties(data, schema);\n            }\n            var result = {};\n            result.errors = context.errors;\n            result.missing = context.missing;\n            result.valid = result.errors.length === 0;\n            return result;\n        },\n        addSchema: function addSchema() {\n            return globalContext.addSchema.apply(globalContext, arguments);\n        },\n        getSchema: function getSchema() {\n            return globalContext.getSchema.apply(globalContext, arguments);\n        },\n        getSchemaMap: function getSchemaMap() {\n            return globalContext.getSchemaMap.apply(globalContext, arguments);\n        },\n        getSchemaUris: function getSchemaUris() {\n            return globalContext.getSchemaUris.apply(globalContext, arguments);\n        },\n        getMissingUris: function getMissingUris() {\n            return globalContext.getMissingUris.apply(globalContext, arguments);\n        },\n        dropSchemas: function dropSchemas() {\n            globalContext.dropSchemas.apply(globalContext, arguments);\n        },\n        defineKeyword: function defineKeyword() {\n            globalContext.defineKeyword.apply(globalContext, arguments);\n        },\n        defineError: function defineError(codeName, codeNumber, defaultMessage) {\n            if (typeof codeName !== 'string' || !/^[A-Z]+(_[A-Z]+)*$/.test(codeName)) {\n                throw new Error('Code name must be a string in UPPER_CASE_WITH_UNDERSCORES');\n            }\n            if (typeof codeNumber !== 'number' || codeNumber % 1 !== 0 || codeNumber < 10000) {\n                throw new Error('Code number must be an integer > 10000');\n            }\n            if (typeof ErrorCodes[codeName] !== 'undefined') {\n                throw new Error('Error already defined: ' + codeName + ' as ' + ErrorCodes[codeName]);\n            }\n            if (typeof ErrorCodeLookup[codeNumber] !== 'undefined') {\n                throw new Error('Error code already used: ' + ErrorCodeLookup[codeNumber] + ' as ' + codeNumber);\n            }\n            ErrorCodes[codeName] = codeNumber;\n            ErrorCodeLookup[codeNumber] = codeName;\n            ErrorMessagesDefault[codeName] = ErrorMessagesDefault[codeNumber] = defaultMessage;\n            for (var langCode in languages) {\n                var language = languages[langCode];\n                if (language[codeName]) {\n                    language[codeNumber] = language[codeNumber] || language[codeName];\n                }\n            }\n        },\n        reset: function reset() {\n            globalContext.reset();\n            this.error = null;\n            this.missing = [];\n            this.valid = true;\n        },\n        missing: [],\n        error: null,\n        valid: true,\n        normSchema: normSchema,\n        resolveUrl: resolveUrl,\n        getDocumentUri: getDocumentUri,\n        errorCodes: ErrorCodes\n    };\n    api.language(language || 'en');\n    return api;\n}\n\n//export function validator() {\nvar tv4 = createApi();\ntv4.addLanguage('en-gb', ErrorMessagesDefault);\n\n//legacy property\ntv4.tv4 = tv4;\n//return tv4;\nexports.default = tv4;\n//}\n\nmodule.exports = exports['default'];\n\n},{\"babel-runtime/core-js/json/stringify\":2,\"babel-runtime/core-js/object/create\":4,\"babel-runtime/core-js/object/define-property\":5,\"babel-runtime/core-js/object/is-frozen\":7,\"babel-runtime/core-js/object/keys\":8,\"babel-runtime/helpers/typeof\":17}],447:[function(require,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _stringify = require('babel-runtime/core-js/json/stringify');\n\nvar _stringify2 = _interopRequireDefault(_stringify);\n\nvar _keys = require('babel-runtime/core-js/object/keys');\n\nvar _keys2 = _interopRequireDefault(_keys);\n\nexports.divideURL = divideURL;\nexports.divideEmail = divideEmail;\nexports.emptyObject = emptyObject;\nexports.deepClone = deepClone;\nexports.getUserURLFromEmail = getUserURLFromEmail;\nexports.getUserEmailFromURL = getUserEmailFromURL;\nexports.convertToUserURL = convertToUserURL;\nexports.isDataObjectURL = isDataObjectURL;\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n* Copyright 2016 PT Inovação e Sistemas SA\n* Copyright 2016 INESC-ID\n* Copyright 2016 QUOBIS NETWORKS SL\n* Copyright 2016 FRAUNHOFER-GESELLSCHAFT ZUR FOERDERUNG DER ANGEWANDTEN FORSCHUNG E.V\n* Copyright 2016 ORANGE SA\n* Copyright 2016 Deutsche Telekom AG\n* Copyright 2016 Apizee\n* Copyright 2016 TECHNISCHE UNIVERSITAT BERLIN\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n**/\n/**\n * Support module with some functions will be useful\n * @module utils\n */\n\n/**\n * @typedef divideURL\n * @type Object\n * @property {string} type The type of URL\n * @property {string} domain The domain of URL\n * @property {string} identity The identity of URL\n */\n\n/**\n * Divide an url in type, domain and identity\n * @param  {URL.URL} url - url address\n * @return {divideURL} the result of divideURL\n */\nfunction divideURL(url) {\n\n  if (!url) throw Error('URL is needed to split');\n\n  // let re = /([a-zA-Z-]*)?:\\/\\/(?:\\.)?([-a-zA-Z0-9@:%._\\+~#=]{2,256}\\.[a-z]{2,6}\\b)*(\\/[\\/\\d\\w\\.-]*)*(?:[\\?])*(.+)*/gi;\n  var re = /([a-zA-Z-]*):\\/\\/(?:\\.)?([-a-zA-Z0-9@:%._\\+~#=]{2,256})([-a-zA-Z0-9@:%._\\+~#=\\/]*)/gi;\n  var subst = '$1,$2,$3';\n  var parts = url.replace(re, subst).split(',');\n\n  // If the url has no protocol, the default protocol set is https\n  if (parts[0] === url) {\n    parts[0] = 'https';\n    parts[1] = url;\n  }\n\n  var result = {\n    type: parts[0],\n    domain: parts[1],\n    identity: parts[2]\n  };\n\n  return result;\n}\n\nfunction divideEmail(email) {\n  var indexOfAt = email.indexOf('@');\n\n  var result = {\n    username: email.substring(0, indexOfAt),\n    domain: email.substring(indexOfAt + 1, email.length)\n  };\n\n  return result;\n}\n\n/**\n * Check if an Object is empty\n * @param  {Object} object Object to be checked\n * @return {Boolean}       status of Object, empty or not (true|false);\n */\nfunction emptyObject(object) {\n  return (0, _keys2.default)(object).length > 0 ? false : true;\n}\n\n/**\n * Make a COPY of the original data\n * @param  {Object}  obj - object to be cloned\n * @return {Object}\n */\nfunction deepClone(obj) {\n  //TODO: simple but inefficient JSON deep clone...\n  if (obj) return JSON.parse((0, _stringify2.default)(obj));\n}\n\n/**\n * Obtains the user URL that corresponds to a given email\n * @param  {string} userEmail The user email\n * @return {URL.URL} userURL The user URL\n */\nfunction getUserURLFromEmail(userEmail) {\n  var indexOfAt = userEmail.indexOf('@');\n  return 'user://' + userEmail.substring(indexOfAt + 1, userEmail.length) + '/' + userEmail.substring(0, indexOfAt);\n}\n\n/**\n * Obtains the user email that corresponds to a given URL\n * @param  {URL.URL} userURL The user URL\n * @return {string} userEmail The user email\n */\nfunction getUserEmailFromURL(userURL) {\n  var url = divideURL(userURL);\n  return url.identity.replace('/', '') + '@' + url.domain; // identity field has '/exampleID' instead of 'exampleID'\n}\n\n/**\n * Check if the user identifier is already in the URL format, if not, convert to URL format\n * @param  {string}   identifier  user identifier\n * @return {string}   userURL    the user URL\n */\nfunction convertToUserURL(identifier) {\n\n  // check if the identifier is already in the url format\n  if (identifier.substring(0, 7) === 'user://') {\n    var dividedURL = divideURL(identifier);\n\n    //check if the url is well formated\n    if (dividedURL.domain && dividedURL.identity) {\n      return identifier;\n    } else {\n      throw 'userURL with wrong format';\n    }\n\n    //if not, convert the user email to URL format\n  } else {\n    return getUserURLFromEmail(identifier);\n  }\n}\n\nfunction isDataObjectURL(url) {\n  var schemasToIgnore = ['domain-idp', 'runtime', 'domain', 'hyperty'];\n  var splitURL = url.split('://');\n  var urlSchema = splitURL[0];\n\n  return schemasToIgnore.indexOf(urlSchema) === -1;\n}\n\n},{\"babel-runtime/core-js/json/stringify\":2,\"babel-runtime/core-js/object/keys\":8}]},{},[439])(439)\n});\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n"],"file":"Runtime.js","sourceRoot":"/source/"}